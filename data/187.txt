import numpy as np
from keras.preprocessing import sequence
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation
from keras.layers.embeddings import Embedding
from keras.layers.recurrent import LSTM, SimpleRNN, GRU
from keras.layers.core import *
max_features = 5883
maxlen = 80
batch_size = 32
in_out_neurons = 2
hidden_neurons = 300
import os
import sys
import pandas as pd
def _load_data(data, n_prev=100):
    for i in range(len(data)-n_prev):
        docX.append(data.iloc[i:i+n_prev])
        docY.append(data.iloc[i+n_prev])
    all_X = np.array(docX)
    all_Y = np.array(docY)
    return all_X, all_Y
def train_test_split(dataframe, test_size=0.2):
    X_train, y_train = _load_data(dataframe.iloc[0:ntrn])
    X_test, y_test = _load_data(dataframe.iloc[ntrn:])
    print(X_train, y_train)
    return (X_train, y_train), (X_test, y_test)
def rnn_lstm(file_dataframe, test_size=0.2, col="high"):
    print('Loading data...')
    (X_train, y_train), (X_test, y_test) = train_test_split(ile_dataframe[col], test_size=0.2)
    X_train = sequence.pad_sequences(X_train, maxlen=maxlen)
    X_test = sequence.pad_sequences(X_test, maxlen=maxlen)
    print('X_train shape:', X_train.shape)
    print('X_test shape:', X_test.shape)
    print('Build model...')
    hidden = 32
    step = 10
    model1 = Sequential()
    model1.add(LSTM(input_dim=input_dim, output_dim=hidden, input_length=step, return_sequences=True))
    model2 = Sequential()
    model2.add(Dense(input_dim=input_dim, output_dim=step))
    model2.add(RepeatVector(hidden))
    model2.add(Permute((2, 1)))
    model = Sequential()
    model.compile(loss='mse', optimizer='sgd')
    print('Train...')
    print(X_train.shape, X_test.shape)
    print(y_train.shape, y_test.shape)
    model.fit(X_train, y_train, batch_size=batch_size, \lidation_data=(X_test, y_test), nb_epoch=5)
    score, accuracy = model.evaluate(X_test, y_test,batch_size=batch_size)
    print('Test score:', score)
    print('Test accuracy:', accuracy)
    return (score, accuracy)
def main(dir_path):
    file_name="GOOGL.csv"
    print(file_name)
    file_dataframe = pd.read_csv(os.path.join(dir_path, file_name))
    print(rnn_lstm(file_dataframe, 0.1, 'high'))
if __name__ == '__main__':
    main(sys.argv[1])