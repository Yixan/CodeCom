from keras.layers import Dense, Flatten, Dropout, Embedding
from keras.layers.recurrent import LSTM
from keras.regularizers import l2
from keras.models import Sequential, load_model
from keras.layers import MaxPooling2D, TimeDistributed 
from keras.layers import Dense, Dropout, Activation, Flatten, Bidirectional
from keras.optimizers import Adam
from keras.layers.wrappers import TimeDistributed
from keras.layers.convolutional import (Conv2D, MaxPooling3D, Conv3D,MaxPooling2D)
from collections import deque
import sys
from keras.optimizers import SGD
class ResearchModels():
    def __init__(self, nb_classes, model, seq_length,aved_model=None, features_length=2048):
        self.seq_length = seq_length
        self.load_model = load_model
        self.saved_model = saved_model
        self.nb_classes = nb_classes
        self.feature_queue = deque()
        metrics = ['accuracy']
        if self.nb_classes >= 10:
            metrics.append('top_k_categorical_accuracy')
        if self.saved_model is not None:
            print("Loading model %s" % self.saved_model)
            self.model = load_model(self.saved_model)
        elif model == 'cnn_rnn':
            print("Loading cnn_rnn model.")
            self.input_shape = (seq_length, features_length)
            self.model = self.cnn_rnn()
        elif model == 'lstm':
            print("Loading LSTM model.")
            self.input_shape = (seq_length, features_length)
            self.model = self.lstm()
        elif model == 'crnn':
            print("Loading CRNN model.")
            self.input_shape = (seq_length, 80, 80, 3)
            self.model = self.crnn()
        elif model == 'mlp':
            print("Loading simple MLP.")
            self.input_shape = features_length * seq_length
            self.model = self.mlp()
        elif model == 'conv_3d':
            print("Loading Conv3D")
            self.input_shape = (seq_length, 80, 80, 3)
            self.model = self.conv_3d()
        else:
            print("Unknown network.")
            sys.exit()
        self.model.compile(loss='categorical_crossentropy', optimizer=optimizer,metrics=metrics)
    def cnn_rnn(self):
        model = Sequential()
        model.add(LSTM(256,dropout=0.2,input_shape=self.inputshape))
        model.add(Dense(1024, activation='relu'))
        model.add(Dropout(0.5))
        model.add(Dense(5, activation='softmax'))
        return model
    def lstm(self):
        model_lstm = Sequential()
        model_lstm.add(LSTM(input_dim=2048, output_dim=100, return_sequences=True)) 
        model_lstm.add(Dropout(0.3)) 
        model_lstm.add(LSTM(input_dim=100, output_dim=20, return_sequences=False)) 
        model_lstm.add(Dense(2, W_regularizer=l2(0.06))) 
        model_lstm.add(Activation('softmax')) 
        model_lstm.add(Dense(self.nb_classes, activation='softmax'))
        model = Sequential() 
        model.add(LSTM(2048, return_sequences=True, stateful=False, input_shape=self.input_shape)) 
        model.add(LSTM(512, return_sequences=True, stateful=False)) 
        model.add(LSTM(64)) 
        model.add(Dense(32, activation='relu')) 
        model.add(Dropout(0.5))  
        model.add(Dense(self.nb_classes, activation='softmax'))
        return model
    def crnn(self):
        model = Sequential() 
        model.add(TimeDistributed(Conv2D(32, 3, 3, border_mode='same'), input_shape=(40,2048), name='convolution2d_1')) 
        model.add(TimeDistributed(Activation('relu'))) 
        model.add(TimeDistributed(Conv2D(32, 3, 3),  name='convolution2d_2')) 
        model.add(TimeDistributed(Activation('relu'))) 
        model.add(TimeDistributed(MaxPooling2D(pool_size=(2, 2)))) 
        model.add(TimeDistributed(Dropout(0.25))) 
        model.add(TimeDistributed(Conv2D(64, 3, 3, border_mode='same'), name='convolution2d_3')) 
        model.add(TimeDistributed(Activation('relu'))) 
        model.add(TimeDistributed(Conv2D(64, 3, 3), name='convolution2d_4')) 
        model.add(TimeDistributed(Activation('relu'))) 
        model.add(TimeDistributed(MaxPooling2D(pool_size=(2, 2)))) 
        model.add(TimeDistributed(Dropout(0.25))) 
        model.add(TimeDistributed(Flatten())) 
        model.add(TimeDistributed(Dense(512), name='dense_1')) 
        model.add(TimeDistributed(Activation('relu'))) 
        model.add(TimeDistributed(Dropout(0.5))) 
        model.add(LSTM(512, return_sequences=True)) 
        model.add(TimeDistributed(Dense(4)))
        model.add(Dense(self.nb_classes, activation='softmax'))
        return model
    def mlp(self):
        model = Sequential()
        model.add(Dense(512, input_dim=self.input_shape))
        model.add(Dropout(0.5))
        model.add(Dense(512))
        model.add(Dropout(0.5))
        model.add(Dense(self.nb_classes, activation='softmax'))
        return model
    def conv_3d(self):
        model = Sequential()
        model.add(Conv3D( (7,7,7), activation='relu', input_shape=self.input_shape))
        model.add(MaxPooling3D(pool_size=(1, 2, 2), strides=(1, 2, 2)))
        model.add(Conv3D(64, (3,3,3), activation='relu'))
        model.add(MaxPooling3D(pool_size=(1, 2, 2), strides=(1, 2, 2)))
        model.add(Conv3D(128, (2,2,2), activation='relu'))
        model.add(MaxPooling3D(pool_size=(1, 2, 2), strides=(1, 2, 2)))
        model.add(Flatten())
        model.add(Dense(256))
        model.add(Dropout(0.2))
        model.add(Dense(256))
        model.add(Dropout(0.2))
        model.add(Dense(self.nb_classes, activation='softmax'))
        return model
