import arrow,bs4,random
import numexpr as ne  
import numpy as np
import pandas as pd
import tushare as ts
import pypinyin 
import matplotlib as mpl
from matplotlib import pyplot as plt
from concurrent.futures import ProcessPoolExecutor
from concurrent.futures import ThreadPoolExecutor
from concurrent.futures import as_completed
import keras as ks
from keras import initializers,models,layers
from keras.preprocessing import sequence
from keras.models import Sequential,load_model
from keras.layers import Dense, Input, Dropout, Embedding, LSTM, Bidirectional,Activation,SimpleRNN,Conv1D,MaxPooling1D, GlobalMaxPooling1D,GlobalAveragePooling1D
from keras.optimizers import RMSprop, SGD  
from keras.applications.resnet50 import preprocess_input, decode_predictions
import tflearn as tn
import tensorflow as tf
import tensorlayer as tl
import zsys
import ztools as zt
import ztools_tq as ztq
import zpd_talib as zta
import zai_tools as zat
def mlp01():
    model = Sequential()
    model.add(Dense(1, name='mlp01',input_dim=1)) 
    return model
def mlp010(num_in=10,num_out=1):
    model = Sequential()
    model.add(Dense(num_in*4, input_dim=num_in, activation='relu'))
    model.add(Dense(num_out))
    model.compile('adam', 'mse', metrics=['acc'])
    return model
def mlp020(num_in=10,num_out=1):
    model = Sequential()
    model.add(Dense(num_in*4, input_dim=num_in, kernel_initializer='normal', activation='relu'))
    model.add(Dense(num_out, kernel_initializer='normal'))
    model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])
    return model
def rnn010(num_in,num_out):
    model = Sequential()
    model.add(SimpleRNN(num_in*4,kernel_initializer=initializers.RandomNormal(stddev=0.001),recurrent_initializer=initializers.Identity(gain=1.0),activation='relu',input_shape=(num_in,1)))
    model.add(Dense(num_out,activation='softmax'))
    rmsprop = RMSprop(lr=1e-6)
    model.compile(loss='categorical_crossentropy',optimizer=rmsprop,metrics=['accuracy'])
    return model
def rnn020(num_in,num_out):
    model = Sequential()
    model.add(SimpleRNN(num_in*8, input_shape=(num_in,1)))
    model.add(Dense(num_out, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])
    return model    
def lstm010(num_in,num_out=1):    
    model = Sequential()
    model.add(LSTM(num_in*8, input_shape=(num_in,1)))
    model.add(layers.Dense(1))
    model.compile(loss='mse', optimizer='rmsprop', metrics=['accuracy'])
    return model
def lstm020typ(num_in=10,num_out=1):
    model = Sequential()
    model.add(LSTM(num_in*8, return_sequences=True,input_shape=(num_in, 1)))
    model.add(Dropout(0.2))
    model.add(LSTM(num_in*4))
    model.add(Dropout(0.2))
    model.add(Dense(num_out, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])
    return model
