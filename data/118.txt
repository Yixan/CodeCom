from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
import logging
from rasa_core.policies.keras_policy import KerasPolicy
logger = logging.getLogger(__name__)
class nuRobotPolicy(KerasPolicy):
    def model_architecture(self, input_shape, output_shape):
        from keras.layers import LSTM, Activation, Masking, Dense
        from keras.models import Sequential
        from keras.models import Sequential
        from keras.layers import \
            Masking, LSTM, Dense, TimeDistributed, Activation
        model = Sequential()
        if len(output_shape) == 1:
            model.add(Masking(mask_value=-1, input_shape=input_shape))
            model.add(LSTM(self.rnn_size))
            model.add(Dense(input_dim=self.rnn_size, units=output_shape[-1]))
        elif len(output_shape) == 2:
            model.add(Masking(mask_value=-1,nput_shape=(None, input_shape[1])))
            model.add(LSTM(self.rnn_size, return_sequences=True))
            model.add(TimeDistributed(Dense(units=output_shape[-1])))
        else:
            raise ValueError("Cannot construct the model because"th of output_shape = {} "uld be 1 or 2.""".format(len(output_shape)))
        model.add(Activation('softmax'))
        model.compile(loss='categorical_crossentropy',optimizer='SGD',metrics=['accuracy'])
        logger.debug(model.summary())
        return model
