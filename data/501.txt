import numpy as np
from keras.models import Sequential
from keras.layers.core import Dense, Dropout
from keras.layers.recurrent import SimpleRNN, LSTM, GRU
import keras
import pandas as pd
from keras.models import load_model
from shutil import copyfile
from datetime import datetime
from keras.layers.recurrent import LSTM
from keras.models import Model
from keras.models import Sequential
from keras.layers.core import Dense
  if len(lstm_dim)==0: raise Exception("len(lstm_dim) == 0")
  out_neurons = 1
  model = Sequential()
  for i, dimx in enumerate(lstm_dim):
    if i==0:
    else:
      model.add(LSTM(dimx, return_sequences=(i+1)!=len(lstm_dim), activation='tanh'))
  model.add(Dense(out_neurons, activation='linear'))
  return model
  if len(lstm_dim)==0: raise Exception("len(lstm_dim) == 0")
  out_neurons = 1
  model = Sequential()
  for i, dimx in enumerate(lstm_dim):
    if i==0:
    else:
      model.add(Dense(dimx, activation='tanh'))
  model.add(Dense(out_neurons, activation='linear'))
  return model
  if len(lstm_dim)==0: raise Exception("len(lstm_dim) == 0")
  out_neurons = 1
  model = Sequential()
  for i, dimx in enumerate(lstm_dim):
    if i==0:
      model.add(LSTM(dimx,return_sequences=False,activation='tanh',batch_input_shape=batch_input_shape,stateful=True))
    else:
      model.add(Dense(dimx, activation='tanh'))
  model.add(Dense(out_neurons, activation='linear'))
  return model
