import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout
from keras.layers import LSTM, SimpleRNN, RNN
import numpy as np
import pickle
import load_sherlock as sh
import read_write_helpers as rw
import midi_to_data as md
from custom_rnns import MinimalLSTMCell, MinimalRNNCell
[X, y, Xval, yval] = sh.load()
print('-------------------- Hand-written RNN ---------------------')
model = Sequential()
model.add(RNN(MinimalRNNCell(256), input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=10,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'minimalRNN')
print('-------------------- Hand-written LSTM ---------------------')
model = Sequential()
model.add(RNN(MinimalLSTMCell(256), input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=10,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'minimalLSTM')
print('-------------------- Keras native RNN ---------------------')
model = Sequential()
model.add(SimpleRNN(256, input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=10,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'nativeRNN')
print('-------------------- Keras native LSTM ---------------------')
model = Sequential()
model.add(LSTM(256, input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=10,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'nativeLSTM')
[X, y, Xval, yval] = md.load_midi_prediction('toy/dataset/progressions/')
print('-------------------- Hand-written RNN ---------------------')
model = Sequential()
model.add(RNN(MinimalRNNCell(256), input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=100,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'minimalRNNmidi')
print('-------------------- Hand-written LSTM ---------------------')
model = Sequential()
model.add(RNN(MinimalLSTMCell(256), input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=100,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'minimalLSTMmidi')
print('-------------------- Keras native RNN ---------------------')
model = Sequential()
model.add(SimpleRNN(256, input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=100,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'nativeRNNmidi')
print('-------------------- Keras native LSTM ---------------------')
model = Sequential()
model.add(LSTM(256, input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(	X,	y,	epochs=100,	batch_size=128,	validation_data=(		Xval,		yval))
rw.save(history.history, 'nativeLSTMmidi')