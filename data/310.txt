from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import Activation
from keras.layers import TimeDistributed
from keras.layers import Conv1D, MaxPooling1D, Flatten
from keras import metrics
def create_cnn_model(X, y, layers, output_dim, optimizer, dropout=0):
    print('Creating CNN model with layers {}, output_dim {}, optimizer {}, dropout {}'.format(layers,output_dim,optimizer,dropout))
    input_shape = (X.shape[1], X.shape[2])
    output = y.shape[1]
    print('input_shape {}, output {}'.format(input_shape, output))
    regressor = Sequential()
    print('Adding the first Convolution1D layer')
    regressor.add(Conv1D(filters=output_dim,kernel_size=5,input_shape=input_shape,activation='relu'))
    if dropout > 0:
        regressor.add(Dropout(dropout))
    for i in range(layers - 1, 0, -1):
        print('Adding additional Convolution1D layers {}'.format(i))
        regressor.add(Conv1D(filters=output_dim,kernel_size=5,activation='relu'))
        if dropout > 0:
            regressor.add(Dropout(dropout))
    regressor.add(Flatten())
    regressor.add(Dense(units=output))
    activation = 'linear'
    regressor.add(Activation(activation))
    regressor.compile(optimizer=optimizer,metrics=[metrics.mse],loss='mean_squared_error')
    print(regressor.summary())
    return regressor
def create_stateless_lstm_model(X, y, layers, output_dim, optimizer, dropout=0):
    print('Creating stateless model with layers {}, output_dim {}, optimizer {}, dropout {}'.format(layers,output_dim,optimizer,dropout))
    stateful = False
    input_shape = (X.shape[1], X.shape[2])
    output = y.shape[1]
    print('input_shape {}, output {}'.format(input_shape, output))
    regressor = Sequential()
    print('Adding the first LSTM layer')
    return_sequences = False if layers == 1 else True
    regressor.add(input_shape=input_shape,stateful=stateful))dropout > 0:regressor.add(Dropout(dropout))n range(layers - 1, 0, -1):t('Adding additional LSTM layers {}'.format(i))equences = False if i == 1 else Trueregressor.add(
            LSTM(units=output_dim,return_sequences=return_sequences,stateful=stateful))dropout > 0:regressor.add(Dropout(dropout))regressor.add(Dense(units=output))tivation = 'linear'regressor.add(Activation(activation))regressor.compile(
        optimizer=optimizer,
        metrics=[metrics.mse],
        loss='mean_squared_error')print(regressor.summary())eturn regressoreate_stateful_lstm_model(X, y, layers, output_dim, optimizer, dropout=0):ting stateful model with layers {}, output_dim {}, optimizer {}, dropout {}'.format(layers,output_dim,optimizer,dropout))ateful = Trueh_input_shape = (1, X.shape[1], 1)tput = y.shape[1]t('input_shape {}, output {}'.format(batch_input_shape, output))gressor = Sequential()t('Adding the first LSTM layers')turn_sequences = Trueregressor.add(
        batch_input_shape=batch_input_shape,
        stateful=stateful))dropout > 0:regressor.add(Dropout(dropout))n range(layers - 1, 0, -1):t('Adding additional LSTM layers {}'.format(i))regressor.add(LSTM(units=output_dim,
            return_sequences=return_sequences,
