from random import random
from numpy import array
from numpy import cumsum
import numpy as np
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import TimeDistributed
from keras.layers import Bidirectional
from keras.utils import np_utils
from keras.layers import Embedding
from keras.optimizers import SGD
from keras.layers import Conv1D
from keras.layers import MaxPooling1D
import sys
if __name__ == '__main__':
	X = X.astype(int)
	print X.shape
	print "Features extraction done";
	y_init  = np.genfromtxt(sys.argv[2])
	y = np_utils.to_categorical(y_init)
	num_classes = y.shape[1]
	model = Sequential()
	model.add(Embedding(16, 128, input_length=30))
	model.add(LSTM(128))
	model.add(Dropout(0.2))
	model.add(Dense(num_classes, activation='softmax'))
	opt = SGD(lr=0.0001)
	model.compile(loss='categorical_crossentropy', optimizer='nadam', metrics=['accuracy'])
	print model.summary();
	model.fit(X, y,validation_split=0.1, epochs=100, batch_size=32, verbose=1)
	X_test = np.genfromtxt(sys.argv[3], delimiter=',')
	X_test = X_test.astype(int)
	y_test = np.genfromtxt(sys.argv[4]);
	y_test = np_utils.to_categorical(y_test);
	yhat = model.predict(X_test)
	print yhat[0]
	acc = 0.
	count = 0
	for i in range(len(yhat)):
		print('Expected:', np.argmax(y_test[i]), 'Predicted', np.argmax(yhat[i]))
		if (int(np.argmax(y_test[i])) == int(np.argmax(yhat[i]))):
			count+=1
	acc = float(count) / len(yhat)
	print ("Accuracy: ", acc*100, " %")