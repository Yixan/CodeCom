import numpy as np
from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Embedding
from keras.layers import LSTM, SimpleRNN
from keras.datasets import imdb
from keras.utils.vis_utils import plot_model
batch_size = 100
nb_epoch = 1
print 'Loading data...'
(X_train, y_train), (X_test, y_test) = imdb.load_data(nb_words=max_features)
print len(X_train), 'train sequences'
print len(X_test), 'test sequences'
print 'Padding sequences...'
X_train = sequence.pad_sequences(X_train, maxlen=maxlen)
X_test = sequence.pad_sequences(X_test, maxlen=maxlen)
print 'X_train shape:', X_train.shape
print 'X_test shape:', X_test.shape
print 'Building model...'
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
print 'Plotting model...'
plot_model(model, to_file='model.png', show_shapes=True)
print 'Training model...'
model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=nb_epoch,alidation_data=(X_test, y_test))
score, acc = model.evaluate(X_test, y_test,batch_size=batch_size)
print 'Test score:', score
print 'Test accuracy:', acc
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.fit(X_train, y_train, batch_size=batch_size, nb_epoch=nb_epoch,alidation_data=(X_test, y_test))
score, acc = model.evaluate(X_test, y_test,batch_size=batch_size)
print 'Test score:', score
print 'Test accuracy:', acc