import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import LSTM, Bidirectional, Conv1D
from keras.layers import MaxPooling1D, BatchNormalization, AveragePooling1D, GlobalAveragePooling1D
from keras.layers.core import Dense, Activation, Flatten
from keras.optimizers import Adam, RMSprop
from keras.initializers import random_normal
from keras.callbacks import EarlyStopping
from keras import backend as K
from fixed_leakyrelu import LeakyReLU
n_out = 1
variable_num = 33
n_hidden = 32
optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)
def rmse(y_true, y_pred):
    return K.sqrt(K.mean(K.square(y_pred - y_true), axis=-1))
def simpleLSTM(lstm_nodes=n_hidden,lookback=50):
    model = Sequential()
    model.add(LSTM(lstm_nodes, recurrent_dropout=0.4, dropout=0.4, input_shape=(lookback, variable_num)))
    model.add(Dense(n_out, kernel_initializer=random_normal()))
    model.add(Activation('linear'))
    model.summary()
    model.compile(loss='mean_squared_error', optimizer=optimizer)
    return model
def TemporalCNN(cnn_nodes=5,kernel_size =5,lookback=50):
    model = Sequential()
    model.name = "Temporal_CNN"
    model.add(Conv1D(cnn_nodes, kernel_size=kernel_size, kernel_initializer=random_normal(), input_shape=(lookback, variable_num)))
    model.add(MaxPooling1D())
    model.add(Flatten())
    model.add(Dense(n_out, activation='linear'))
    model.summary()
    return model
def BLSTM(lstm_nodes=32,lookback=50):
    model = Sequential()
    model.add(Bidirectional(LSTM(lstm_nodes, recurrent_dropout=0.4, dropout=0.4), input_shape=(lookback, variable_num)))
    model.add(Dense(n_out, kernel_initializer=random_normal()))
    model.add(Activation('linear'))
    model.summary()
    return model
def StackeLSTM(lstm_nodes=32,lookback=50):
    model = Sequential()
    model.add(LSTM(lstm_nodes, return_sequences=True, kernel_initializer=random_normal(),nput_shape=(lookback, variable_num)))
    model.add(LSTM(lstm_nodes, kernel_initializer=random_normal(), recurrent_dropout=0.2, dropout=0.2))
    model.add(Dense(n_out, kernel_initializer=random_normal()))
    model.add(Activation('linear'))
    model.summary()
    return model
def VGG16LIKE(lstm_nodes=32,cnn_nodes=16,base_fc_nodes = 1024,kernel_size=3,lookback=50):
    model = Sequential()
    model.name = "CNN_LSTM"
    model.add(Conv1D(cnn_nodes, kernel_size, kernel_initializer=random_normal(), input_shape=(variable_num, lookback)))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes*2, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes*2, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes*3, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes*3, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(MaxPooling1D(2))
    model.add(Conv1D(cnn_nodes*3,kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes*3, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(Dense(base_fc_nodes))
    model.add(Dense(base_fc_nodes))
    model.add(Dense(int(cnn_nodes/4), activation=LeakyReLU()))
    model.add(Bidirectional(LSTM(lstm_nodes, recurrent_dropout=0.4, dropout=0.4)))
    model.add(Dense(n_out, activation='linear'))
    model.summary()
    return model
def VGG_BLSTM(lstm_nodes=32,cnn_nodes=16,base_fc_nodes = 1024,kernel_size=3,lookback=50):
    model = Sequential()
    model.name = "CNN_LSTM"
    model.add(1D(cnn_nodes, kernel_size, kernel_initializer=random_normal(), input_shape=(variable_num, lookback),activation="relu"))
    model.add(Conv1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal(),activation="relu"))
    model.add(v1D(cnn_nodes, kernel_size, kernel_initializer=random_normal(),activation="relu" ))
    model.add(v1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal(),activation="relu"))
    model.add(v1D(cnn_nodes*2, kernel_size, kernel_initializer=random_normal(),activation="relu" ))
    model.add(v1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal(),activation="relu"))
    model.add(nv1D(cnn_nodes*4, kernel_size, kernel_initializer=random_normal(),activation="relu"))
    model.add(v1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal(),activation="relu"))
    model.add(Dense(base_fc_nodes))
    model.add(Dense(base_fc_nodes))
    model.add(Dense(int(cnn_nodes / 4)))
    Activation("relu")
    model.add(Bidirectional(LSTM(lstm_nodes, recurrent_dropout=0.4, dropout=0.4)))
    model.add(Dense(n_out, activation='linear'))
    model.summary()
    model.compile(loss='mean_squared_error', optimizer=optimizer)
    return model
def VGG_BLSTM_LeakyReLU(lstm_nodes=32,cnn_nodes=16,base_fc_nodes = 1024,kernel_size=3,lookback=50):
    model = Sequential()
    model.name = "CNN_LSTM"
    model.add(1D(cnn_nodes, kernel_size, kernel_initializer=random_normal(), input_shape=(variable_num, lookback)))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(1D(cnn_nodes, kernel_size, kernel_initializer=random_normal(), input_shape=(variable_num, lookback)))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(1D(cnn_nodes*2, kernel_size, kernel_initializer=random_normal(), input_shape=(variable_num, lookback)))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(1D(cnn_nodes*4, kernel_size, kernel_initializer=random_normal(), input_shape=(variable_num, lookback)))
    model.add(Activation(LeakyReLU()))
    model.add(Conv1D(cnn_nodes, kernel_size, padding="same", kernel_initializer=random_normal()))
    model.add(Activation(LeakyReLU()))
    model.add(Dense(base_fc_nodes))
    model.add(Dense(base_fc_nodes))
    model.add(Dense(int(cnn_nodes / 4)))
    model.add(Activation(LeakyReLU()))
    model.add(Bidirectional(LSTM(lstm_nodes, recurrent_dropout=0.4, dropout=0.4)))
    model.add(Dense(n_out, activation='linear'))
    model.summary()
    model.compile(loss='mean_squared_error', optimizer=optimizer)
    return model
if __name__ == "__main__":
    model = VGG_BLSTM()