from keras.models import Sequential
from keras.models import Model
from keras.layers import Input
from keras.layers import LSTM
from keras.layers import Dense
from keras.models import Model
import keras.backend as K
from keras import initializers
from numpy import array
import random
import numpy as np
def fun_1():
    inputs1 = Input(shape=(3, 1))
    lstm1 = LSTM(4, return_sequences=True)(inputs1)
    model = Model(inputs=inputs1, outputs=lstm1)
    data = array([0.1, 0.2, 0.3]).reshape((1,3,1))
    print(model.predict(data))
    pass
def fun_1_ex():
    model = Sequential()
    model.add(LSTM(4, input_shape=(10, 1), return_sequences=True,kernel_initializer=initializers.constant(0.2),recurrent_initializer=initializers.constant(0.3),bias_initializer=initializers.constant(0.1),use_bias=False))
    data = array([0.0, 0.0, 0.1, 0.2, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0]).reshape((1,10,1))
    print(model.predict(data))
    pass
def fun_2():
    inputs1 = Input(shape=(3, 1))
    lstm1, state_h, state_c = LSTM(1, return_state=True)(inputs1)
    model = Model(inputs=inputs1, outputs=[lstm1, state_h, state_c])
    data = array([0.1, 0.2, 0.3]).reshape((1,3,1))
    print(model.predict(data))
    pass
def fun_3():
    inputs1 = Input(shape=(3, 1))
    lstm1, state_h, state_c = LSTM(1, return_sequences=True, return_state=True)(inputs1)
    model = Model(inputs=inputs1, outputs=[lstm1, state_h, state_c])
    data = array([0.1, 0.2, 0.3]).reshape((1,3,1))
    print(model.predict(data))
    pass
def fun_4():
    number_of_dimensions = 4
    number_of_examples = 1
    input_ = Input(shape=(3, 1))
    lstm, hidden, cell = LSTM(units=number_of_dimensions, return_state=True, return_sequences=True)(input_)
    dense = Dense(10, activation='softmax')(lstm)
    model = Model(inputs=input_, outputs=dense)
    with K.get_session() as sess:
        x = np.zeros((number_of_examples, 3, 1))
        cell_state = sess.run(cell, feed_dict={input_: x})
        print(cell_state.shape)
        print(cell_state)
fun_1_ex()
pass