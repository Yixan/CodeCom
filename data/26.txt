import numpy as np
from keras.models import Sequential
from keras.layers.recurrent import SimpleRNN , LSTM
from keras.optimizers import SGD , Adagrad
    LSTM_layers = 1 
    LSTM_units  = 512
    DNN_layers  = 3
    DNN_units   = 512
    question_model = Sequential()
    layer_q1 = LSTM ( LSTM_units , input_shape = (max_seq_length , word_vector) , return_sequences= False )
    question_model.add(layer_q1)
    answer_1_model = Sequential()
    layer_a1 = LSTM ( LSTM_units , input_shape = (max_seq_length , word_vector) , return_sequences= False )
    answer_1_model.add(layer_a1)
    answer_2_model = Sequential()
    layer_a2 = LSTM ( LSTM_units , input_shape = (max_seq_length , word_vector) , return_sequences= False )
    answer_2_model.add(layer_a2)
    answer_3_model = Sequential()
    layer_a3 = LSTM ( LSTM_units , input_shape = (max_seq_length , word_vector) , return_sequences= False )
    answer_3_model.add(layer_a3)
    answer_4_model = Sequential()
    layer_a4 = LSTM ( LSTM_units , input_shape = (max_seq_length , word_vector) , return_sequences= False )
    answer_4_model.add(layer_a4)
    answer_5_model = Sequential()
    layer_a5 = LSTM ( LSTM_units , input_shape = (max_seq_length , word_vector) , return_sequences= False )
    answer_5_model.add(layer_a5)
    image_model = Sequential()
    image_model.add(Reshape(input_shape = (image_vector , ) , dims = (image_vector , ) ))
    model = Sequential()
    model.add(Merge([question_model , answer_1_model , nswer_2_model ,swer_3_model , swer_4_model , er_5_model , image_model], mode='concat', concat_axis=1))
    layer_DNN_1 = Dense(DNN_units , init = 'uniform')
    layer_DNN_1_act = Activation('relu')
    layer_DNN_1_dro = Dropout(p=0.5)
    layer_DNN_2 = Dense(DNN_units , init = 'uniform')
    layer_DNN_2_act = Activation('relu')
    layer_DNN_2_dro = Dropout(p=0.5)
    layer_DNN_3     = Dense(DNN_units , init = 'uniform')
    layer_DNN_3_act = Activation('relu')
    layer_DNN_3_dro = Dropout(p=0.5)
    layer_out     = Dense(5)
    layer_softmax = Activation('softmax')
    model.add(layer_DNN_1)
    model.add(layer_DNN_1_act)
    model.add(layer_DNN_1_dro)
    model.add(layer_DNN_2)
    model.add(layer_DNN_2_act)
    model.add(layer_DNN_2_dro)
    model.add(layer_DNN_3)
    model.add(layer_DNN_3_act)
    model.add(layer_DNN_3_dro)
    model.add(layer_out)
    model.add(layer_softmax)
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')
    return model
