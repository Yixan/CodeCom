from datasets import Datasets
import numpy as np
from keras.layers.core import Dense, Merge, Dropout
from keras.layers import recurrent
from keras.models import Sequential
from keras.preprocessing.sequence import pad_sequences
class Fit:
    def __init__(self,model=recurrent.LSTM,w2v_dim=50,sent_hidden_size=500,dropout=None,query_hidden_size=100,batch_size=16,ochs=10, vocab_size=None, rs=False,ent_hidden_size2=200, query_hidden_size2=50,two_hidden_layers=False):
        self.W2V_DIM = w2v_dim
        self.SENT_HIDDEN_SIZE = sent_hidden_size
        self.QUERY_HIDDEN_SIZE = query_hidden_size
        self.BATCH_SIZE = batch_size
        self.EPOCHS = epochs
        self.vocab_size = vocab_size
        self.SENT_HIDDEN_SIZE2 = sent_hidden_size2
        self.QUERY_HIDDEN_SIZE2 = query_hidden_size2
        self.two_hidden_layers = two_hidden_layers
        self.rs = rs
        self.dropout = dropout
        self.X = None
        self.Xq = None
        self.Y = None
        self.answers = None
    def compile_layers(self):
            print('Build model...')
            RNN = self.model
            sentrnn = Sequential()
            sentrnn.add(RNN(self.W2V_DIM,self.SENT_HIDDEN_SIZE,return_sequences=True))
            sentrnn.add(Dense(self.SENT_HIDDEN_SIZE,self.SENT_HIDDEN_SIZE2,activation='relu'))
            qrnn = Sequential()
            qrnn.add(RNN(self.W2V_DIM, self.QUERY_HIDDEN_SIZE, return_sequences=True))
            qrnn.add(RNN(self.QUERY_HIDDEN_SIZE, self.QUERY_HIDDEN_SIZE2, return_sequences = False))
            model = Sequential()
            model.add(Merge([sentrnn, qrnn], mode='concat'))
            model.add(Dense(self.SENT_HIDDEN_SIZE2 + self.QUERY_HIDDEN_SIZE2, self.vocab_size, activation='softmax'))
            model.compile(optimizer='adam', loss='categorical_crossentropy', class_mode='categorical')
            self.model = model
        else:
            print('Build model...')
            RNN = self.model
            sentrnn = Sequential()
            sentrnn.add(RNN(self.W2V_DIM, self.SENT_HIDDEN_SIZE, return_sequences=self.rs))
            if self.dropout:
                sentrnn.add(Dropout(self.dropout))
            qrnn = Sequential()
            qrnn.add(RNN(self.W2V_DIM, self.QUERY_HIDDEN_SIZE, return_sequences=self.rs))
            model = Sequential()
            model.add(Merge([sentrnn, qrnn], mode='concat'))
            model.add(Dense(self.SENT_HIDDEN_SIZE + self.QUERY_HIDDEN_SIZE, self.vocab_size, activation='softmax'))
            model.compile(optimizer='adam', loss='categorical_crossentropy', class_mode='categorical')
            self.model = model
    def run(self, X, Xq, Y):
        self.X = X
        self.Xq = Xq
        self.Y = Y
        self.model.fit([X, Xq], Y, batch_size=self.BATCH_SIZE, nb_epoch=self.EPOCHS, show_accuracy=True, validation_split = 0.1)
    def score(self,tX, tXq, tY):
        print('Test loss / test accuracy = {:.4f} / {:.4f}'.format(loss, acc))
        return acc
if __name__ == "__main__":
    pass