from keras.models import Sequential
from keras.layers import LSTM, Dense
from keras.optimizers import SGD
from keras.layers.wrappers import TimeDistributed
import numpy as np
import openWav
def train(x_train, y_train, x_test, y_test):
    timesteps = 10
    data_dim = len(x_train[0])
    batchsize = 10    
    num_hidden_dimensions = data_dim/2
    num_frequency_dimensions = data_dim
    print(num_hidden_dimensions)
    print(num_frequency_dimensions)
    model = Sequential()
    model.add(TimeDistributed(Dense(num_hidden_dimensions), input_shape=(None, num_frequency_dimensions)))
    model.add(LSTM(num_hidden_dimensions, return_sequences=True, stateful=False))
    model.add(TimeDistributed(Dense(input_dim=num_hidden_dimensions, output_dim=num_frequency_dimensions)))
    model.compile(loss='mean_squared_error', optimizer='rmsprop')
    model.summary()
    exit
    model.fit(x_train, y_train, batch_size=10, nb_epoch=5, verbose=1, validation_split=0.0)
    model.save_weights("weights_RNN.dat", True)
    return model
def predict():
    model = Sequential()
    model.load_weights("weights_RNN.dat")
    return model
x_train, y_train, x_test, y_test, sr = openWav.lstmData()
model = train(x_train, y_train, x_test, y_test)    