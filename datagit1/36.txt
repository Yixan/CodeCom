from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
import os
os.chdir('/Users/priyankadwivedi')
pickle_file = 'notMNIST.pickle'
with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)
import matplotlib
import matplotlib.pyplot as plt
n = 1000
image_array = train_dataset[n]
image_array.shape
plt.imshow(image_array, cmap='Greys', interpolation='None')
print(train_labels[n])
print(train_labels.shape)
image_size = 28
num_labels = 10


def reformat(dataset, labels):
    dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
    labels = (np.arange(num_labels) == labels[:, (None)]).astype(np.float32)
    return dataset, labels


train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


def accuracy(predictions, labels):
    return 100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1)) / predictions.shape[0]


batch_size = 128
n_hidden_1 = 512
n_hidden_2 = 512
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    def multilayer_perceptron(x, weights, biases):
        layer_1 = tf.matmul(x, weights['h1']) + biases['b1']
        layer_1 = tf.nn.relu(layer_1)
        layer_2 = tf.matmul(layer_1, weights['h2']) + biases['b2']
        layer_2 = tf.nn.sigmoid(layer_2)
        out_layer = tf.matmul(layer_2, weights['out']) + biases['out']
        return out_layer
    weights = {'h1': tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_1])), 'h2': tf.Variable(tf.truncated_normal([n_hidden_1, n_hidden_2])), 'out': tf.Variable(tf.truncated_normal([n_hidden_2, num_labels]))}
    biases = {'b1': tf.Variable(tf.truncated_normal([n_hidden_1])), 'b2': tf.Variable(tf.truncated_normal([n_hidden_2])), 'out': tf.Variable(tf.truncated_normal([num_labels]))}
    logits = multilayer_perceptron(tf_train_dataset, weights, biases)
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regularizers = tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(biases['b1']) + tf.nn.l2_loss(weights['h2']) + tf.nn.l2_loss(biases['b2']) + tf.nn.l2_loss(weights['out']) + tf.nn.l2_loss(biases['out'])
    factor = 0.0005
    loss += factor * regularizers
    global_step = tf.Variable(0, trainable=False)
    starter_learning_rate = 0.5
    learning_rate = tf.train.exponential_decay(starter_learning_rate, global_step, 3500, 0.86, staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(multilayer_perceptron(tf_valid_dataset, weights, biases))
    test_prediction = tf.nn.softmax(multilayer_perceptron(tf_test_dataset, weights, biases))
num_steps = 20001
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        offset = step * batch_size % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:offset + batch_size, :]
        batch_labels = train_labels[offset:offset + batch_size, :]
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if step % 1000 == 0:
            print('Minibatch loss at step %d: %f' % (step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
