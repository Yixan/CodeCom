#Code based off Deep Learning Course (https://classroom.udacity.com/courses/ud730)


# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


pickle_file = 'notMNIST.pickle'


with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)
  




image_size = 28
num_labels = 10


def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)




def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])




#Problem 1: Logistic regression(using SGD) with L2


batch_size = 128


for lamba in np.arange(0,0.1,0.01):
graph = tf.Graph()
with graph.as_default():


  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)) + lamba*tf.nn.l2_loss(weights)
  
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)
 
num_steps = 3001


with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Lambda value:", lamba)
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))




## L2 on Neutral Network


batch_size = 128
node_num = 1024


for lamba in [0.1]: #np.arange(0,0.1,0.01):
    graph = tf.Graph()
    with graph.as_default():
    
      # Input data. For the training data, we use a placeholder that will be fed
      # at run time with a training minibatch.
      tf_train_dataset = tf.placeholder(tf.float32,
                                        shape=(batch_size, image_size * image_size))
      tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
      tf_valid_dataset = tf.constant(valid_dataset)
      tf_test_dataset = tf.constant(test_dataset)
      
      # Variables.
      weights_1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, node_num]))
      biases_1 = tf.Variable(tf.zeros([node_num]))
      
      weights_2 = tf.Variable(
        tf.truncated_normal([node_num, num_labels]))
      biases_2 = tf.Variable(tf.zeros([num_labels]))
      
      # Training computation.
      logits1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
      logits2 = tf.matmul(tf.nn.relu(logits1), weights_2) + biases_2
      #L2 loss applying to both weight terms
      loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits2)) + lamba*tf.nn.l2_loss(weights_1) +lamba*tf.nn.l2_loss(weights_2)
      
      # Optimizer.
      optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
      
      # Predictions for the training, validation, and test data.
      train_prediction = tf.nn.softmax(logits2)
      valid_prediction = tf.nn.softmax(
          tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset,weights_1) + biases_1),weights_2) + biases_2)
      test_prediction = tf.nn.softmax(
          tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset,weights_1) + biases_1),weights_2) + biases_2)
    
    num_steps = 3001
    
    with tf.Session(graph=graph) as session:
      tf.global_variables_initializer().run()
      print("Initialized")
      for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        #if (step % 500 == 0):
        #  print("Minibatch loss at step %d: %f" % (step, l))
        #  print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
        #  print("Validation accuracy: %.1f%%" % accuracy(
        #    valid_prediction.eval(), valid_labels))
      print("Lambda value:", lamba)
      print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
    


#Problem 2: Restrict data to a few batches and demonstrate overfitting


batch_size = 10 


graph = tf.Graph()


with graph.as_default():
    
    #Placeholders for training dataset and labels


    tf_train_dataset = tf.placeholder(tf.float32, shape = (batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape = (batch_size,num_labels))
    tf_test_dataset = tf.constant(test_dataset, dtype=tf.float32)
    tf_test_dataset = tf.constant(test_dataset, dtype=tf.float32)
    
    #Weight and biases
    
    Weight = tf.Variable(tf.random_normal([image_size * image_size, num_labels]), dtype=tf.float32)
    Bias = tf.Variable(tf.zeros([num_labels]))
    
    #Linear Equation
    logit = tf.matmul(tf_train_dataset,Weight) + Bias
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logit, labels=tf_train_labels))
    optimiser = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    #Convert logit output into predictions
    tf_train_predictions = tf.nn.softmax(logit)
    tf_test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset,Weight) + Bias)


   


with tf.Session(graph=graph) as sess:
    
    init = tf.global_variables_initializer()
    
    sess.run(init)
    
    feed_dict = {tf_train_dataset : train_dataset[:batch_size,:], tf_train_labels : train_labels[0:batch_size,:]}
    
    for step in range(num_steps):
        
        _,l,predictions = sess.run([optimiser,loss,tf_train_predictions],feed_dict = feed_dict)
        
        
        if step % 1000 == 0:
            
            print("Training Accuracy: " , accuracy(predictions=predictions, labels=train_labels[0:batch_size]),"%")
        


    print("Test Accuracy: ",accuracy(predictions=tf_test_prediction.eval(), labels=test_labels),"%")






#Problem 3: introducing drop out


## L2 on Neutral Network


batch_size = 128
node_num = 1024




graph = tf.Graph()
with graph.as_default():


  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights_1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, node_num]))
  biases_1 = tf.Variable(tf.zeros([node_num]))
  
  weights_2 = tf.Variable(
    tf.truncated_normal([node_num, num_labels]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))
  
  ##Keep Prob placeholder
  keep_prob = tf.placeholder(tf.float32) 
  
  # Training computation.
  logits1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
  logits2 = tf.matmul(tf.nn.dropout(tf.nn.relu(logits1),keep_prob=keep_prob), weights_2) + biases_2
  #L2 loss applying to both weight terms
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits2)) + 0.01*tf.nn.l2_loss(weights_1) +lamba*tf.nn.l2_loss(weights_2)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits2)
  valid_prediction = tf.nn.softmax(
      tf.matmul(tf.nn.dropout(tf.nn.relu(tf.matmul(tf_valid_dataset,weights_1) + biases_1), 1), weights_2) + biases_2)
  test_prediction = tf.nn.softmax(
      tf.matmul(tf.nn.dropout(tf.nn.relu(tf.matmul(tf_test_dataset,weights_1) + biases_1), 1), weights_2) + biases_2)


num_steps = 3001


with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.5}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Lambda value:", lamba)
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))




#Applying Dropout to overfitted example (To DO) (Cos you have to you the hidden layer version - go back to do problem 2)

