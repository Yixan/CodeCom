import tensorflow as tf
from mnist import MNIST
import numpy as np
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'




mn = MNIST('samples')
x, yy = mn.load_training()
x = x[: 5000]
yy = yy[: 5000]


x = np.asarray(x, dtype = np.float32)
y = []
for i in yy:
	temp = [0.0 for ii in xrange(10)]
	temp[i] = 1.0
	y.append(temp)
Y = tf.placeholder(tf.float32)
keep = tf.placeholder(tf.float32)
input = tf.placeholder(tf.float32)
w1 = tf.Variable(tf.random_normal(shape = (784, 500)))
b1 = tf.Variable(tf.random_normal(shape = (1, 500)))
w2 = tf.Variable(tf.random_normal(shape = (500, 500)))
b2 = tf.Variable(tf.random_normal(shape = (1, 500)))
w3 = tf.Variable(tf.random_normal(shape = (500, 500)))
b3 = tf.Variable(tf.random_normal(shape = (1, 500)))
l1 = tf.nn.relu(tf.add(tf.matmul(input, w1), b1))
l2bd = tf.nn.relu(tf.add(tf.matmul(l1, w2), b2))
l2 = tf.nn.dropout(l2bd, keep)
l3 = tf.nn.relu(tf.add(tf.matmul(l2, w3), b3))
w4 = tf.Variable(tf.random_normal(shape = (500, 10)))
b4 = tf.Variable(tf.random_normal(shape = (1, 10)))
output = tf.add(tf.matmul(l3, w4), b4)
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels = Y, logits = output))
train = tf.train.AdamOptimizer().minimize(cost)
session = tf.Session()
session.run(tf.global_variables_initializer())
tx, ty = mn.load_testing()[ : 1000]
pY = tf.placeholder(tf.int64)
correct = tf.cast(tf.equal(pY, tf.argmax(output, axis = 1)), dtype = tf.float32)
accuracy = tf.reduce_mean(correct)
epochs = 50
batch_size = 128


for i in xrange(epochs):
	for j in xrange(len(x) / batch_size):
		ss = j * batch_size
		mbx = x[ss : ss + batch_size]
		mby = y[ss : ss + batch_size]
		session.run(train, feed_dict = {input : mbx, Y : mby, keep : 0.6})
	print 'epoch: ',
	print i,
	print 'cost: ',
	print session.run(cost, feed_dict = {input : x, Y : y, keep : 1.0}),
	print 'test set accuracy: ',
	print session.run(accuracy, feed_dict = {input : tx, pY : ty, keep : 1.0})


print session.run(accuracy, feed_dict = {input : x, pY : yy, keep : 1.0})
print session.run(accuracy, feed_dict = {input : tx, pY : ty, keep : 1.0})