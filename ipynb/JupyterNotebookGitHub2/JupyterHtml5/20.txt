
In [2]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [3]:

    
pickle_file = '/Users/mcloney/Downloads/tensorflow/notMNIST.pickle'

with open(pickle_file, 'rb') as f:
    save = pickle.load(f, encoding='latin1')
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save  # hint to help gc free up memory
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [5]:

    
def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1)) / predictions.shape[0])


    



In [ ]:

    
batch_size = 128
hidden_nodes = 1024

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    
    hidden_layer_weights = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
    hidden_layer_biases = tf.Variable(tf.zeros([hidden_nodes]))
    
    out_weights = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
    out_biases = tf.Variable(tf.zeros([num_labels]))
    # https://www.tensorflow.org/api_docs/python/tf/nn/relu_layer
    # Computes Relu(x * weight + biases), where:
        # x: a 2D tensor. Dimensions typically: batch, in_units
        # weights: a 2D tensor. Dimensions typically: in_units, out_units
        # biases: a 1D tensor. Dimensions: out_units
        # name: A name for the operation (optional). If not specified "nn_relu_layer" is used.
        
    small_constant = 0.001
    learn_rate = 0.5
    
    relu_output = tf.nn.relu_layer(
        tf_train_dataset, hidden_layer_weights, hidden_layer_biases, name="relu_output")
    
    # Training computation.
    logits = tf.matmul(relu_output, out_weights) + out_biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)) \
    + tf.nn.l2_loss(hidden_layer_weights) * small_constant \
    + tf.nn.l2_loss(hidden_layer_biases) * small_constant \
    + tf.nn.l2_loss(out_weights) * small_constant \
    + tf.nn.l2_loss(out_biases) * small_constant
    
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(learn_rate).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu_layer(
        tf_valid_dataset, hidden_layer_weights, hidden_layer_biases, name="valid_output"), out_weights) + out_biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu_layer(
        tf_test_dataset, hidden_layer_weights, hidden_layer_biases, name="test_output"), out_weights) + out_biases)


    



In [ ]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))

    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
num_steps = 10

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 1 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))

    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [6]:

    
batch_size = 128
hidden_nodes = 1024

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    
    hidden_layer_weights = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
    hidden_layer_biases = tf.Variable(tf.zeros([hidden_nodes]))
    
    out_weights = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
    out_biases = tf.Variable(tf.zeros([num_labels]))
    # https://www.tensorflow.org/api_docs/python/tf/nn/relu_layer
    # Computes Relu(x * weight + biases), where:
        # x: a 2D tensor. Dimensions typically: batch, in_units
        # weights: a 2D tensor. Dimensions typically: in_units, out_units
        # biases: a 1D tensor. Dimensions: out_units
        # name: A name for the operation (optional). If not specified "nn_relu_layer" is used.
        
    small_constant = 0.001
    learn_rate = 0.5
    
    relu_output = tf.nn.relu_layer(
        tf_train_dataset, hidden_layer_weights, hidden_layer_biases, name="relu_output")
    
    # introduce dropout on the hidden layer
    dropped_out = tf.nn.dropout(x=relu_output, keep_prob=0.8)
    
    # Training computation.
     #logits = tf.matmul(relu_output, out_weights) + out_biases
    logits = tf.matmul(dropped_out, out_weights) + out_biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)) \
    + tf.nn.l2_loss(hidden_layer_weights) * small_constant \
    + tf.nn.l2_loss(hidden_layer_biases) * small_constant \
    + tf.nn.l2_loss(out_weights) * small_constant \
    + tf.nn.l2_loss(out_biases) * small_constant
    
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(learn_rate).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu_layer(
        tf_valid_dataset, hidden_layer_weights, hidden_layer_biases, name="valid_output"), out_weights) + out_biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu_layer(
        tf_test_dataset, hidden_layer_weights, hidden_layer_biases, name="test_output"), out_weights) + out_biases)


    



In [7]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 100 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))

    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    

