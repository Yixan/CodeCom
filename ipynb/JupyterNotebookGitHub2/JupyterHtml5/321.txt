
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
# With gradient descent training, even this much data is prohibitive.
# Subset the training data for faster turnaround.
train_subset = 10000

# Regularization coefficient l2_lambda
l2_lambda = 0.1

graph = tf.Graph()
with graph.as_default():
    # Set random seed
    tf.set_random_seed(1)
    # Input data.
    # Load the training, validation and test data into constants that are
    # attached to the graph.
    tf_train_dataset = tf.constant(train_dataset[:train_subset, :])
    tf_train_labels = tf.constant(train_labels[:train_subset])
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    # These are the parameters that we are going to be training. The weight
    # matrix will be initialized using random values following a (truncated)
    # normal distribution. The biases get initialized to zero.
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
  
    # Training computation.
    # We multiply the inputs with the weight matrix, and add biases. We compute
    # the softmax and cross-entropy (it's one operation in TensorFlow, because
    # it's very common, and it can be optimized). We take the average of this
    # cross-entropy across all training examples: that's our loss.
    # Add a new l2 regularization term - do not regularize the biases
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)) \
            + l2_lambda * tf.nn.l2_loss(weights)
  
    # Optimizer.
    # We are going to find the minimum of this loss using gradient descent.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    # These are not part of training, but merely here so that we can report
    # accuracy figures as we train.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [7]:

    
%%time

num_steps = 801

def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])

with tf.Session(graph=graph) as session:
  # This is a one-time operation which ensures the parameters get initialized as
  # we described in the graph: random weights for the matrix, zeros for the
  # biases. 
  tf.global_variables_initializer().run()
  print('Initialized')
  for step in range(num_steps):
    # Run the computations. We tell .run() that we want to run the optimizer,
    # and get the loss value and the training predictions returned as numpy
    # arrays.
    _, l, predictions = session.run([optimizer, loss, train_prediction])
    if (step % 100 == 0):
      print('Loss at step %d: %f' % (step, l))
      print('Training accuracy: %.1f%%' % accuracy(
        predictions, train_labels[:train_subset, :]))
      # Calling .eval() on valid_prediction is basically like calling run(), but
      # just to get that one numpy array. Note that it recomputes all its graph
      # dependencies.
      print('Validation accuracy: %.1f%%' % accuracy(
        valid_prediction.eval(), valid_labels))
  print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [8]:

    
batch_size = 128

l2_lambda = 0.1

graph = tf.Graph()
with graph.as_default():
    # Set random seed
    tf.set_random_seed(1)
  
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
  
    # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)) \
        + l2_lambda * tf.nn.l2_loss(weights)
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [9]:

    
%%time

num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [10]:

    
num_nodes = 1024
batch_size = 128
l2_lambda = 0.0025

graph = tf.Graph()
with graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    """VARIABLES"""
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes]))
    biases_1 = tf.Variable(tf.zeros([num_nodes]))
    
    weights_2 = tf.Variable(tf.truncated_normal([num_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    # Do not regularize biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_2, labels=tf_train_labels)) \
            + l2_lambda * tf.nn.l2_loss(weights_1) \
            + l2_lambda * tf.nn.l2_loss(weights_2)
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_2)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    valid_prediction = tf.nn.softmax(logits_2)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    test_prediction = tf.nn.softmax(logits_2)


    



In [11]:

    
%%time

num_steps = 3001
print('Regularization L2 term is : ' + str(l2_lambda))

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare minibatch dict
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [12]:

    
num_nodes = 1024
batch_size = 128

graph = tf.Graph()
with graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    """VARIABLES"""
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes]))
    biases_1 = tf.Variable(tf.zeros([num_nodes]))
    
    weights_2 = tf.Variable(tf.truncated_normal([num_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    # Regularization has been removed
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_2, labels=tf_train_labels))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_2)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    valid_prediction = tf.nn.softmax(logits_2)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    test_prediction = tf.nn.softmax(logits_2)


    



In [13]:

    
%%time

num_steps = 3001
num_batches = 5

print('Number of batches is: ' + str(num_batches))

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = step%num_batches
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare minibatch dict
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [14]:

    
num_nodes = 1024
batch_size = 128

graph = tf.Graph()
with graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    """VARIABLES"""
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes]))
    biases_1 = tf.Variable(tf.zeros([num_nodes]))
    
    weights_2 = tf.Variable(tf.truncated_normal([num_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    
    # Dropout regularization for half of the nodes
    drop_nodes = tf.nn.dropout(relu_layer, 0.5)
    
    logits_2 = tf.matmul(drop_nodes, weights_2) + biases_2
    
    # Regularization has been removed
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_2, labels=tf_train_labels))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_2)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    valid_prediction = tf.nn.softmax(logits_2)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(relu_layer, weights_2) + biases_2
    
    test_prediction = tf.nn.softmax(logits_2)


    



In [15]:

    
%%time

num_steps = 3001
num_batches = 5

print('Number of batches is: ' + str(num_batches))

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = step%num_batches
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare minibatch dict
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [16]:

    
nodes_layer_1 = 1024
nodes_layer_2 = 512
batch_size = 128
l2_lambda = 0.0025
alpha = 0.0025

nn_graph = tf.Graph()
with nn_graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels  = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset  = tf.constant(test_dataset)
    
    """VARIABLES"""
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, nodes_layer_1]))
    biases_1  = tf.Variable(tf.zeros([nodes_layer_1]))
    
    weights_2 = tf.Variable(tf.truncated_normal([nodes_layer_1, nodes_layer_2]))
    biases_2  = tf.Variable(tf.zeros([nodes_layer_2]))
    
    weights_3 = tf.Variable(tf.truncated_normal([nodes_layer_2, num_labels]))
    biases_3  = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
    
    
    # Do not regularize biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_3, labels=tf_train_labels)) \
            + l2_lambda * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2) + tf.nn.l2_loss(weights_3))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(alpha).minimize(loss)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_3)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    valid_prediction = tf.nn.softmax(logits_3)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    test_prediction = tf.nn.softmax(logits_3)


    



In [17]:

    
%%time

num_steps = 3001

print('Regularization L2 term is : ' + str(l2_lambda))

with tf.Session(graph=nn_graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        # Prepare minibatch dict
        minibatch_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=minibatch_dict)
        
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [18]:

    
nodes_layer_1 = 1024
nodes_layer_2 = 512
batch_size = 128
alpha = 0.0025

nn_graph = tf.Graph()
with nn_graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels  = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset  = tf.constant(test_dataset)
    
    """VARIABLES"""
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, nodes_layer_1]))
    biases_1  = tf.Variable(tf.zeros([nodes_layer_1]))
    
    weights_2 = tf.Variable(tf.truncated_normal([nodes_layer_1, nodes_layer_2]))
    biases_2  = tf.Variable(tf.zeros([nodes_layer_2]))
    
    weights_3 = tf.Variable(tf.truncated_normal([nodes_layer_2, num_labels]))
    biases_3  = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    # Dropout regularization for half of the nodes
    drop_nodes_1 = tf.nn.dropout(relu_layer_1, 0.5)
    
    logits_2 = tf.matmul(drop_nodes_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    drop_nodes_2 = tf.nn.dropout(relu_layer_2, 0.5)
    
    logits_3 = tf.matmul(drop_nodes_2, weights_3) + biases_3
    
    
    # Do not regularize biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_3, labels=tf_train_labels))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(alpha).minimize(loss)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_3)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    valid_prediction = tf.nn.softmax(logits_3)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    test_prediction = tf.nn.softmax(logits_3)


    



In [19]:

    
%%time

num_steps = 3001

print('With dropout regularization')

with tf.Session(graph=nn_graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        # Prepare minibatch dict
        minibatch_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=minibatch_dict)
        
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [20]:

    
nodes_layer_1 = 1024
nodes_layer_2 = 512
batch_size = 128
alpha = 0.05

nn_graph = tf.Graph()
with nn_graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels  = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset  = tf.constant(test_dataset)
    
    """VARIABLES"""
    weights_1 = tf.get_variable("weights_1", shape=[image_size * image_size, nodes_layer_1], initializer=tf.contrib.layers.xavier_initializer())
    biases_1  = tf.Variable(tf.zeros([nodes_layer_1]))
    
    weights_2 = tf.get_variable("weights_2", shape=[nodes_layer_1, nodes_layer_2], initializer=tf.contrib.layers.xavier_initializer())
    biases_2  = tf.Variable(tf.zeros([nodes_layer_2]))
    
    weights_3 = tf.get_variable("weights_3", shape=[nodes_layer_2, num_labels], initializer=tf.contrib.layers.xavier_initializer())
    biases_3  = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    # Dropout regularization for half of the nodes
    drop_nodes_1 = tf.nn.dropout(relu_layer_1, 0.5)
    
    logits_2 = tf.matmul(drop_nodes_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    drop_nodes_2 = tf.nn.dropout(relu_layer_2, 0.5)
    
    logits_3 = tf.matmul(drop_nodes_2, weights_3) + biases_3
    
    
    # Do not regularize biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_3, labels=tf_train_labels))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(alpha).minimize(loss)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_3)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    valid_prediction = tf.nn.softmax(logits_3)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    test_prediction = tf.nn.softmax(logits_3)


    



In [21]:

    
%%time

num_steps = 3001

print('With dropout regularization')

with tf.Session(graph=nn_graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        # Prepare minibatch dict
        minibatch_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=minibatch_dict)
        
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [22]:

    
nodes_layer_1 = 1024
nodes_layer_2 = 512
batch_size = 128
alpha = 0.08

nn_graph = tf.Graph()
with nn_graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels  = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset  = tf.constant(test_dataset)
    
    """VARIABLES"""
    weights_1 = tf.get_variable("weights_1", shape=[image_size * image_size, nodes_layer_1], initializer=tf.contrib.layers.xavier_initializer())
    biases_1  = tf.Variable(tf.zeros([nodes_layer_1]))
    
    weights_2 = tf.get_variable("weights_2", shape=[nodes_layer_1, nodes_layer_2], initializer=tf.contrib.layers.xavier_initializer())
    biases_2  = tf.Variable(tf.zeros([nodes_layer_2]))
    
    weights_3 = tf.get_variable("weights_3", shape=[nodes_layer_2, num_labels], initializer=tf.contrib.layers.xavier_initializer())
    biases_3  = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    # Dropout regularization for half of the nodes
    drop_nodes_1 = tf.nn.dropout(relu_layer_1, 0.5)
    
    logits_2 = tf.matmul(drop_nodes_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    drop_nodes_2 = tf.nn.dropout(relu_layer_2, 0.5)
    
    logits_3 = tf.matmul(drop_nodes_2, weights_3) + biases_3
    
    
    # Do not regularize biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_3, labels=tf_train_labels))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(alpha).minimize(loss)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_3)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    valid_prediction = tf.nn.softmax(logits_3)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    test_prediction = tf.nn.softmax(logits_3)


    



In [23]:

    
%%time

num_steps = 3001

print('With dropout regularization')

with tf.Session(graph=nn_graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        # Prepare minibatch dict
        minibatch_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=minibatch_dict)
        
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [24]:

    
nodes_layer_1 = 1024
nodes_layer_2 = 512
batch_size = 128
alpha = 0.12

nn_graph = tf.Graph()
with nn_graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels  = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset  = tf.constant(test_dataset)
    
    """VARIABLES"""
    # Needed to decay the learning rate
    global_step = tf.Variable(0, trainable=False)
    learning_rate = tf.train.exponential_decay(alpha, global_step, 100, 0.95, staircase=True)
    
    weights_1 = tf.get_variable("weights_1", shape=[image_size * image_size, nodes_layer_1], initializer=tf.contrib.layers.xavier_initializer())
    biases_1  = tf.Variable(tf.zeros([nodes_layer_1]))
    
    weights_2 = tf.get_variable("weights_2", shape=[nodes_layer_1, nodes_layer_2], initializer=tf.contrib.layers.xavier_initializer())
    biases_2  = tf.Variable(tf.zeros([nodes_layer_2]))
    
    weights_3 = tf.get_variable("weights_3", shape=[nodes_layer_2, num_labels], initializer=tf.contrib.layers.xavier_initializer())
    biases_3  = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    # Dropout regularization for half of the nodes
    drop_nodes_1 = tf.nn.dropout(relu_layer_1, 0.5)
    
    logits_2 = tf.matmul(drop_nodes_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    drop_nodes_2 = tf.nn.dropout(relu_layer_2, 0.5)
    
    logits_3 = tf.matmul(drop_nodes_2, weights_3) + biases_3
    
    
    # Do not regularize biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_3, labels=tf_train_labels))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_3)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    valid_prediction = tf.nn.softmax(logits_3)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    test_prediction = tf.nn.softmax(logits_3)


    



In [25]:

    
%%time

num_steps = 3001

print('With dropout regularization')

with tf.Session(graph=nn_graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        # Prepare minibatch dict
        minibatch_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=minibatch_dict)
        
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy: {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [26]:

    
nodes_layer_1 = 2048
nodes_layer_2 = 1024
batch_size = 128
alpha = 0.16

nn_graph = tf.Graph()
with nn_graph.as_default():
    
    """RANDOM SEED"""
    tf.set_random_seed(1)
    
    """DATA"""
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels  = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset  = tf.constant(test_dataset)
    
    """VARIABLES"""
    # Needed to decay the learning rate
    global_step   = tf.Variable(0, trainable=False)
    learning_rate = tf.train.exponential_decay(alpha, global_step, 100, 0.95, staircase=True)
    
    weights_1 = tf.get_variable("weights_1", shape=[image_size * image_size, nodes_layer_1], initializer=tf.contrib.layers.xavier_initializer())
    biases_1  = tf.Variable(tf.zeros([nodes_layer_1]))
    
    weights_2 = tf.get_variable("weights_2", shape=[nodes_layer_1, nodes_layer_2], initializer=tf.contrib.layers.xavier_initializer())
    biases_2  = tf.Variable(tf.zeros([nodes_layer_2]))
    
    weights_3 = tf.get_variable("weights_3", shape=[nodes_layer_2, num_labels], initializer=tf.contrib.layers.xavier_initializer())
    biases_3  = tf.Variable(tf.zeros([num_labels]))
    
    """COMPUTE TRAINING"""
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    # Dropout regularization for half of the nodes
    drop_nodes_1 = tf.nn.dropout(relu_layer_1, 0.5)
    
    logits_2 = tf.matmul(drop_nodes_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    drop_nodes_2 = tf.nn.dropout(relu_layer_2, 0.5)
    
    logits_3 = tf.matmul(drop_nodes_2, weights_3) + biases_3
    
    
    # Do not regularize biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits_3, labels=tf_train_labels))
    
    """OPTIMIZER"""
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    
    """PREDICTIONS"""
    # Train prediction
    train_prediction = tf.nn.softmax(logits_3)
    
    # Valid prediction
    logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    valid_prediction = tf.nn.softmax(logits_3)
    
    # Test prediction
    logits_1 = tf.matmul(tf_test_dataset, weights_1) + biases_1
    relu_layer_1 = tf.nn.relu(logits_1)
    
    logits_2 = tf.matmul(relu_layer_1, weights_2) + biases_2
    relu_layer_2 = tf.nn.relu(logits_2)
    
    logits_3 = tf.matmul(relu_layer_2, weights_3) + biases_3
       
    test_prediction = tf.nn.softmax(logits_3)


    



In [27]:

    
%%time

num_steps = 3001

print('Training with dropout regularization')
print('Nodes of size: ' + str(nodes_layer_1) + ' and ' + str(nodes_layer_2))
print('Initial learning rate alpha: ' + str(alpha))

with tf.Session(graph=nn_graph) as session:
    tf.global_variables_initializer().run()
    print('Initialized')
    for step in range(num_steps):
        # Choose random offset in data
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        # Prepare minibatch dict
        minibatch_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=minibatch_dict)
        
        if (step%500 == 0):
            print('Minibatch loss at step {}: {}'.format(step, l))
            print('Minibatch accuracy:  {:.1f}'.format(accuracy(predictions, batch_labels)))
            print('Validation accuracy: {:.1f}'.format(accuracy(valid_prediction.eval(), valid_labels)))
            print('Learning rate now: ' + str(learning_rate.eval()))
    print('Test accuracy: {:.1f}'.format(accuracy(test_prediction.eval(), test_labels)))


    



In [ ]:

    
 


    

