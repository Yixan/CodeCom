
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=tf_train_labels)) \
        + 0.05*tf.nn.l2_loss(weights) + 0.05*tf.nn.l2_loss(biases)

  global_step = tf.Variable(0)

  learning_rate = tf.train.exponential_decay(
    0.05,                
    global_step * batch_size,
    train_dataset.shape[0],
    0.95)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    randperm = np.random.permutation(train_dataset.shape[0])
    # Generate a minibatch.
    batch_data = train_dataset[randperm[:batch_size], :]
    batch_labels = train_labels[randperm[:batch_size], :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}

    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)

    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Learning rate: %f" % learning_rate.eval())
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 200
h = 1024

graph = tf.Graph()
with graph.as_default():
  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  w1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, h]))
  b1 = tf.Variable(tf.zeros([h]))
  
  w2 = tf.Variable(
    tf.truncated_normal([h, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  hidden = tf.matmul(tf_train_dataset, w1) + b1
  relu = tf.nn.relu(hidden)
  logits = tf.matmul(relu, w2) + b2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=tf_train_labels)) \
        + 0.02*tf.nn.l2_loss(w2) + 0.02*tf.nn.l2_loss(b2)
    
  global_step = tf.Variable(0)

  learning_rate = tf.train.exponential_decay(
    0.08,                
    global_step * batch_size * ((global_step * batch_size) / train_dataset.shape[0]),
    train_dataset.shape[0],
    0.75)
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)

  valid_hidden = tf.matmul(tf_valid_dataset, w1) + b1
  valid_relu = tf.nn.relu(valid_hidden)
  valid_logits = tf.matmul(valid_relu, w2) + b2
  valid_prediction = tf.nn.softmax(valid_logits)

  test_hidden = tf.matmul(tf_test_dataset, w1) + b1
  test_relu = tf.nn.relu(test_hidden)
  test_logits = tf.matmul(test_relu, w2) + b2
  test_prediction = tf.nn.softmax(test_logits)


    



In [8]:

    
num_steps = 2001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    randperm = np.random.permutation(train_dataset.shape[0])
    # Generate a minibatch.
    batch_data = train_dataset[randperm[:batch_size], :]
    batch_labels = train_labels[randperm[:batch_size], :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Learning rate: %f" % learning_rate.eval())
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [9]:

    
batch_size = 10

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=tf_train_labels)) \
        + 0.05*tf.nn.l2_loss(weights) + 0.05*tf.nn.l2_loss(biases)

  global_step = tf.Variable(0)

  learning_rate = tf.train.exponential_decay(
    0.05,                
    global_step * batch_size,
    train_dataset.shape[0],
    0.95)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [10]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    randperm = np.random.permutation(train_dataset.shape[0])
    # Generate a minibatch.
    batch_data = train_dataset[randperm[:batch_size], :]
    batch_labels = train_labels[randperm[:batch_size], :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}

    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)

    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Learning rate: %f" % learning_rate.eval())
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
batch_size = 200
h = 1024

graph = tf.Graph()
with graph.as_default():
  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  w1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, h]))
  b1 = tf.Variable(tf.zeros([h]))
  
  w2 = tf.Variable(
    tf.truncated_normal([h, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  hidden = tf.matmul(tf_train_dataset, w1) + b1
  relu = tf.nn.relu(hidden)
  logits = tf.matmul(tf.nn.dropout(relu, 0.5), w2) + b2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=tf_train_labels))
    
  global_step = tf.Variable(0)

  learning_rate = tf.train.exponential_decay(
    0.08,                
    global_step * batch_size * ((global_step * batch_size) / train_dataset.shape[0]),
    train_dataset.shape[0],
    0.75)
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(tf.matmul(relu, w2) + b2)

  valid_hidden = tf.matmul(tf_valid_dataset, w1) + b1
  valid_relu = tf.nn.relu(valid_hidden)
  valid_logits = tf.matmul(valid_relu, w2) + b2
  valid_prediction = tf.nn.softmax(valid_logits)

  test_hidden = tf.matmul(tf_test_dataset, w1) + b1
  test_relu = tf.nn.relu(test_hidden)
  test_logits = tf.matmul(test_relu, w2) + b2
  test_prediction = tf.nn.softmax(test_logits)


    



In [12]:

    
num_steps = 4001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    randperm = np.random.permutation(train_dataset.shape[0])
    # Generate a minibatch.
    batch_data = train_dataset[randperm[:batch_size], :]
    batch_labels = train_labels[randperm[:batch_size], :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Learning rate: %f" % learning_rate.eval())
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
batch_size = 200
h1 = 1024
h2 = 512

graph = tf.Graph()
with graph.as_default():
  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  w1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, h1]))
  b1 = tf.Variable(tf.zeros([h1]))
  
  w2 = tf.Variable(
    tf.truncated_normal([h1, h2]))
  b2 = tf.Variable(tf.zeros([h2]))

  w3 = tf.Variable(
    tf.truncated_normal([h2, num_labels]))
  b3 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  layer1 = tf.nn.relu(tf.matmul(tf_train_dataset, w1) + b1)
  layer2 = tf.nn.relu(tf.matmul(tf.nn.dropout(layer1, 0.5), w2) + b2)
  logits = tf.matmul(tf.nn.dropout(layer2, 0.5), w3) + b3
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=tf_train_labels)) \
        + 0.05*tf.nn.l2_loss(w3) + 0.05*tf.nn.l2_loss(b3)
    
  global_step = tf.Variable(0)

  learning_rate = tf.train.exponential_decay(
    0.005,                
    global_step * batch_size * ((global_step * batch_size) / train_dataset.shape[0]),
    train_dataset.shape[0],
    0.75)
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_layer1 = tf.nn.relu(tf.matmul(tf_train_dataset, w1) + b1)
  train_layer2 = tf.nn.relu(tf.matmul(train_layer1, w2) + b2)
  train_logits = tf.matmul(train_layer2, w3) + b3
  train_prediction = tf.nn.softmax(train_logits)

  valid_layer1 = tf.nn.relu(tf.matmul(tf_valid_dataset, w1) + b1)
  valid_layer2 = tf.nn.relu(tf.matmul(valid_layer1, w2) + b2)
  valid_logits = tf.matmul(valid_layer2, w3) + b3
  valid_prediction = tf.nn.softmax(valid_logits)

  test_layer1 = tf.nn.relu(tf.matmul(tf_test_dataset, w1) + b1)
  test_layer2 = tf.nn.relu(tf.matmul(test_layer1, w2) + b2)
  test_logits = tf.matmul(test_layer2, w3) + b3
  test_prediction = tf.nn.softmax(test_logits)


    



In [ ]:

    
num_steps = 5001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    randperm = np.random.permutation(train_dataset.shape[0])
    
    # Generate a minibatch.
    batch_data = train_dataset[randperm[:batch_size], :]
    batch_labels = train_labels[randperm[:batch_size], :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, train_pred, valid_pred = session.run(
      [optimizer, loss, train_prediction, valid_prediction], feed_dict=feed_dict)

    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Learning rate: %f" % learning_rate.eval())
      print("Minibatch accuracy: %.1f%%" % accuracy(train_pred, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_pred, valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    

