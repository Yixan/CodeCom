
In [2]:

    
import tensorflow as tf 
import numpy as np
from time import time
import matplotlib.pyplot as plt
import tensorflow.examples.tutorials.mnist.input_data as input_data


    



In [3]:

    
ts_c = tf.constant(2,name="ts_c")
ts_c


    



In [4]:

    
ts_x = tf.Variable(ts_c+5,name="ts_x")
ts_x


    



In [5]:

    
sess=tf.Session()
sess


    



In [6]:

    
init = tf.global_variables_initializer()
sess.run(init)


    



In [7]:

    
sess.close()


    



In [8]:

    
with tf.Session() as sess:
    ...


    



In [9]:

    
width = tf.placeholder("int32")
height = tf.placeholder("int32")
area = tf.multiply(width,height)
with tf.Session() as sess:
    init = tf.global_variables_initializer()
    sess.run(init)
    sess.run(area,feed_dict={width:6,height: 8})


    



In [10]:

    
ts_X=tf.Variable([0.4,0.2,0.4])
with tf.Session() as sess:
    init=tf.global_variables_initializer()
    sess.run(init)
    X=sess.run(ts_X)
    print(X)
    print(X.shape)


    



In [11]:

    
W=tf.Variable([[-0.5,-0.2],
               [-0.3,0.4],
               [-0.5,0.2]])
with tf.Session() as sess:
    init=tf.global_variables_initializer()
    sess.run(init)
    W_array=sess.run(W)
    print(W_array)
    print(W_array.shape)


    



In [12]:

    
X=tf.Variable([[1.,1.,1.]])
W=tf.Variable([[-0.5,-0.2],
               [-0.3,0.4],
               [-0.5,0.2]])
b=tf.Variable([[0.1,0.2]])
XWb=tf.matmul(X,W)+b
with tf.Session() as sess:
    init = tf.global_variables_initializer()
    sess.run(init)
    print(sess.run(XWb))


    



In [13]:

    
X=tf.Variable([[1.,1.,1.]])
W=tf.Variable([[-0.5,-0.2],
               [-0.3,0.4],
               [-0.5,0.2]])
b=tf.Variable([[0.1,0.2]])
XWb=tf.matmul(X,W)+b
y=tf.nn.sigmoid(XWb)
#y=tf.nn.relu(XWb)
with tf.Session() as sess:
    init = tf.global_variables_initializer()
    sess.run(init)
    print(sess.run(y))


    



In [14]:

    
W=tf.Variable( tf.random_normal([3,2]) )
b=tf.Variable( tf.random_normal([1,2]) )
X=tf.Variable([[0.4,0.2,0.4]]) #x要是matrix[[]]
y=tf.nn.relu(tf.matmul(X,W)+b)
with tf.Session() as sess:
    init = tf.global_variables_initializer()
    sess.run(init)
    print(sess.run(b))
    print(sess.run(W))
    print(sess.run(y))


    



In [15]:

    
W=tf.Variable( tf.random_normal([3,2]) )
b=tf.Variable( tf.random_normal([1,2]) )
X=tf.Variable([[0.4,0.2,0.4]]) #x要是matrix[[]]
y=tf.nn.relu(tf.matmul(X,W)+b)
with tf.Session() as sess:
    init = tf.global_variables_initializer()
    sess.run(init)
    (_b,_W,_y)=sess.run((b,W,y)) 
    print(_b)
    print(_W)
    print(_y)


    



In [16]:

    
W=tf.Variable( tf.random_normal([3,2]) )
b=tf.Variable( tf.random_normal([1,2]) )
X=tf.placeholder("float",[None,3])
y=tf.nn.relu(tf.matmul(X,W)+b)
with tf.Session() as sess:
    init = tf.global_variables_initializer()
    sess.run(init)
    X_array = np.array([[0.4,0.2,0.4]])
    (_b,_W,_y)=sess.run((b,W,y),feed_dict={X:X_array}) 
    print(_b)
    print(_W)
    print(_y)


    



In [17]:

    
def layer(output_dim,input_dim,inputs,activation=None):
    W=tf.Variable(tf.random_normal([input_dim,output_dim]))
    b=tf.Variable(tf.random_normal([1,output_dim]))
    XWb=tf.matmul(inputs,W)+b
    if activation is None:
        outputs = XWb
    else:
        outputs = activation(XWb)
    return outputs


    



In [18]:

    
X = tf.placeholder("float",[None,4])
h = layer(output_dim=3,input_dim=4,inputs=X,activation=tf.nn.relu)
y = layer(output_dim=2,input_dim=3,inputs=h)
with tf.Session() as sess:
    init = tf.global_variables_initializer()
    sess.run(init)
    X_array = np.array([[0.4,0.2,0.4,0.5]])
    (layer_X,layer_h,layer_y) = sess.run((X,h,y),feed_dict={X:X_array})


    



In [19]:

    
x=tf.placeholder("float",[None,784])
h1=layer(output_dim=256,input_dim=784,inputs=x,activation=tf.nn.relu)
y_predict=layer(output_dim=10,input_dim=256,inputs=h1,activation=None)


    



In [20]:

    
y_label=tf.placeholder("float",[None,10])


    



In [21]:

    
loss_function=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits
                             (logits=y_predict,labels=y_label))


    



In [22]:

    
optimizer=tf.train.AdamOptimizer(learning_rate=0.001).minimize(loss_function)


    



In [23]:

    
correct_prediction=tf.equal(tf.argmax(y_label,1),
                            tf.argmax(y_predict,1))


    



In [24]:

    
accuracy=tf.reduce_mean(tf.cast(correct_prediction,"float"))


    



In [33]:

    
mnist = input_data.read_data_sets("MNIST_data/",one_hot=True)
trainEpochs=15
batchSize=100
totalBatchs=int(mnist.train.num_examples/batchSize)
loss_list=[]
epoch_list=[]
accuracy_list=[]
startTime=time()
sess=tf.Session()
sess.run(tf.global_variables_initializer())


    



In [26]:

    
for epoch in range(trainEpochs):
    for i in range(totalBatchs):
        batch_x,batch_y=mnist.train.next_batch(batchSize)
        sess.run(optimizer,feed_dict={x:batch_x,y_label:batch_y})
    loss,acc=sess.run([loss_function,accuracy],feed_dict={x:mnist.validation.images,
                                                          y_label:mnist.validation.labels})
    epoch_list.append(epoch)
    loss_list.append(loss)
    accuracy_list.append(acc)
    print("Train Epoch:",'%02d' % (epoch+1),"Loss=","{:.9f}".format(loss),"Accuracy=",acc)
duration=time()-startTime
print("Train Finished takes:",duration)
    
    
    
    


    



In [27]:

    
def weight(shape):
    return tf.Variable(tf.truncated_normal(shape,stddev=0.1),name='W')


    



In [28]:

    
def bias(shape):
    return tf.Variable(tf.constant(0.1,shape=shape),name='b')


    



In [29]:

    
def conv2d(x,W):
    return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding='SAME')


    



In [30]:

    
def max_pool_2_2(x):
    return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding='SAME')


    



In [31]:

    
with tf.name_scope('Input_Layer'):
    x=tf.placeholder("float",shape=[None,784],name="x")
    x_image=tf.reshape(x,[-1,28,28,1])


    



In [32]:

    
with tf.name_scope('C1_Conv'):
    W1=weight([5,5,1,16])
    b1=bias([16])
    Conv1=conv2d(x_image,W1)+b1
    C1_Conv=tf.nn.relu(Conv1)


    



In [34]:

    
with tf.name_scope("C1_Pool"):
    C1_Pool=max_pool_2_2(C1_Conv)


    



In [36]:

    
with tf.name_scope('C2_Conv'):
    W2=weight([5,5,16,36])
    b2=bias([36])
    Conv2=conv2d(C1_Pool,W2)+b2
    C2_Conv=tf.nn.relu(Conv2)


    



In [37]:

    
with tf.name_scope('C2_Pool'):
    C2_Pool=max_pool_2_2(C2_Conv)


    



In [39]:

    
with tf.name_scope('D_Flat'):
    D_Flat=tf.reshape(C2_Pool,[-1,1764])


    



In [40]:

    
with tf.name_scope('D_Hidden_Layer'):
    W3=weight([1764,128])
    b3=bias([128])
    D_Hidden=tf.nn.relu(tf.matmul(D_Flat,W3)+b3)
    D_Hidden_Dropout=tf.nn.dropout(D_Hidden,keep_prob=0.8)


    



In [41]:

    
with tf.name_scope('Output_Layer'):
    W4=weight([128,10])
    b4=bias([10])
    y_predict=tf.nn.softmax(tf.matmul(D_Hidden_Dropout,W4)+b4)
    


    



In [42]:

    
with tf.name_scope("optimizer"):
    y_label=tf.placeholder("float",shape=[None,10],name="y_label")
    loss_function=tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits
                                (logits=y_predict,labels=y_label))
    optimizer=tf.train.AdamOptimizer(learning_rate=0.0001).minimize(loss_function)


    



In [44]:

    
with tf.name_scope("evaluate_model"):
    correct_prediction=tf.equal(tf.arg_max(y_predict,1),tf.arg_max(y_label,1))
    accuracy=tf.reduce_mean(tf.cast(correct_prediction,"float"))


    



In [45]:

    
trainEpochs=3
batchSize=100
totalBatchs=int(mnist.train.num_examples/batchSize)
epoch_list=[]
accuracy_list=[]
loss_list=[]
startTime=time()
sess=tf.Session()
sess.run(tf.global_variables_initializer())


    



In [49]:

    
for epoch in range(trainEpochs):
    for i in range(totalBatchs):
        batch_x,batch_y=mnist.train.next_batch(batchSize)
        sess.run(optimizer,feed_dict={x:batch_x,y_label:batch_y})
    loss,acc=sess.run([loss_function,accuracy],feed_dict={x:mnist.validation.images,
                                                          y_label:mnist.validation.labels})
    epoch_list.append(epoch)
    loss_list.append(loss)
    accuracy_list.append(acc)
    print("Train Epoch:",'%02d' %(epoch+1),"Loss=",loss,"Accuracy=",acc)
duration=time()-startTime
print("Train Finished takes:",duration)


    



In [ ]:

    
 


    

