
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [ ]:

    
%%time

batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  hidden_size = 1024
  # Variables.
  hidden_weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_size]))
  hidden_biases = tf.Variable(tf.zeros([hidden_size]))
  
  relu = tf.nn.relu(hidden_biases)
    
  weights = tf.Variable(
    tf.truncated_normal([hidden_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  def net(ds):
    hidden_layer = tf.matmul(ds, hidden_weights) + hidden_biases
    relu_layer = tf.nn.relu(hidden_layer)
    return tf.matmul(relu_layer, weights) + biases
  
  # Training computation.
  logits = net(tf_train_dataset)
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(net(tf_valid_dataset))    
  test_prediction = tf.nn.softmax(net(tf_test_dataset))



num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [21]:

    
%%time

batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  hidden_size = 1024
  # Variables.
  hidden_weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_size]))
  hidden_biases = tf.Variable(tf.zeros([hidden_size]))
  
  relu = tf.nn.relu(hidden_biases)
    
  weights = tf.Variable(
    tf.truncated_normal([hidden_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  def net(ds):
    hidden_layer = tf.matmul(ds, hidden_weights) + hidden_biases
    relu_layer = tf.nn.relu(hidden_layer)
    o = tf.matmul(relu_layer, weights) + biases
    return o
    return (o +
      beta*(
      tf.nn.l2_loss(hidden_weights) +
      tf.nn.l2_loss(weights)))
  
  # Training computation.
  logits = tf.nn.dropout(net(tf_train_dataset), 0.5)
  beta = 0.01
  reg = beta*(tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights))
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits) + reg)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(net(tf_valid_dataset))    
  test_prediction = tf.nn.softmax(net(tf_test_dataset))

num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
# W:B:R:W:B:L2    90.2, 90.0


    



In [9]:

    
batch_size = 12

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  hidden_size = 1024
  # Variables.
  hidden_weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_size]))
  hidden_biases = tf.Variable(tf.zeros([hidden_size]))
  
  relu = tf.nn.relu(hidden_biases)
    
  weights = tf.Variable(
    tf.truncated_normal([hidden_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  def net(ds):
    hidden_layer = tf.matmul(ds, hidden_weights) + hidden_biases
    relu_layer = tf.nn.relu(hidden_layer)
    o = tf.matmul(relu_layer, weights) + biases
    return o
  
  # Training computation.
  logits = net(tf_train_dataset)
  beta = 0.01
  reg = beta*(tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights))
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits) + reg)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(net(tf_valid_dataset))    
  test_prediction = tf.nn.softmax(net(tf_test_dataset))


    



In [10]:

    
%%time
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    sub_step = step%10
    offset = (sub_step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)

    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
      print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
# W:B:R:W:B:L2    90.2, 90.0


    



In [18]:

    
batch_size = 12

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  hidden_size = 1024
  # Variables.
  hidden_weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_size]))
  hidden_biases = tf.Variable(tf.zeros([hidden_size]))
  
  relu = tf.nn.relu(hidden_biases)
    
  weights = tf.Variable(
    tf.truncated_normal([hidden_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  def net(ds):
    hidden_layer = tf.matmul(ds, hidden_weights) + hidden_biases
    relu_layer = tf.nn.relu(hidden_layer)
    o = tf.matmul(relu_layer, weights) + biases
    return o
  
  # Training computation.
  logits = tf.nn.dropout(net(tf_train_dataset), 0.5)
#   logits = net(tf_train_dataset)
  beta = 0.01
  reg = beta*(tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights))
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits) + reg)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(net(tf_valid_dataset))    
  test_prediction = tf.nn.softmax(net(tf_test_dataset))


    



In [19]:

    
%%time
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    sub_step = step%50
    offset = (sub_step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)

    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
      print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
# W:B:R:W:B:L2    90.2, 90.0


    



In [5]:

    
def try_hpar(batch_size = 128,
             num_steps = 3001,
             hidden_size = 1024,
             droput_keep=0.9,
             learning_rate=0.5,
             decay_rate=.95,
             beta = 0.01):

    graph = tf.Graph()
    with graph.as_default():  
      global_step = tf.Variable(0)

      # Input data. For the training data, we use a placeholder that will be fed
      # at run time with a training minibatch.
      tf_train_dataset = tf.placeholder(tf.float32,
                                        shape=(batch_size, image_size * image_size))
      tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
      tf_valid_dataset = tf.constant(valid_dataset)
      tf_test_dataset = tf.constant(test_dataset)

      
      # Variables.
      hidden_weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_size]))
      hidden_biases = tf.Variable(tf.zeros([hidden_size]))

      relu = tf.nn.relu(hidden_biases)

      weights = tf.Variable(
        tf.truncated_normal([hidden_size, num_labels]))
      biases = tf.Variable(tf.zeros([num_labels]))

      def net(ds):
        hidden_layer = tf.matmul(ds, hidden_weights) + hidden_biases
        relu_layer = tf.nn.relu(hidden_layer)
        o = tf.matmul(relu_layer, weights) + biases
        return o

      # Training computation.
      logits = tf.nn.dropout(net(tf_train_dataset), droput_keep)
    #   logits = net(tf_train_dataset)
      
      reg = beta*(tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights))
      loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits) + reg)

      # Optimizer.
      learning_rate = tf.train.exponential_decay(learning_rate=learning_rate,
                                                 global_step=global_step,
                                                 decay_steps=num_steps,
                                                 decay_rate=decay_rate)
      optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

      # Predictions for the training, validation, and test data.
      train_prediction = tf.nn.softmax(logits)
      valid_prediction = tf.nn.softmax(net(tf_valid_dataset))    
      test_prediction = tf.nn.softmax(net(tf_test_dataset))

    with tf.Session(graph=graph) as session:
      tf.global_variables_initializer().run()
#       print("Initialized")
      for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
#         if (step % 500 == 0):
#             print("Minibatch loss at step %d: %f" % (step, l))
#             print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
#             print("Validation accuracy: %.1f%%" % accuracy(
#         valid_prediction.eval(), valid_labels))
    
      return accuracy(test_prediction.eval(), test_labels)
#       print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [6]:

    
%%time

from itertools import product

def unpack(x):
    return [(list(x.items())[0][0], v) for v in list(x.items())[0][1]]

def make_train_grid():
    grid_config = {'batch_size': [128],
                   'num_steps': [3001],
                   'hidden_size': [1024],
                   'droput_keep': [0.5],
                   'learning_rate': [0.5],
                   'decay_rate': [0.95, 0.99],
                   'beta': [0.01, 0.005]}
    
    p = product(*[unpack({k:v}) for k,v in grid_config.items()])
    return list([dict(c) for c in p])

train_grid = make_train_grid()

# for hpar in train_grid:
#     try_hpar(**hpar)


    



In [7]:

    
print('Will try the following (grid size:', len(train_grid),')')
for hpar in train_grid:
    print(hpar)


    



In [8]:

    
print('Starting grid seach')
result = []
for hpar in train_grid:
    %time r = try_hpar(**hpar)
    print([r, hpar])
    result.append([r, hpar])
    


    



In [9]:

    
result


    



In [ ]:

    
 


    

