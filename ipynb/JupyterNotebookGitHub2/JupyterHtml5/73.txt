
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [3]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [5]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [11]:

    
alpha = 0.01
batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  loss = tf.reduce_mean(loss + alpha*tf.nn.l2_loss(weights))
  
  # Optimizer.  
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [12]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [13]:

    
batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, 1024] ,stddev=0.1))
  B1 = tf.Variable(tf.zeros([1024]))

  W2 = tf.Variable(tf.truncated_normal([1024, num_labels]))
  B2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, W1) + B1
  Y1 = tf.nn.relu(logits)
  logits2 = tf.matmul(Y1, W2) + B2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits2)) 
  loss += + alpha*tf.nn.l2_loss(W1) + + alpha*tf.nn.l2_loss(W2)
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  train_prediction = tf.nn.softmax(logits2)
  valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + B1), W2) + B2)
  test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, W1) + B1), W2) + B2)


    



In [14]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [15]:

    
train_dataset_small = train_dataset[:500, :]
train_labels_small = train_labels[:500]
num_steps = 3001 

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_small.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_small[offset:(offset + batch_size), :]
    batch_labels = train_labels_small[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [16]:

    
batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  pkeep = tf.placeholder(tf.float32)
    
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, 1024] ,stddev=0.1))
  B1 = tf.Variable(tf.zeros([1024]))

  W2 = tf.Variable(tf.truncated_normal([1024, num_labels]))
  B2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits1 = tf.matmul(tf_train_dataset, W1) + B1
  Y1 = tf.nn.relu(logits1)
  Y1d = tf.nn.dropout(Y1, pkeep)

  logits2 = tf.matmul(Y1d, W2) + B2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits2))
  # Loss function with L2 Regularization with beta=0.01
  l2_regularization = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2)
  loss = tf.reduce_mean(loss + alpha * l2_regularization)
  
    # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  train_prediction = tf.nn.softmax(logits2)
  valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + B1), W2) + B2)
  test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, W1) + B1), W2) + B2)


    



In [17]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() #tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, pkeep: 0.5}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [47]:

    
import math as math


alpha = 0.002
batch_size = 128

n_layer_1 = 2048
n_layer_2 = 1024
n_layer_3 = 512
n_layer_4 = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  pkeep = tf.placeholder(tf.float32)
    
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_layer_1] ,stddev=math.sqrt(2.0/(image_size*image_size))))
  B1 = tf.Variable(tf.zeros([n_layer_1]))

  W2 = tf.Variable(tf.truncated_normal([n_layer_1, n_layer_2], stddev=math.sqrt(2.0/n_layer_1)))
  B2 = tf.Variable(tf.zeros([n_layer_2]))
  
  W3 = tf.Variable(tf.truncated_normal([n_layer_2, n_layer_3], stddev=math.sqrt(2.0/n_layer_2)))
  B3 = tf.Variable(tf.zeros([n_layer_3]))

  W4 = tf.Variable(tf.truncated_normal([n_layer_3, n_layer_4], stddev=math.sqrt(2.0/n_layer_3)))
  B4 = tf.Variable(tf.zeros([n_layer_4]))
  
  W5 = tf.Variable(tf.truncated_normal([n_layer_4, num_labels], stddev=math.sqrt(2.0/n_layer_4)))
  B5 = tf.Variable(tf.zeros([num_labels]))
                   
  # Training computation.
  Y1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + B1)
  Y1d = tf.nn.dropout(Y1, pkeep)
                   
  Y2 = tf.nn.relu(tf.matmul(Y1d, W2) + B2)
  Y2d = tf.nn.dropout(Y2, pkeep)
                   
  Y3 = tf.nn.relu(tf.matmul(Y2d, W3) + B3)
  Y3d = tf.nn.dropout(Y3, pkeep)     
                                  
  Y4 = tf.nn.relu(tf.matmul(Y3d, W4) + B4)
  Y4d = tf.nn.dropout(Y4, pkeep)
  
  logits = tf.matmul(Y4d, W5) + B5
  Y5 = tf.nn.softmax(logits)  
                   
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  l2_regularization = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3) + \
    tf.nn.l2_loss(W4) + tf.nn.l2_loss(W5)
  loss = tf.reduce_mean(loss + alpha * l2_regularization)
    
  # Optimizer
  global_step = tf.Variable(0)  # count the number of steps taken.
  # the learning rate is: # 0.0001 + 0.003 * (1/e)^(step/2000)), i.e. exponential decay from 0.003->0.0001
  lr =  0.0001 + tf.train.exponential_decay(0.5, global_step, 5000, 1/math.e)
  #learning_rate = tf.train.exponential_decay(0.5, global_step, 100000, 0.96, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss, global_step=global_step)


  # Predictions for the training
  train_prediction = tf.nn.softmax(logits)

  # Predictions for validation 
  valid_logits_1 = tf.matmul(tf_valid_dataset, W1) + B1
  valid_relu_1 = tf.nn.relu(valid_logits_1)
    
  valid_logits_2 = tf.matmul(valid_relu_1, W2) + B2
  valid_relu_2 = tf.nn.relu(valid_logits_2)
    
  valid_logits_3 = tf.matmul(valid_relu_2, W3) + B3
  valid_relu_3 = tf.nn.relu(valid_logits_3)
    
  valid_logits_4 = tf.matmul(valid_relu_3, W4) + B4
  valid_relu_4 = tf.nn.relu(valid_logits_4)
  
  valid_logits_5 = tf.matmul(valid_relu_4, W5) + B5    
  valid_prediction = tf.nn.softmax(valid_logits_5)
    
  # Predictions for test
  test_logits_1 = tf.matmul(tf_test_dataset, W1) + B1
  test_relu_1 = tf.nn.relu(test_logits_1)
    
  test_logits_2 = tf.matmul(test_relu_1, W2) + B2
  test_relu_2 = tf.nn.relu(test_logits_2)
   
  test_logits_3 = tf.matmul(test_relu_2, W3) + B3
  test_relu_3 = tf.nn.relu(test_logits_3)
    
  test_logits_4 = tf.matmul(test_relu_3, W4) + B4
  test_relu_4 = tf.nn.relu(test_logits_4)
    
  test_logits_5 = tf.matmul(test_relu_4, W5) + B5
  test_prediction = tf.nn.softmax(test_logits_5)
  


    



In [48]:

    
num_steps = 10001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, pkeep : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [8]:

    
import math as math


alpha = 0.002
batch_size = 128

n_layer_1 = 2048
n_layer_2 = 1024
n_layer_3 = 512
n_layer_4 = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  pkeep = tf.placeholder(tf.float32)
    
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_layer_1] ,stddev=math.sqrt(2.0/(image_size*image_size))))
  B1 = tf.Variable(tf.ones([n_layer_1])/10)

  W2 = tf.Variable(tf.truncated_normal([n_layer_1, n_layer_2], stddev=math.sqrt(2.0/n_layer_1)))
  B2 = tf.Variable(tf.ones([n_layer_2])/10)
  
  W3 = tf.Variable(tf.truncated_normal([n_layer_2, n_layer_3], stddev=math.sqrt(2.0/n_layer_2)))
  B3 = tf.Variable(tf.ones([n_layer_3])/10)

  W4 = tf.Variable(tf.truncated_normal([n_layer_3, n_layer_4], stddev=math.sqrt(2.0/n_layer_3)))
  B4 = tf.Variable(tf.ones([n_layer_4])/10)
  
  W5 = tf.Variable(tf.truncated_normal([n_layer_4, num_labels], stddev=math.sqrt(2.0/n_layer_4)))
  B5 = tf.Variable(tf.zeros([num_labels]))
                   
  # Training computation.
  Y1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + B1)
  Y1d = tf.nn.dropout(Y1, pkeep)
                   
  Y2 = tf.nn.relu(tf.matmul(Y1d, W2) + B2)
  Y2d = tf.nn.dropout(Y2, pkeep)
                   
  Y3 = tf.nn.relu(tf.matmul(Y2d, W3) + B3)
  Y3d = tf.nn.dropout(Y3, pkeep)     
                                  
  Y4 = tf.nn.relu(tf.matmul(Y3d, W4) + B4)
  Y4d = tf.nn.dropout(Y4, pkeep)
  
  logits = tf.matmul(Y4d, W5) + B5
  Y5 = tf.nn.softmax(logits)  
                   
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
  l2_regularization = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3) + \
    tf.nn.l2_loss(W4) + tf.nn.l2_loss(W5)
  loss = tf.reduce_mean(loss + alpha * l2_regularization)
    
  # Optimizer
  global_step = tf.Variable(0)  # count the number of steps taken.
  # the learning rate is: # 0.0001 + 0.003 * (1/e)^(step/2000)), i.e. exponential decay from 0.003->0.0001
  lr =  0.0001 + tf.train.exponential_decay(0.5, global_step, 5000, 1/math.e)
  #learning_rate = tf.train.exponential_decay(0.5, global_step, 100000, 0.96, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss, global_step=global_step)


  # Predictions for the training
  train_prediction = tf.nn.softmax(logits)

  # Predictions for validation 
  valid_logits_1 = tf.matmul(tf_valid_dataset, W1) + B1
  valid_relu_1 = tf.nn.relu(valid_logits_1)
    
  valid_logits_2 = tf.matmul(valid_relu_1, W2) + B2
  valid_relu_2 = tf.nn.relu(valid_logits_2)
    
  valid_logits_3 = tf.matmul(valid_relu_2, W3) + B3
  valid_relu_3 = tf.nn.relu(valid_logits_3)
    
  valid_logits_4 = tf.matmul(valid_relu_3, W4) + B4
  valid_relu_4 = tf.nn.relu(valid_logits_4)
  
  valid_logits_5 = tf.matmul(valid_relu_4, W5) + B5    
  valid_prediction = tf.nn.softmax(valid_logits_5)
    
  # Predictions for test
  test_logits_1 = tf.matmul(tf_test_dataset, W1) + B1
  test_relu_1 = tf.nn.relu(test_logits_1)
    
  test_logits_2 = tf.matmul(test_relu_1, W2) + B2
  test_relu_2 = tf.nn.relu(test_logits_2)
   
  test_logits_3 = tf.matmul(test_relu_2, W3) + B3
  test_relu_3 = tf.nn.relu(test_logits_3)
    
  test_logits_4 = tf.matmul(test_relu_3, W4) + B4
  test_relu_4 = tf.nn.relu(test_logits_4)
    
  test_logits_5 = tf.matmul(test_relu_4, W5) + B5
  test_prediction = tf.nn.softmax(test_logits_5)
  


    



In [9]:

    
num_steps = 10001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, pkeep : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [12]:

    
import math as math


alpha = 0.001
batch_size = 128

n_layer_1 = 1024
n_layer_2 = 512
n_layer_3 = 256
n_layer_4 = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  pkeep = tf.placeholder(tf.float32)
    
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_layer_1] ,stddev=math.sqrt(2.0/(image_size*image_size))))
  B1 = tf.Variable(tf.ones([n_layer_1])/10)

  W2 = tf.Variable(tf.truncated_normal([n_layer_1, n_layer_2], stddev=math.sqrt(2.0/n_layer_1)))
  B2 = tf.Variable(tf.ones([n_layer_2])/10)
  
  W3 = tf.Variable(tf.truncated_normal([n_layer_2, n_layer_3], stddev=math.sqrt(2.0/n_layer_2)))
  B3 = tf.Variable(tf.ones([n_layer_3])/10)

  W4 = tf.Variable(tf.truncated_normal([n_layer_3, n_layer_4], stddev=math.sqrt(2.0/n_layer_3)))
  B4 = tf.Variable(tf.ones([n_layer_4])/10)
  
  W5 = tf.Variable(tf.truncated_normal([n_layer_4, num_labels], stddev=math.sqrt(2.0/n_layer_4)))
  B5 = tf.Variable(tf.zeros([num_labels]))
                   
  # Training computation.
  Y1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + B1)
  Y1d = tf.nn.dropout(Y1, pkeep)
                   
  Y2 = tf.nn.relu(tf.matmul(Y1d, W2) + B2)
  Y2d = tf.nn.dropout(Y2, pkeep)
                   
  Y3 = tf.nn.relu(tf.matmul(Y2d, W3) + B3)
  Y3d = tf.nn.dropout(Y3, pkeep)     
                                  
  Y4 = tf.nn.relu(tf.matmul(Y3d, W4) + B4)
  Y4d = tf.nn.dropout(Y4, pkeep)
  
  logits = tf.matmul(Y4d, W5) + B5
  Y5 = tf.nn.softmax(logits)  
                   
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
  l2_regularization = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3) + \
    tf.nn.l2_loss(W4) + tf.nn.l2_loss(W5)
  loss = tf.reduce_mean(loss + alpha * l2_regularization)
    
  # Optimizer
  global_step = tf.Variable(0)  # count the number of steps taken.
  # the learning rate is: # 0.0001 + 0.003 * (1/e)^(step/2000)), i.e. exponential decay from 0.003->0.0001
  lr =  0.0001 + tf.train.exponential_decay(0.5, global_step, 5000, 1/math.e)
  #learning_rate = tf.train.exponential_decay(0.5, global_step, 100000, 0.96, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss, global_step=global_step)


  # Predictions for the training
  train_prediction = tf.nn.softmax(logits)

  # Predictions for validation 
  valid_logits_1 = tf.matmul(tf_valid_dataset, W1) + B1
  valid_relu_1 = tf.nn.relu(valid_logits_1)
    
  valid_logits_2 = tf.matmul(valid_relu_1, W2) + B2
  valid_relu_2 = tf.nn.relu(valid_logits_2)
    
  valid_logits_3 = tf.matmul(valid_relu_2, W3) + B3
  valid_relu_3 = tf.nn.relu(valid_logits_3)
    
  valid_logits_4 = tf.matmul(valid_relu_3, W4) + B4
  valid_relu_4 = tf.nn.relu(valid_logits_4)
  
  valid_logits_5 = tf.matmul(valid_relu_4, W5) + B5    
  valid_prediction = tf.nn.softmax(valid_logits_5)
    
  # Predictions for test
  test_logits_1 = tf.matmul(tf_test_dataset, W1) + B1
  test_relu_1 = tf.nn.relu(test_logits_1)
    
  test_logits_2 = tf.matmul(test_relu_1, W2) + B2
  test_relu_2 = tf.nn.relu(test_logits_2)
   
  test_logits_3 = tf.matmul(test_relu_2, W3) + B3
  test_relu_3 = tf.nn.relu(test_logits_3)
    
  test_logits_4 = tf.matmul(test_relu_3, W4) + B4
  test_relu_4 = tf.nn.relu(test_logits_4)
    
  test_logits_5 = tf.matmul(test_relu_4, W5) + B5
  test_prediction = tf.nn.softmax(test_logits_5)
  


    



In [13]:

    
num_steps = 12001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, pkeep : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [16]:

    
import math as math


alpha = 0.001
batch_size = 128

n_layer_1 = 1024
n_layer_2 = 512
n_layer_3 = 256
n_layer_4 = 128
n_layer_5 = 64

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  pkeep = tf.placeholder(tf.float32)
    
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_layer_1] ,stddev=math.sqrt(2.0/(image_size*image_size))))
  B1 = tf.Variable(tf.ones([n_layer_1])/10)

  W2 = tf.Variable(tf.truncated_normal([n_layer_1, n_layer_2], stddev=math.sqrt(2.0/n_layer_1)))
  B2 = tf.Variable(tf.ones([n_layer_2])/10)
  
  W3 = tf.Variable(tf.truncated_normal([n_layer_2, n_layer_3], stddev=math.sqrt(2.0/n_layer_2)))
  B3 = tf.Variable(tf.ones([n_layer_3])/10)

  W4 = tf.Variable(tf.truncated_normal([n_layer_3, n_layer_4], stddev=math.sqrt(2.0/n_layer_3)))
  B4 = tf.Variable(tf.ones([n_layer_4])/10)
  
  W5 = tf.Variable(tf.truncated_normal([n_layer_4, n_layer_5], stddev=math.sqrt(2.0/n_layer_4)))
  B5 = tf.Variable(tf.ones([n_layer_5])/10)

  W6 = tf.Variable(tf.truncated_normal([n_layer_5, num_labels], stddev=math.sqrt(2.0/n_layer_5)))
  B6 = tf.Variable(tf.zeros([num_labels]))
                   
  # Training computation.
  Y1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + B1)
  Y1d = tf.nn.dropout(Y1, pkeep)
                   
  Y2 = tf.nn.relu(tf.matmul(Y1d, W2) + B2)
  Y2d = tf.nn.dropout(Y2, pkeep)
                   
  Y3 = tf.nn.relu(tf.matmul(Y2d, W3) + B3)
  Y3d = tf.nn.dropout(Y3, pkeep)     
                                  
  Y4 = tf.nn.relu(tf.matmul(Y3d, W4) + B4)
  Y4d = tf.nn.dropout(Y4, pkeep)
  
  Y5 = tf.nn.relu(tf.matmul(Y4d, W5) + B5)
  Y5d = tf.nn.dropout(Y5, pkeep)

  logits = tf.matmul(Y5d, W6) + B6
  Y6 = tf.nn.softmax(logits)  
                   
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
  l2_regularization = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3) + \
    tf.nn.l2_loss(W4) + tf.nn.l2_loss(W5) + tf.nn.l2_loss(W6)
  loss = tf.reduce_mean(loss + alpha * l2_regularization)
    
  # Optimizer
  global_step = tf.Variable(0)  # count the number of steps taken.
  # the learning rate is: # 0.0001 + 0.003 * (1/e)^(step/2000)), i.e. exponential decay from 0.003->0.0001
  lr =  0.0001 + tf.train.exponential_decay(0.5, global_step, 5000, 1/math.e)
  #learning_rate = tf.train.exponential_decay(0.5, global_step, 100000, 0.96, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss, global_step=global_step)


  # Predictions for the training
  train_prediction = tf.nn.softmax(logits)

  # Predictions for validation 
  valid_logits_1 = tf.matmul(tf_valid_dataset, W1) + B1
  valid_relu_1 = tf.nn.relu(valid_logits_1)
    
  valid_logits_2 = tf.matmul(valid_relu_1, W2) + B2
  valid_relu_2 = tf.nn.relu(valid_logits_2)
    
  valid_logits_3 = tf.matmul(valid_relu_2, W3) + B3
  valid_relu_3 = tf.nn.relu(valid_logits_3)
    
  valid_logits_4 = tf.matmul(valid_relu_3, W4) + B4
  valid_relu_4 = tf.nn.relu(valid_logits_4)
    
  valid_logits_5 = tf.matmul(valid_relu_4, W5) + B5
  valid_relu_5 = tf.nn.relu(valid_logits_5)
  
  valid_logits_6 = tf.matmul(valid_relu_5, W6) + B6    
  valid_prediction = tf.nn.softmax(valid_logits_6)
    
  # Predictions for test
  test_logits_1 = tf.matmul(tf_test_dataset, W1) + B1
  test_relu_1 = tf.nn.relu(test_logits_1)
    
  test_logits_2 = tf.matmul(test_relu_1, W2) + B2
  test_relu_2 = tf.nn.relu(test_logits_2)
   
  test_logits_3 = tf.matmul(test_relu_2, W3) + B3
  test_relu_3 = tf.nn.relu(test_logits_3)
    
  test_logits_4 = tf.matmul(test_relu_3, W4) + B4
  test_relu_4 = tf.nn.relu(test_logits_4)
    
  test_logits_5 = tf.matmul(test_relu_4, W5) + B5
  test_relu_5 = tf.nn.relu(test_logits_5)
    
  test_logits_6 = tf.matmul(test_relu_5, W6) + B6
  test_prediction = tf.nn.softmax(test_logits_6)
  


    



In [17]:

    
num_steps = 12001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, pkeep : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [18]:

    
import math as math


alpha = 0.001
batch_size = 128

n_layer_1 = 1024
n_layer_2 = 512
n_layer_3 = 256
n_layer_4 = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  pkeep = tf.placeholder(tf.float32)
    
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_layer_1] ,stddev=math.sqrt(2.0/(image_size*image_size))))
  B1 = tf.Variable(tf.ones([n_layer_1])/10)

  W2 = tf.Variable(tf.truncated_normal([n_layer_1, n_layer_2], stddev=math.sqrt(2.0/n_layer_1)))
  B2 = tf.Variable(tf.ones([n_layer_2])/10)
  
  W3 = tf.Variable(tf.truncated_normal([n_layer_2, n_layer_3], stddev=math.sqrt(2.0/n_layer_2)))
  B3 = tf.Variable(tf.ones([n_layer_3])/10)

  W4 = tf.Variable(tf.truncated_normal([n_layer_3, n_layer_4], stddev=math.sqrt(2.0/n_layer_3)))
  B4 = tf.Variable(tf.ones([n_layer_4])/10)
  
  W5 = tf.Variable(tf.truncated_normal([n_layer_4, num_labels], stddev=math.sqrt(2.0/n_layer_4)))
  B5 = tf.Variable(tf.zeros([num_labels]))
                   
  # Training computation.
  Y1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + B1)
  Y1d = tf.nn.dropout(Y1, pkeep)
                   
  Y2 = tf.nn.relu(tf.matmul(Y1d, W2) + B2)
  Y2d = tf.nn.dropout(Y2, pkeep)
                   
  Y3 = tf.nn.relu(tf.matmul(Y2d, W3) + B3)
  Y3d = tf.nn.dropout(Y3, pkeep)     
                                  
  Y4 = tf.nn.relu(tf.matmul(Y3d, W4) + B4)
  Y4d = tf.nn.dropout(Y4, pkeep)
  
  logits = tf.matmul(Y4d, W5) + B5
  Y5 = tf.nn.softmax(logits)  
                   
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
  l2_regularization = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3) + \
    tf.nn.l2_loss(W4) + tf.nn.l2_loss(W5)
  loss = tf.reduce_mean(loss + alpha * l2_regularization)
    
  # Optimizer
  global_step = tf.Variable(0)  # count the number of steps taken.
  # the learning rate is: # 0.0001 + 0.003 * (1/e)^(step/2000)), i.e. exponential decay from 0.003->0.0001
  lr =  0.0001 + tf.train.exponential_decay(0.5, global_step, 5000, 1/math.e)
  #learning_rate = tf.train.exponential_decay(0.5, global_step, 100000, 0.96, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss, global_step=global_step)


  # Predictions for the training
  train_prediction = tf.nn.softmax(logits)

  # Predictions for validation 
  valid_logits_1 = tf.matmul(tf_valid_dataset, W1) + B1
  valid_relu_1 = tf.nn.relu(valid_logits_1)
    
  valid_logits_2 = tf.matmul(valid_relu_1, W2) + B2
  valid_relu_2 = tf.nn.relu(valid_logits_2)
    
  valid_logits_3 = tf.matmul(valid_relu_2, W3) + B3
  valid_relu_3 = tf.nn.relu(valid_logits_3)
    
  valid_logits_4 = tf.matmul(valid_relu_3, W4) + B4
  valid_relu_4 = tf.nn.relu(valid_logits_4)
  
  valid_logits_5 = tf.matmul(valid_relu_4, W5) + B5    
  valid_prediction = tf.nn.softmax(valid_logits_5)
    
  # Predictions for test
  test_logits_1 = tf.matmul(tf_test_dataset, W1) + B1
  test_relu_1 = tf.nn.relu(test_logits_1)
    
  test_logits_2 = tf.matmul(test_relu_1, W2) + B2
  test_relu_2 = tf.nn.relu(test_logits_2)
   
  test_logits_3 = tf.matmul(test_relu_2, W3) + B3
  test_relu_3 = tf.nn.relu(test_logits_3)
    
  test_logits_4 = tf.matmul(test_relu_3, W4) + B4
  test_relu_4 = tf.nn.relu(test_logits_4)
    
  test_logits_5 = tf.matmul(test_relu_4, W5) + B5
  test_prediction = tf.nn.softmax(test_logits_5)
  


    



In [19]:

    
num_steps = 15001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, pkeep : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [21]:

    
num_steps = 30001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, pkeep : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [ ]:

    
 


    

