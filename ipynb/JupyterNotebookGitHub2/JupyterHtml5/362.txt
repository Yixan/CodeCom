
In [2]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [3]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [5]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [6]:

    
########################## MULTINOMIAL LOGISTIC REGRESSION#############################################
# With gradient descent training, even this much data is prohibitive.
# Subset the training data for faster turnaround.
#train_subset = 10000
batch_size = 128
lr = 0.5
b = 0.001

graph_MLR = tf.Graph()
with graph_MLR.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels) + b*tf.nn.l2_loss(weights))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [7]:

    
num_steps = 3001

with tf.Session(graph=graph_MLR) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [8]:

    
########################## NEURAL NETWORK #############################################
batch_size = 128
num_hidden_nodes = [1024]

lr = 0.1 #0.1
b = 0.01 #0.01

graph_nn = tf.Graph()
with graph_nn.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)

  # Variables.
  n1=image_size * image_size*num_hidden_nodes[0]
  n2=num_hidden_nodes[0]*num_labels
    
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_nodes[0]]))#, stddev=np.sqrt(2/n1)))
  weights_2 = tf.Variable(tf.truncated_normal([num_hidden_nodes[0], num_labels]))#, stddev=np.sqrt(2/n2)))
    
  biases_1 = tf.Variable(tf.zeros([num_hidden_nodes[0]]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))

  # Training computation. 
  layer_1_in = tf_train_dataset
  layer_1_out = tf.nn.relu(tf.matmul(layer_1_in, weights_1) + biases_1)

  logits_in = layer_1_out
  logits_out = tf.matmul(logits_in, weights_2) + biases_2
    
  reg = b*( tf.nn.l2_loss(weights_1) + 
            tf.nn.l2_loss(weights_2) )

  loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits_out, tf_train_labels)  + reg )

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss)

  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_out)
    
  layer_1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1)
  valid_prediction = tf.nn.softmax(tf.matmul(layer_1_valid, weights_2) + biases_2)

  layer_1_test = tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1)
  test_prediction = tf.nn.softmax(tf.matmul(layer_1_test, weights_2) + biases_2)


    



In [9]:

    
num_steps = 3001

with tf.Session(graph=graph_nn) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [10]:

    
########################## NEURAL NETWORK #############################################
batch_size = 128
num_hidden_nodes = [1024]

lr = 0.1 #0.1
b = 0.01 #0.01

graph_nn2 = tf.Graph()
with graph_nn2.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)

  # Variables.
  n1=image_size * image_size*num_hidden_nodes[0]
  n2=num_hidden_nodes[0]*num_labels
    
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_nodes[0]]))#, stddev=np.sqrt(2/n1)))
  weights_2 = tf.Variable(tf.truncated_normal([num_hidden_nodes[0], num_labels]))#, stddev=np.sqrt(2/n2)))
    
  biases_1 = tf.Variable(tf.zeros([num_hidden_nodes[0]]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))

  # Training computation. 
  layer_1_in = tf_train_dataset
  layer_1_out = tf.nn.relu(tf.matmul(layer_1_in, weights_1) + biases_1)

  logits_in = layer_1_out
  logits_out = tf.matmul(logits_in, weights_2) + biases_2
    
  reg = b*( tf.nn.l2_loss(weights_1) + 
            tf.nn.l2_loss(weights_2) )

  loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits_out, tf_train_labels))#  + reg )

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss)

  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_out)
    
  layer_1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1)
  valid_prediction = tf.nn.softmax(tf.matmul(layer_1_valid, weights_2) + biases_2)

  layer_1_test = tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1)
  test_prediction = tf.nn.softmax(tf.matmul(layer_1_test, weights_2) + biases_2)


    



In [17]:

    
num_steps = 3001

with tf.Session(graph=graph_nn2) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step%2 * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
########################## NEURAL NETWORK #############################################
batch_size = 128
num_hidden_nodes = [1024]

lr = 0.1 #0.1
b = 0.01 #0.01

graph_nn3 = tf.Graph()
with graph_nn3.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)

  # Variables.
  n1=image_size * image_size*num_hidden_nodes[0]
  n2=num_hidden_nodes[0]*num_labels
    
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_nodes[0]]))#, stddev=np.sqrt(2/n1)))
  weights_2 = tf.Variable(tf.truncated_normal([num_hidden_nodes[0], num_labels]))#, stddev=np.sqrt(2/n2)))
    
  biases_1 = tf.Variable(tf.zeros([num_hidden_nodes[0]]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))

  # Training computation. 
  layer_1_in = tf_train_dataset
  layer_1_out = tf.nn.relu(tf.matmul(layer_1_in, weights_1) + biases_1)
    
  keep_prob = 0.5
  logits_in = tf.nn.dropout(layer_1_out,keep_prob)
  logits_out = tf.matmul(logits_in, weights_2) + biases_2
    
  reg = b*( tf.nn.l2_loss(weights_1) + 
            tf.nn.l2_loss(weights_2) )

  loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits_out, tf_train_labels))#  + reg )

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(lr).minimize(loss)

  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_out)
    
  layer_1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1)
  valid_prediction = tf.nn.softmax(tf.matmul(layer_1_valid, weights_2) + biases_2)

  layer_1_test = tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1)
  test_prediction = tf.nn.softmax(tf.matmul(layer_1_test, weights_2) + biases_2)


    



In [19]:

    
num_steps = 3001

with tf.Session(graph=graph_nn3) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step%2 * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [45]:

    
########################## NEURAL NETWORK #############################################
batch_size = 256
num_hidden_nodes = [1024,512,256]

lr = 0.5 # 0.001
b = 0.0005#0.01 # 0.01 
decay_rate = 0.9
decay_steps = 500

graph_nn = tf.Graph()
with graph_nn.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)

  # Variables.
  n1=image_size * image_size*num_hidden_nodes[0]
  n2=num_hidden_nodes[0]*num_hidden_nodes[1]  
  n3=num_hidden_nodes[1]*num_hidden_nodes[2]
  n4=num_hidden_nodes[2]*num_labels

  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_nodes[0]], stddev=np.sqrt(2.0/n1))) 
  weights_2 = tf.Variable(tf.truncated_normal([num_hidden_nodes[0], num_hidden_nodes[1]], stddev=np.sqrt(2.0/n2)))
  weights_3 = tf.Variable(tf.truncated_normal([num_hidden_nodes[1], num_hidden_nodes[2]], stddev=np.sqrt(2.0/n3)))
  weights_4 = tf.Variable(tf.truncated_normal([num_hidden_nodes[2], num_labels], stddev=np.sqrt(2.0/n4)))
    
  biases_1 = tf.Variable(tf.zeros([num_hidden_nodes[0]]))
  biases_2 = tf.Variable(tf.zeros([num_hidden_nodes[1]]))
  biases_3 = tf.Variable(tf.zeros([num_hidden_nodes[2]]))
  biases_4 = tf.Variable(tf.zeros([num_labels]))

  # Training computation.
  keep_prob_2 = 0.8
  keep_prob_3 = 0.5
  keep_prob_4 = 0.5

  layer_1_in = tf_train_dataset
  layer_1_out = tf.nn.relu(tf.matmul(layer_1_in, weights_1) + biases_1)

  layer_2_in = tf.nn.dropout(layer_1_out,keep_prob_2)
  layer_2_out = tf.nn.relu(tf.matmul(layer_2_in, weights_2) + biases_2)

  layer_3_in = tf.nn.dropout(layer_2_out,keep_prob_3)
  layer_3_out = tf.nn.relu(tf.matmul(layer_3_in, weights_3) + biases_3)
    
  logits_in = tf.nn.dropout(layer_3_out, keep_prob_4)
  logits_out = tf.matmul(logits_in, weights_4) + biases_4
    
  reg = b*( tf.nn.l2_loss(weights_1) + 
            tf.nn.l2_loss(weights_2) + 
            tf.nn.l2_loss(weights_3) +
            tf.nn.l2_loss(weights_4))

  loss = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits_out, tf_train_labels)  + reg )

  # Optimizer.
  global_step = tf.Variable(0)
  learning_rate = tf.train.exponential_decay(lr, global_step,decay_steps,decay_rate)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=global_step)

  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_out)
    
  layer_1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1)
  layer_2_valid = tf.nn.relu(tf.matmul(layer_1_valid, weights_2) + biases_2)
  layer_3_valid = tf.nn.relu(tf.matmul(layer_2_valid, weights_3) + biases_3)
  valid_prediction = tf.nn.softmax(tf.matmul(layer_3_valid, weights_4) + biases_4)

  layer_1_test = tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1)
  layer_2_test = tf.nn.relu(tf.matmul(layer_1_test, weights_2) + biases_2)
  layer_3_test = tf.nn.relu(tf.matmul(layer_2_test, weights_3) + biases_3)
  test_prediction = tf.nn.softmax(tf.matmul(layer_3_test, weights_4) + biases_4)


    



In [46]:

    
num_steps = 10001

with tf.Session(graph=graph_nn) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

