
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST_clean.pickle'

with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save  # hint to help gc free up memory
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [7]:

    
train_subset = 10000
lambda_val = 0.003 #scaling value for controlling regularization on the weight value

graph = tf.Graph()
with graph.as_default():
    
    tf_train_dataset = tf.constant(train_dataset[:10000, :])
    tf_train_labels  = tf.constant(train_labels[:10000, :])
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    #variables
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    logits = tf.matmul(tf_train_dataset,weights) + biases
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)) + lambda_val*tf.nn.l2_loss(weights)
    
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset,weights) + biases)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset,weights) + biases)


    



In [8]:

    
num_steps = 801

with tf.Session(graph=graph) as session:
  # This is a one-time operation which ensures the parameters get initialized as
  # we described in the graph: random weights for the matrix, zeros for the
  # biases. 
  tf.global_variables_initializer().run()
  print('Initialized')
  for step in range(num_steps):
    # Run the computations. We tell .run() that we want to run the optimizer,
    # and get the loss value and the training predictions returned as numpy
    # arrays.
    _, l, predictions = session.run([optimizer, loss, train_prediction])
    if (step % 100 == 0):
      print('Loss at step %d: %f' % (step, l))
      print('Training accuracy: %.1f%%' % accuracy(
        predictions, train_labels[:train_subset, :]))
      # Calling .eval() on valid_prediction is basically like calling run(), but
      # just to get that one numpy array. Note that it recomputes all its graph
      # dependencies.
      print('Validation accuracy: %.1f%%' % accuracy(
        valid_prediction.eval(), valid_labels))
  print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [9]:

    
# Applying l2 regularization for logistic models
train_subset = 10000
lambda_val = 3 # We have taken a very high value

graph = tf.Graph()
with graph.as_default():
    
    tf_train_dataset = tf.constant(train_dataset[:10000, :])
    tf_train_labels  = tf.constant(train_labels[:10000, :])
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    #variables
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    logits = tf.matmul(tf_train_dataset,weights) + biases
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)) + lambda_val*tf.nn.l2_loss(weights)
    
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset,weights) + biases)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset,weights) + biases)


    



In [10]:

    
num_steps = 801

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print('Initialized')
  for step in range(num_steps):
    _, l, predictions = session.run([optimizer, loss, train_prediction])
    if (step % 100 == 0):
      print('Loss at step %d: %f' % (step, l))
      print('Training accuracy: %.1f%%' % accuracy(
        predictions, train_labels[:train_subset, :]))
      print('Validation accuracy: %.1f%%' % accuracy(
        valid_prediction.eval(), valid_labels))
  print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
batch_size = 128
image_size = 28
num_labels = 10
hidden_layer_nodes = 1000
lambda_val = 0.001

graph = tf.Graph()
with graph.as_default():
    
    #create place holders for taking training input
    tf_train_dataset = tf.placeholder(dtype=tf.float32,shape=(batch_size,image_size*image_size))
    tf_train_labels = tf.placeholder(dtype=tf.float32,shape=(batch_size,num_labels))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    # Variables for computing hidden layer nodes values
    weights1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_layer_nodes]))
    biases1 = tf.Variable(tf.zeros([hidden_layer_nodes]))
    hidden_layer_data = tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1)
    
    
    #variables for computing logits for the output layer
    weights2 = tf.Variable(
        tf.truncated_normal([hidden_layer_nodes, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden_layer_data,weights2)+biases2
    
    
    #calculating loss
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)) \
            + lambda_val * tf.nn.l2_loss(weights1) + lambda_val * tf.nn.l2_loss(weights2)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1),weights2)+biases2)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1),weights2)+biases2)


    



In [12]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [13]:

    
batch_size = 128
image_size = 28
num_labels = 10
hidden_layer_nodes = 1000
lambda_val = 0.001

graph = tf.Graph()
with graph.as_default():
    
    #create place holders for taking training input
    tf_train_dataset = tf.placeholder(dtype=tf.float32,shape=(batch_size,image_size*image_size))
    tf_train_labels = tf.placeholder(dtype=tf.float32,shape=(batch_size,num_labels))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    # Variables for computing hidden layer nodes values
    weights1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_layer_nodes]))
    biases1 = tf.Variable(tf.zeros([hidden_layer_nodes]))
    hidden_layer_data = tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1)
    
    
    #variables for computing logits for the output layer
    weights2 = tf.Variable(
        tf.truncated_normal([hidden_layer_nodes, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden_layer_data,weights2)+biases2
    
    
    #calculating loss
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)) \
            + lambda_val * tf.nn.l2_loss(weights1) + lambda_val * tf.nn.l2_loss(weights2)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1),weights2)+biases2)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1),weights2)+biases2)


    



In [14]:

    
num_steps = 3001
small_train_dataset = train_dataset[:2000,:]
small_train_labels  = train_labels[:2000]
indexes = np.arange(128)

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):

    np.random.shuffle(indexes)
    batch_data = small_train_dataset[indexes]
    batch_labels = small_train_labels[indexes]
    
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [15]:

    
batch_size = 128
image_size = 28
num_labels = 10
hidden_layer_nodes = 1000
print train_dataset.shape

graph = tf.Graph()
with graph.as_default():
    
    #create place holders for taking training input
    tf_train_dataset = tf.placeholder(dtype=tf.float32,shape=(batch_size,image_size*image_size))
    tf_train_labels = tf.placeholder(dtype=tf.float32,shape=(batch_size,num_labels))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    keep_prob = tf.constant(0.5)
    # Variables for computing hidden layer nodes values
    weights1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_layer_nodes]))
    biases1 = tf.Variable(tf.zeros([hidden_layer_nodes]))
    hidden_layer_data = tf.nn.dropout(tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1),keep_prob)
    
    
    #variables for computing logits for the output layer
    weights2 = tf.Variable(
        tf.truncated_normal([hidden_layer_nodes, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden_layer_data,weights2)+biases2
    
    
    #calculating loss
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits))
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1),weights2)+biases2)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1),weights2)+biases2)


    



In [16]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [21]:

    
#trying learning rate decay
batch_size = 128
image_size = 28
num_labels = 10
hidden_layer_nodes = 1000

graph = tf.Graph()
with graph.as_default():
    
    #create place holders for taking training input
    tf_train_dataset = tf.placeholder(dtype=tf.float32,shape=(batch_size,image_size*image_size))
    tf_train_labels = tf.placeholder(dtype=tf.float32,shape=(batch_size,num_labels))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    keep_prob = tf.constant(0.5)
    # Variables for computing hidden layer nodes values
    weights1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_layer_nodes]))
    biases1 = tf.Variable(tf.zeros([hidden_layer_nodes]))
    hidden_layer_data = tf.nn.dropout(tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1),keep_prob)
    
    
    #variables for computing logits for the output layer
    weights2 = tf.Variable(
        tf.truncated_normal([hidden_layer_nodes, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden_layer_data,weights2)+biases2
    
    
    global_steps = tf.Variable(0,trainable=False)
    learning_rate = tf.train.exponential_decay(learning_rate=0.5,global_step=global_steps,decay_rate=0.9,decay_steps=500)
    #calculating loss
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)) + \
        lambda_val * tf.nn.l2_loss(weights1) + lambda_val * tf.nn.l2_loss(weights2)
        
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1),weights2)+biases2)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1),weights2)+biases2)


    



In [22]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [23]:

    
#trying learning rate decay
batch_size = 128
image_size = 28
num_labels = 10
hidden1_layer_nodes = 1024
hidden2_layer_nodes = 100
lambda_val = 0.001

graph = tf.Graph()
with graph.as_default():
    
    #create place holders for taking training input
    tf_train_dataset = tf.placeholder(dtype=tf.float32,shape=(batch_size,image_size*image_size))
    tf_train_labels = tf.placeholder(dtype=tf.float32,shape=(batch_size,num_labels))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    keep_prob = tf.constant(0.5)
    # Variables for computing first hidden layer nodes values
    weights1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1_layer_nodes]))
    biases1 = tf.Variable(tf.zeros([hidden1_layer_nodes]))
    hidden1_layer_data = tf.nn.dropout(tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1),keep_prob)
    
    # Variables for computing second hidden layer nodes values
    weights2 = tf.Variable(
        tf.truncated_normal([hidden1_layer_nodes, hidden2_layer_nodes]))
    biases2 = tf.Variable(tf.zeros([hidden2_layer_nodes]))
    hidden2_layer_data = tf.nn.dropout(tf.nn.relu(tf.matmul(hidden1_layer_data,weights2)+biases2),keep_prob)
    
    #variables for computing logits for the output layer
    weights3 = tf.Variable(
        tf.truncated_normal([hidden2_layer_nodes, num_labels]))
    biases3 = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden2_layer_data,weights3)+biases3
    
    
    global_steps = tf.Variable(0,trainable=False)
    learning_rate = tf.train.exponential_decay(learning_rate=0.5,global_step=global_steps,decay_rate=0.9,decay_steps=5000,)
    #calculating loss
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits))
        
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    
    test_hidden2_layer_act = tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1),weights2)+biases2
    test_prediction = tf.nn.softmax(tf.matmul(test_hidden2_layer_act,weights3)+biases3)
    
    valid_hidden2_layer_act = tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1),weights2)+biases2
    valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden2_layer_act,weights3)+biases3)


    



In [24]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [29]:

    
#appliying proper weight initialization technique
#trying learning rate decay
batch_size = 128
image_size = 28
num_labels = 10
hidden1_layer_nodes = 1024
hidden2_layer_nodes = 100

graph = tf.Graph()
with graph.as_default():
    
    #create place holders for taking training input
    tf_train_dataset = tf.placeholder(dtype=tf.float32,shape=(batch_size,image_size*image_size))
    tf_train_labels = tf.placeholder(dtype=tf.float32,shape=(batch_size,num_labels))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    
    # Variables for computing first hidden layer nodes values
    weights1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1_layer_nodes],stddev=np.sqrt(2.0 / (image_size * image_size+hidden1_layer_nodes))))
    biases1 = tf.Variable(tf.zeros([hidden1_layer_nodes]))
    hidden1_layer_data = tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1)
    
    # Variables for computing second hidden layer nodes values
    weights2 = tf.Variable(
        tf.truncated_normal([hidden1_layer_nodes, hidden2_layer_nodes],stddev=np.sqrt(2.0 / (hidden1_layer_nodes+hidden1_layer_nodes))))
    biases2 = tf.Variable(tf.zeros([hidden2_layer_nodes]))
    hidden2_layer_data = tf.nn.relu(tf.matmul(hidden1_layer_data,weights2)+biases2)
    
    #variables for computing logits for the output layer
    weights3 = tf.Variable(
        tf.truncated_normal([hidden2_layer_nodes, num_labels],stddev=np.sqrt(2.0 / (hidden2_layer_nodes+num_labels))))
    biases3 = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden2_layer_data,weights3)+biases3
    
    
    global_steps = tf.Variable(0,trainable=False)
    learning_rate = tf.train.exponential_decay(learning_rate=0.2,global_step=global_steps,decay_rate=0.8,decay_steps=2000,staircase=True)
    #calculating loss
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)) + \
        lambda_val*tf.nn.l2_loss(weights1) + lambda_val*tf.nn.l2_loss(weights2) + lambda_val*tf.nn.l2_loss(weights3)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    
    test_hidden2_layer_act = tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1),weights2)+biases2
    test_prediction = tf.nn.softmax(tf.matmul(test_hidden2_layer_act,weights3)+biases3)
    
    valid_hidden2_layer_act = tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1),weights2)+biases2
    valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden2_layer_act,weights3)+biases3)


    



In [26]:

    
num_steps = 10000

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 5000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

