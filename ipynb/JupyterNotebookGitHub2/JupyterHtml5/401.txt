
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST_clean.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [51]:

    
# With gradient descent training, even this much data is prohibitive.
# Subset the training data for faster turnaround.
train_subset = 10000

graph = tf.Graph()
with graph.as_default():

  # Input data.
  # Load the training, validation and test data into constants that are
  # attached to the graph.
  tf_train_dataset = tf.constant(train_dataset[:train_subset, :])
  tf_train_labels = tf.constant(train_labels[:train_subset])
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  # These are the parameters that we are going to be training. The weight
  # matrix will be initialized using random values following a (truncated)
  # normal distribution. The biases get initialized to zero.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
    
  beta = tf.Variable(tf.zeros([1]))
  
  # Training computation.
  # We multiply the inputs with the weight matrix, and add biases. We compute
  # the softmax and cross-entropy (it's one operation in TensorFlow, because
  # it's very common, and it can be optimized). We take the average of this
  # cross-entropy across all training examples: that's our loss.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)
    )
  # The 5e-4 can be chosen via tuning, not through optimisation
  loss += 5e-4 * tf.nn.l2_loss(weights)
  
  # Optimizer.
  # We are going to find the minimum of this loss using gradient descent.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  # These are not part of training, but merely here so that we can report
  # accuracy figures as we train.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [52]:

    
num_steps = 801

def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])

with tf.Session(graph=graph) as session:
  # This is a one-time operation which ensures the parameters get initialized as
  # we described in the graph: random weights for the matrix, zeros for the
  # biases. 
  tf.initialize_all_variables().run()
  print('Initialized')
  for step in range(num_steps):
    # Run the computations. We tell .run() that we want to run the optimizer,
    # and get the loss value and the training predictions returned as numpy
    # arrays.
    _, l, predictions = session.run([optimizer, loss, train_prediction])
    if (step % 100 == 0):
      print('Loss at step %d: %f' % (step, l))
      print('Training accuracy: %.1f%%' % accuracy(
        predictions, train_labels[:train_subset, :]))
      # Calling .eval() on valid_prediction is basically like calling run(), but
      # just to get that one numpy array. Note that it recomputes all its graph
      # dependencies.
      print('Validation accuracy: %.1f%%' % accuracy(
        valid_prediction.eval(), valid_labels))
  print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [18]:

    
batch_size = 128
n_hidden_1 = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  



  weights_h1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_1]), 'w_in')
  biases_h1 = tf.Variable(tf.truncated_normal([n_hidden_1]), 'b_in')
      
  weights_out = tf.Variable(tf.truncated_normal([n_hidden_1, num_labels]), 'w_o')
  biases_out = tf.Variable(tf.zeros([num_labels]), 'b_o')
    
  layer_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights_h1), biases_h1))
  out_layer = tf.matmul(layer_1, weights_out) + biases_out
    

    
    
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(out_layer, tf_train_labels))
 
  loss += 5e-4 * tf.nn.l2_loss(weights_h1)
  loss += 5e-4 * tf.nn.l2_loss(weights_out)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  


  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(out_layer)
  
  valid_prediction = tf.nn.softmax(
            tf.matmul(
                tf.nn.relu(
                    tf.add(
                        tf.matmul(tf_valid_dataset, weights_h1),
                        biases_h1)),
                    weights_out) + biases_out
            )
    
  test_prediction = tf.nn.softmax(
            tf.matmul(
                tf.nn.relu(
                    tf.add(
                        tf.matmul(tf_test_dataset, weights_h1),
                        biases_h1)
                    ), weights_out) + biases_out)


    



In [57]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [21]:

    
num_steps = 3001
max_batches = 100

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    step_limited = step % max_batches
    offset = (step_limited * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [22]:

    
batch_size = 128
n_hidden_1 = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  



  weights_h1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_1]), 'w_in')
  biases_h1 = tf.Variable(tf.truncated_normal([n_hidden_1]), 'b_in')
      
  weights_out = tf.Variable(tf.truncated_normal([n_hidden_1, num_labels]), 'w_o')
  biases_out = tf.Variable(tf.zeros([num_labels]), 'b_o')
    
  layer_1 = tf.nn.dropout(
                tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights_h1), biases_h1)),
                0.5)
  out_layer = tf.matmul(layer_1, weights_out) + biases_out
    

    
    
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(out_layer, tf_train_labels))
 
  loss += 5e-4 * tf.nn.l2_loss(weights_h1)
  loss += 5e-4 * tf.nn.l2_loss(weights_out)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  


  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(out_layer)
  
  valid_prediction = tf.nn.softmax(
            tf.matmul(
                tf.nn.relu(
                    tf.add(
                        tf.matmul(tf_valid_dataset, weights_h1),
                        biases_h1)),
                    weights_out) + biases_out
            )
    
  test_prediction = tf.nn.softmax(
            tf.matmul(
                tf.nn.relu(
                    tf.add(
                        tf.matmul(tf_test_dataset, weights_h1),
                        biases_h1)
                    ), weights_out) + biases_out)


    



In [24]:

    
num_steps = 3001
max_batches = 100

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    step_limited = step % max_batches
    offset = (step_limited * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [73]:

    
batch_size = 128
n_hidden_1 = 1024

def new_wb(dimensions):
    weights = tf.Variable(tf.truncated_normal(dimensions))
    biases = tf.Variable(tf.truncated_normal(dimensions[1:]))
    return weights, biases

def create_weights(dimensions):
    result = []
    for i in range(len(dimensions) -1):
        result.append(new_wb(dimensions[i:i+2]))
    return result

def create_nn(tensor_input, weights, layers):
    for i in range(len(layers)):
        
        # Get the weights and biases from the array
        w, b = weights[i]
        
        # (x * weights + biases)
        new_layer = tf.add(tf.matmul(tensor_input, w), b) 
        
        # Run the modifiers, like relu...
        modifiers = layers[i]
        if modifiers is not null:
            if len(modifiers) <> len(layers):
                raise Exception("Weights and layers should be the same size")
            for modifier in modifiers:
                new_layer = modifier(new_layer)
            
        tensor_input = new_layer

    return tensor_input
        
    

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
        
           
  weights = create_weights([image_size * image_size, n_hidden_1, num_labels])
  
  layers_train = [
      [tf.nn.relu, lambda x: tf.nn.dropout(x, 0.5)],
      [],
  ]
  #layers_train = [[tf.nn.relu, lambda x: tf.nn.dropout(x, 0.5)]]

  train_nn = create_nn(tf_train_dataset, weights, layers_train)

  # Loss function with l2
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(train_nn, tf_train_labels)) 
  # Add l2 loss
  for w, b in weights:
        loss += 5e-4 * tf.nn.l2_loss(w) # + 5e-4 * tf.nn.l2_loss(b)
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.25).minimize(loss)


  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(train_nn)

  layers_test_validation = [
      [tf.nn.relu],
      [],
  ]
  #layers_test_validation = [[]]
  
  valid_prediction = tf.nn.softmax(create_nn(tf_valid_dataset, weights, layers_test_validation))
  test_prediction = tf.nn.softmax(create_nn(tf_test_dataset, weights, layers_test_validation))


    



In [72]:

    
num_steps = 3001
max_batches = 100000
    
with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    step_limited = step % max_batches
    offset = (step_limited * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    



In [ ]:

    
 


    

