
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
# With gradient descent training, even this much data is prohibitive.
# Subset the training data for faster turnaround.
reg = 0.01
batch_size = 128
graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32,shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    # Variables.
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)
        + reg*(tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases))
    )
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 128
hidden1 = 1024
graph = tf.Graph()
#define a forward function 
def forward(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    return tf.matmul(Z1,W2) + b2

with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    #weights 
    W1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1])
    )
    b1 = tf.Variable(tf.zeros([hidden1]))
    W2 = tf.Variable(
        tf.truncated_normal([hidden1,num_labels])
    )
    b2 = tf.Variable(tf.zeros([num_labels]))
    # Training computation
    logits_train = forward(tf_train_dataset,W1,b1,W2,b2)
    logits_valid = forward(tf_valid_dataset,W1,b1,W2,b2)
    logits_test = forward(tf_test_dataset,W1,b1,W2,b2)
    cost = tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits_train)
    reg_cost = tf.nn.l2_loss(W1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(b2)
    loss = tf.reduce_mean(cost + reg*reg_cost)
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_train)
    valid_prediction = tf.nn.softmax(logits_valid)
    test_prediction = tf.nn.softmax(logits_test)


    



In [8]:

    
num_steps = 10000
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
batch_size = 5000
hidden1 = 1024
graph = tf.Graph()
#define a forward function 
def forward(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    return tf.matmul(Z1,W2) + b2

with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    #weights 
    W1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1])
    )
    b1 = tf.Variable(tf.zeros([hidden1]))
    W2 = tf.Variable(
        tf.truncated_normal([hidden1,num_labels])
    )
    b2 = tf.Variable(tf.zeros([num_labels]))
    # Training computation
    logits_train = forward(tf_train_dataset,W1,b1,W2,b2)
    logits_valid = forward(tf_valid_dataset,W1,b1,W2,b2)
    logits_test = forward(tf_test_dataset,W1,b1,W2,b2)
    cost = tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits_train)
    reg_cost = tf.nn.l2_loss(W1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(b2)
    loss = tf.reduce_mean(cost + reg*reg_cost)
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_train)
    valid_prediction = tf.nn.softmax(logits_valid)
    test_prediction = tf.nn.softmax(logits_test)


    



In [12]:

    
num_steps = 10000
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [16]:

    
batch_size = 5000
hidden1 = 1024
graph = tf.Graph()
#define a forward function 
def forward_train(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    Z2 = tf.matmul(Z1,W2) + b2
    return tf.nn.dropout(Z2,0.5)
def forward_predict(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    return tf.matmul(Z1,W2) + b2

with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    #weights 
    W1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1])
    )
    b1 = tf.Variable(tf.zeros([hidden1]))
    W2 = tf.Variable(
        tf.truncated_normal([hidden1,num_labels])
    )
    b2 = tf.Variable(tf.zeros([num_labels]))
    # Training computation
    logits = forward_train(tf_train_dataset,W1,b1,W2,b2)
    logits_train = forward_predict(tf_train_dataset,W1,b1,W2,b2)
    logits_valid = forward_predict(tf_valid_dataset,W1,b1,W2,b2)
    logits_test = forward_predict(tf_test_dataset,W1,b1,W2,b2)
    cost = tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)
    reg_cost = tf.nn.l2_loss(W1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(b2)
    loss = tf.reduce_mean(cost + reg*reg_cost)
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    train_prediction = tf.nn.softmax(logits_train)
    valid_prediction = tf.nn.softmax(logits_valid)
    test_prediction = tf.nn.softmax(logits_test)


    



In [17]:

    
num_steps = 5000
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [22]:

    
batch_size = 5000
hidden1 = 1024
graph = tf.Graph()
#define a forward function 
def forward_train(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    Z2 = tf.matmul(Z1,W2) + b2
    return tf.nn.dropout(Z2,0.5)
def forward_predict(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    return tf.matmul(Z1,W2) + b2

with graph.as_default():
    global_step = tf.Variable(0, trainable=False)
    starter_learning_rate = 0.5
    learning_rate = tf.train.exponential_decay(starter_learning_rate, global_step,
                                           100000, 0.96, staircase=True)
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    #weights 
    W1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1])
    )
    b1 = tf.Variable(tf.zeros([hidden1]))
    W2 = tf.Variable(
        tf.truncated_normal([hidden1,num_labels])
    )
    b2 = tf.Variable(tf.zeros([num_labels]))
    # Training computation
    logits = forward_train(tf_train_dataset,W1,b1,W2,b2)
    logits_train = forward_predict(tf_train_dataset,W1,b1,W2,b2)
    logits_valid = forward_predict(tf_valid_dataset,W1,b1,W2,b2)
    logits_test = forward_predict(tf_test_dataset,W1,b1,W2,b2)
    cost = tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)
    reg_cost = tf.nn.l2_loss(W1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(b2)
    loss = tf.reduce_mean(cost + reg*reg_cost)
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=global_step)
    train_prediction = tf.nn.softmax(logits_train)
    valid_prediction = tf.nn.softmax(logits_valid)
    test_prediction = tf.nn.softmax(logits_test)


    



In [23]:

    
num_steps = 2000
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [43]:

    
batch_size = 1000
hidden1 = 1024
graph = tf.Graph()
#define a forward function 
def forward_train(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    Z2 = tf.matmul(Z1,W2) + b2
    return tf.nn.dropout(Z2,0.5)
def forward_predict(tf_X,W1,b1,W2,b2):
    Z1 = tf.nn.relu(tf.matmul(tf_X,W1) + b1)
    return tf.matmul(Z1,W2) + b2

with graph.as_default():
    global_step = tf.Variable(0, trainable=False)
    starter_learning_rate = 0.5
    learning_rate = tf.train.exponential_decay(starter_learning_rate, global_step,
                                           100000, 0.96, staircase=True)
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    #weights 
    W1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1])
    )
    b1 = tf.Variable(tf.zeros([hidden1]))
    W2 = tf.Variable(
        tf.truncated_normal([hidden1,num_labels])
    )
    b2 = tf.Variable(tf.zeros([num_labels]))
    # Training computation
    logits = forward_train(tf_train_dataset,W1,b1,W2,b2)
    logits_train = forward_predict(tf_train_dataset,W1,b1,W2,b2)
    logits_valid = forward_predict(tf_valid_dataset,W1,b1,W2,b2)
    logits_test = forward_predict(tf_test_dataset,W1,b1,W2,b2)
    cost = tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,logits=logits)
    reg_cost = tf.nn.l2_loss(W1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(b2)
    loss = tf.reduce_mean(cost + reg*reg_cost)
    # Optimizer
    optimizer = tf.train.RMSPropOptimizer(learning_rate=1e-4,decay=0.999,momentum=0.9).minimize(loss)
    train_prediction = tf.nn.softmax(logits_train)
    valid_prediction = tf.nn.softmax(logits_valid)
    test_prediction = tf.nn.softmax(logits_test)


    



In [44]:

    
num_steps = 10000
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    

