
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
import math


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128
hidden_size = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_size], stddev=math.sqrt(2./(image_size*image_size))))
  biases1 = tf.Variable(tf.zeros([hidden_size]))

  weights2 = tf.Variable(
    tf.truncated_normal([hidden_size, num_labels], stddev=math.sqrt(2./hidden_size)))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  pre_act = tf.matmul(tf_train_dataset, weights1) + biases1
  post_act = tf.nn.relu(pre_act)
  
  logits = tf.matmul(post_act, weights2) + biases2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))


  regularizers = (tf.nn.l2_loss(weights1) + tf.nn.l2_loss(biases1) +
                  tf.nn.l2_loss(weights2) + tf.nn.l2_loss(biases2))
  loss += 1e-4 * regularizers

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights1) + biases1), weights2)+biases2
    )
  test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights1) + biases1), weights2)+biases2
    )


    



In [6]:

    
num_steps = 30001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 3000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
train_dataset_extreme = train_dataset[:256]
train_labels_extreme = train_labels[:256]

num_steps = 30001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_extreme.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_extreme[offset:(offset + batch_size), :]
    batch_labels = train_labels_extreme[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 3000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [8]:

    
batch_size = 128
hidden_size = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_size], stddev=math.sqrt(2./(image_size*image_size))))
  biases1 = tf.Variable(tf.zeros([hidden_size]))

  weights2 = tf.Variable(
    tf.truncated_normal([hidden_size, num_labels], stddev=math.sqrt(2./hidden_size)))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  tf_train_dataset = tf.nn.dropout(tf_train_dataset, 0.8)
  pre_act = tf.matmul(tf_train_dataset, weights1) + biases1
  post_act = tf.nn.relu(pre_act)
  dropout_layer1 = tf.nn.dropout(post_act, 0.6)

  logits = tf.matmul(dropout_layer1, weights2) + biases2
    
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))


  regularizers = (tf.nn.l2_loss(weights1) + tf.nn.l2_loss(biases1) +
                  tf.nn.l2_loss(weights2) + tf.nn.l2_loss(biases2))
  loss += 1e-4 * regularizers

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights1) + biases1), weights2)+biases2
    )
  test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights1) + biases1), weights2)+biases2
    )


    



In [9]:

    
num_steps = 30001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 3000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [10]:

    
train_dataset_extreme = train_dataset[:256]
train_labels_extreme = train_labels[:256]

num_steps = 30001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_extreme.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_extreme[offset:(offset + batch_size), :]
    batch_labels = train_labels_extreme[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 3000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [13]:

    
batch_size = 128
hidden_size1 = 1024
hidden_size2 = 512
hidden_size3 = 256
hidden_size4 = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_size1], stddev=math.sqrt(2./(image_size*image_size))))
  biases1 = tf.Variable(tf.zeros([hidden_size1]))

  weights2 = tf.Variable(
    tf.truncated_normal([hidden_size1, hidden_size2], stddev=math.sqrt(2./hidden_size1)))
  biases2 = tf.Variable(tf.zeros([hidden_size2]))

  weights3 = tf.Variable(
    tf.truncated_normal([hidden_size2, hidden_size3], stddev=math.sqrt(2./hidden_size2)))
  biases3 = tf.Variable(tf.zeros([hidden_size3]))

  weights4 = tf.Variable(
    tf.truncated_normal([hidden_size3, hidden_size4], stddev=math.sqrt(2./hidden_size3)))
  biases4 = tf.Variable(tf.zeros([hidden_size4]))
    
  weights5 = tf.Variable(
    tf.truncated_normal([hidden_size4, num_labels], stddev=math.sqrt(2./hidden_size4)))
  biases5 = tf.Variable(tf.zeros([num_labels]))
  
  
  # Training computation.
  tf_train_dataset = tf.nn.dropout(tf_train_dataset, 0.8)
  pre_act1 = tf.matmul(tf_train_dataset, weights1) + biases1
  post_act1 = tf.nn.relu(pre_act1)
  dropout_layer1 = tf.nn.dropout(post_act1, 0.8)

  pre_act2 = tf.matmul(dropout_layer1, weights2) + biases2
  post_act2 = tf.nn.relu(pre_act2)
  dropout_layer2 = tf.nn.dropout(post_act2, 0.8)

  pre_act3 = tf.matmul(dropout_layer2, weights3) + biases3
  post_act3 = tf.nn.relu(pre_act3)
  dropout_layer3 = tf.nn.dropout(post_act3, 0.8)

  pre_act4 = tf.matmul(dropout_layer3, weights4) + biases4
  post_act4 = tf.nn.relu(pre_act4)
  dropout_layer4 = tf.nn.dropout(post_act4, 0.8)
    
  logits = tf.matmul(dropout_layer4, weights5) + biases5

  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))


  regularizers = (tf.nn.l2_loss(weights1) + tf.nn.l2_loss(biases1) +
                  tf.nn.l2_loss(weights2) + tf.nn.l2_loss(biases2) +
                  tf.nn.l2_loss(weights3) + tf.nn.l2_loss(biases3) +
                  tf.nn.l2_loss(weights4) + tf.nn.l2_loss(biases4) +
                  tf.nn.l2_loss(weights5) + tf.nn.l2_loss(biases5) )
  loss += 1e-4 * regularizers
  
  optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss)

  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)


  valid_pre_act1 = tf.matmul(tf_valid_dataset, weights1) + biases1
  valid_post_act1 = tf.nn.relu(valid_pre_act1)
  valid_pre_act2 = tf.matmul(valid_post_act1, weights2) + biases2
  valid_post_act2 = tf.nn.relu(valid_pre_act2)
  valid_pre_act3 = tf.matmul(valid_post_act2, weights3) + biases3
  valid_post_act3 = tf.nn.relu(valid_pre_act3)  
  valid_pre_act4 = tf.matmul(valid_post_act3, weights4) + biases4
  valid_post_act4 = tf.nn.relu(valid_pre_act4)  
  valid_prediction = tf.nn.softmax( tf.matmul(valid_post_act4, weights5) + biases5 )
    
  test_pre_act1 = tf.matmul(tf_test_dataset, weights1) + biases1
  test_post_act1 = tf.nn.relu(test_pre_act1)
  test_pre_act2 = tf.matmul(test_post_act1, weights2) + biases2
  test_post_act2 = tf.nn.relu(test_pre_act2)
  test_pre_act3 = tf.matmul(test_post_act2, weights3) + biases3
  test_post_act3 = tf.nn.relu(test_pre_act3)   
  test_pre_act4 = tf.matmul(test_post_act3, weights4) + biases4
  test_post_act4 = tf.nn.relu(test_pre_act4)     
  test_prediction = tf.nn.softmax( tf.matmul(test_post_act4, weights5) + biases5 )
    


    



In [14]:

    
num_steps = 140001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 14000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

