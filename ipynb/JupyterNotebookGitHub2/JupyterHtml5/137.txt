
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128

graph_logreg = tf.Graph()
with graph_logreg.as_default():

  # Input data. 
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
#   norm_weights = 0.01 * tf.nn.l2_loss(weights)
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
#   loss_2 = tf.reduce_mean(norm_weights)
  loss_2 = 0.1 * tf.nn.l2_loss(weights) / batch_size
  loss = loss + loss_2
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [8]:

    
batch_size = 128
hidden_nodes = 1024

graph_nn = tf.Graph()

with graph_nn.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size,num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables
    weights1 = tf.Variable(
                tf.truncated_normal([image_size * image_size, hidden_nodes]))
    weights2 = tf.Variable(
                tf.truncated_normal([hidden_nodes, num_labels]))
    biases1 = tf.Variable(tf.zeros([hidden_nodes]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
#     weights_concat = tf.concat(0,[weights1,tf.transpose(weights2)])
#     norm_weights = 0.01 * tf.nn.l2_loss(weights_concat)
    
    # Training
    hidden = tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1)
    logits = tf.matmul(hidden,weights2)+biases2
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                            logits, tf_train_labels))
#     loss_2 = tf.reduce_mean(norm_weights)
    loss_2 = 0.1 * (tf.nn.l2_loss(weights1) + 
                   tf.nn.l2_loss(weights2)) / batch_size
    loss = loss + loss_2
    
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
                        tf.matmul(
                            tf.nn.relu(tf.matmul(tf_valid_dataset, weights1) + biases1),
                            weights2)
                        +biases2)
    test_prediction = tf.nn.softmax(
                        tf.matmul(
                            tf.nn.relu(tf.matmul(tf_test_dataset, weights1) + biases1),
                            weights2)
                        +biases2)
    


    



In [9]:

    
#Let's' run it
graph_selected = graph_nn


    



In [10]:

    
num_steps = 3001

with tf.Session(graph=graph_selected) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [12]:

    
batch_size = 128
hidden_nodes = 1024

graph_nn = tf.Graph()

with graph_nn.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size,num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables
    weights1 = tf.Variable(
                tf.truncated_normal([image_size * image_size, hidden_nodes]))
    weights2 = tf.Variable(
                tf.truncated_normal([hidden_nodes, num_labels]))
    biases1 = tf.Variable(tf.zeros([hidden_nodes]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
#     weights_concat = tf.concat(0,[weights1,tf.transpose(weights2)])
#     norm_weights = 0.01 * tf.nn.l2_loss(weights_concat)
    
    # Training
    hidden = tf.nn.relu(tf.matmul(tf_train_dataset,weights1)+biases1)
    logits = tf.matmul(hidden,weights2)+biases2
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                            logits, tf_train_labels))
#     loss_2 = tf.reduce_mean(norm_weights)
    loss_2 = 0.1 * (tf.nn.l2_loss(weights1) + 
                   tf.nn.l2_loss(weights2)) / batch_size
    loss = loss + loss_2
    
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
                        tf.matmul(
                            tf.nn.relu(tf.matmul(tf_valid_dataset, weights1) + biases1),
                            weights2)
                        +biases2)
    test_prediction = tf.nn.softmax(
                        tf.matmul(
                            tf.nn.relu(tf.matmul(tf_test_dataset, weights1) + biases1),
                            weights2)
                        +biases2)
    
    num_steps = 3001

with tf.Session(graph=graph_nn) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
#     offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    offset = batch_size * np.random.choice(np.arange(5))
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [46]:

    
batch_size = 128
hidden_nodes = 1024

graph_nn_dropout = tf.Graph()

with graph_nn_dropout.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size,num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables
    weights1 = tf.Variable(
                tf.truncated_normal([image_size * image_size, hidden_nodes],stddev=0.03))
    weights2 = tf.Variable(
                tf.truncated_normal([hidden_nodes, num_labels],stddev=0.03))
    biases1 = tf.Variable(tf.zeros([hidden_nodes]))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    
    keep_prob = 0.5
    drop1 = tf.nn.dropout(tf_train_dataset,keep_prob)
#     drop1 = tf_train_dataset
    activations = tf.nn.relu(tf.matmul(drop1,weights1)+biases1)
    drop2 = tf.nn.dropout(activations,keep_prob)
    
    # Training
    logits = tf.matmul(drop2,weights2)+biases2
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                            logits, tf_train_labels))
    
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
                        tf.matmul(
                            tf.nn.relu(tf.matmul(tf_valid_dataset, weights1) + biases1),
                            weights2)
                        +biases2)
    test_prediction = tf.nn.softmax(
                        tf.matmul(
                            tf.nn.relu(tf.matmul(tf_test_dataset, weights1) + biases1),
                            weights2)
                        +biases2)


    



In [47]:

    
num_steps = 3001

with tf.Session(graph=graph_nn_dropout) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
#     offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    offset = batch_size * np.random.choice(np.arange(5))
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [58]:

    
batch_size = 128
hidden_nodes = 1024

graph_nn_3 = tf.Graph()

with graph_nn_3.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size,num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables
    weights1 = tf.Variable(
                tf.truncated_normal([image_size * image_size, hidden_nodes],stddev=0.01))
    weights2 = tf.Variable(
                tf.truncated_normal([hidden_nodes, hidden_nodes],stddev=0.01))
    weights3 = tf.Variable(
                tf.truncated_normal([hidden_nodes, num_labels],stddev=0.01))
    biases1 = tf.Variable(tf.zeros([hidden_nodes]))
    biases2 = tf.Variable(tf.zeros([hidden_nodes]))
    biases3 = tf.Variable(tf.zeros([num_labels]))
    
    keep_prob = 0.5
    drop0 = tf.nn.dropout(tf_train_dataset,keep_prob)
#     drop1 = tf_train_dataset
    activations1 = tf.nn.relu(tf.matmul(drop0,weights1)+biases1)
    drop1 = tf.nn.dropout(activations1,keep_prob)
    activations2 = tf.nn.relu(tf.matmul(drop1,weights2)+biases2)
    drop2 = tf.nn.dropout(activations2,keep_prob)
#     activations3 = tf.nn.relu(tf.matmul(drop2,weights3)+biases3)
    
    # Training
    logits = tf.matmul(drop2,weights3)+biases3
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                            logits, tf_train_labels))
    
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_hidden1 = tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1)
    valid_hidden2 = tf.nn.relu(tf.matmul(valid_hidden1,weights2)+biases2)
    valid_prediction = tf.nn.softmax(
                        tf.matmul(valid_hidden2,weights3)+biases3)
    
    test_hidden1 = tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1)
    test_hidden2 = tf.nn.relu(tf.matmul(test_hidden1,weights2)+biases2)
    test_prediction = tf.nn.softmax(
                        tf.matmul(test_hidden2,weights3)+biases3)


    



In [105]:

    
batch_size = 128
hidden_nodes_1 = 1024
hidden_nodes_2 = 500
hidden_nodes_3 = 50

graph_nn_4 = tf.Graph()

with graph_nn_4.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size,num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables
    weights1 = tf.Variable(
                tf.truncated_normal([image_size * image_size, hidden_nodes_1],stddev=0.01))
    weights2 = tf.Variable(
                tf.truncated_normal([hidden_nodes_1, hidden_nodes_2],stddev=0.01))
    weights3 = tf.Variable(
                tf.truncated_normal([hidden_nodes_2, hidden_nodes_3],stddev=0.01))
    weights4 = tf.Variable(
                tf.truncated_normal([hidden_nodes_3, num_labels],stddev=0.01))
    biases1 = tf.Variable(tf.zeros([hidden_nodes_1]))
    biases2 = tf.Variable(tf.zeros([hidden_nodes_2]))
    biases3 = tf.Variable(tf.zeros([hidden_nodes_3]))
    biases4 = tf.Variable(tf.zeros([num_labels]))
    
    keep_prob = 0.5
    drop0 = tf.nn.dropout(tf_train_dataset,keep_prob)
#     drop1 = tf_train_dataset
    activations1 = tf.nn.relu(tf.matmul(drop0,weights1)+biases1)
    drop1 = tf.nn.dropout(activations1,keep_prob)
    activations2 = tf.nn.relu(tf.matmul(drop1,weights2)+biases2)
    drop2 = tf.nn.dropout(activations2,keep_prob)
    activations3 = tf.nn.relu(tf.matmul(drop2,weights3)+biases3)
    drop3 = tf.nn.dropout(activations3,keep_prob)
    
    # Training
    logits = tf.matmul(drop3,weights4)+biases4
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                            logits, tf_train_labels))
    
    # Optimizer
    global_step = tf.Variable(0)  # count the number of steps taken.
    learning_rate = tf.train.exponential_decay(0.2, global_step, 1000, 0.86, staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
#     optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_hidden1 = tf.nn.relu(tf.matmul(tf_valid_dataset,weights1)+biases1)
    valid_hidden2 = tf.nn.relu(tf.matmul(valid_hidden1,weights2)+biases2)
    valid_hidden3 = tf.nn.relu(tf.matmul(valid_hidden2,weights3)+biases3)
    valid_prediction = tf.nn.softmax(
                        tf.matmul(valid_hidden3,weights4)+biases4)
    
    test_hidden1 = tf.nn.relu(tf.matmul(tf_test_dataset,weights1)+biases1)
    test_hidden2 = tf.nn.relu(tf.matmul(test_hidden1,weights2)+biases2)
    test_hidden3 = tf.nn.relu(tf.matmul(test_hidden2,weights3)+biases3)
    test_prediction = tf.nn.softmax(
                        tf.matmul(test_hidden3,weights4)+biases4)


    



In [106]:

    
num_steps = 24001

with tf.Session(graph=graph_nn_4) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
#     offset = batch_size * np.random.choice(np.arange(5))
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

