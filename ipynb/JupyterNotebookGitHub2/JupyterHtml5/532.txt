
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [10]:

    
batch_size = 128
hidden_nodes_layer_1 = 1024
learning_rate = .2

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_regularization_ammount = tf.placeholder(tf.float32)
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights_layer_1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes_layer_1]))
  biases_layer_1 = tf.Variable(tf.zeros([hidden_nodes_layer_1]))
    
  
  weights_layer_2 = tf.Variable(
    tf.truncated_normal([hidden_nodes_layer_1, num_labels]))
  biases_layer_2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  ouput_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights_layer_1), biases_layer_1))

  logits = tf.add(tf.matmul(ouput_1,weights_layer_2),biases_layer_2)
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(
            logits, tf_train_labels))+ tf_regularization_ammount*tf.nn.l2_loss(weights_layer_1)+ tf_regularization_ammount*tf.nn.l2_loss(weights_layer_2)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.add(
    tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_layer_1), biases_layer_1)),weights_layer_2),biases_layer_2))

  test_prediction = tf.nn.softmax(tf.add(
    tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_layer_1), biases_layer_1)),weights_layer_2),biases_layer_2))


    



In [11]:

    
num_steps = 1001
regularization_amount = 0.002

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    indexes = np.random.choice(train_labels.shape[0], batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[indexes, :]
    batch_labels = train_labels[indexes, :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,tf_regularization_ammount : regularization_amount}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [12]:

    
batch_size = 128
hidden_nodes_layer_1 = 1024
learning_rate = .2
num_steps = 1001
regularization_amount = 0.1

size_truncated_dataset = 1000
indexes = np.random.choice(train_labels.shape[0],size_truncated_dataset)
train_dataset_truncated = train_dataset[indexes, :]
train_labels_truncated = train_labels[indexes, :]
print('Training set truncated:', train_dataset_truncated.shape, train_labels_truncated.shape)

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_regularization_ammount = tf.placeholder(tf.float32)
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights_layer_1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes_layer_1]))
  biases_layer_1 = tf.Variable(tf.zeros([hidden_nodes_layer_1]))
    
  
  weights_layer_2 = tf.Variable(
    tf.truncated_normal([hidden_nodes_layer_1, num_labels]))
  biases_layer_2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  ouput_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights_layer_1), biases_layer_1))
  logits = tf.matmul(ouput_1,weights_layer_2)+biases_layer_2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(
            logits, tf_train_labels))+ tf_regularization_ammount*tf.nn.l2_loss(weights_layer_1)+ tf_regularization_ammount*tf.nn.l2_loss(weights_layer_2)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_layer_1) + biases_layer_1),weights_layer_2)+biases_layer_2)

  test_prediction = tf.nn.softmax(
    tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_layer_1) + biases_layer_1),weights_layer_2)+biases_layer_2)



with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    indexes = np.random.choice(train_labels_truncated.shape[0], batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_truncated[indexes, :]
    batch_labels = train_labels_truncated[indexes, :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,tf_regularization_ammount : regularization_amount}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [13]:

    
batch_size = 128
hidden_nodes_layer_1 = 1024
learning_rate = .02
num_steps = 1001
keep_prob_dropout = 0.1
size_truncated_dataset = 1000

indexes = np.random.choice(train_labels.shape[0],size_truncated_dataset)
train_dataset_truncated = train_dataset[indexes, :]
train_labels_truncated = train_labels[indexes, :]

print('Training set truncated:', train_dataset_truncated.shape, train_labels_truncated.shape)

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_regularization_ammount = tf.placeholder(tf.float32)
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights_layer_1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes_layer_1]))
  biases_layer_1 = tf.Variable(tf.zeros([hidden_nodes_layer_1]))
    
  
  weights_layer_2 = tf.Variable(
    tf.truncated_normal([hidden_nodes_layer_1, num_labels]))
  biases_layer_2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  ouput_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights_layer_1), biases_layer_1))
  tf_keep_prob_dropout = tf.placeholder("float")
  ouput_1_drop = tf.nn.dropout(ouput_1, tf_keep_prob_dropout)
  
  logits = tf.matmul(ouput_1_drop,weights_layer_2)+biases_layer_2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(
            logits, tf_train_labels))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_layer_1) + biases_layer_1),weights_layer_2)+biases_layer_2)

  test_prediction = tf.nn.softmax(
    tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_layer_1) + biases_layer_1),weights_layer_2)+biases_layer_2)


with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    indexes = np.random.choice(train_labels_truncated.shape[0], batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_truncated[indexes, :]
    batch_labels = train_labels_truncated[indexes, :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,tf_keep_prob_dropout : keep_prob_dropout}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [24]:

    
batch_size = 128
hidden_nodes_layer_1 = 1024
hidden_nodes_layer_2 = 2048
learning_rate = .02
num_steps = 4000
keep_prob_dropout = 0.85


graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_regularization_ammount = tf.placeholder(tf.float32)
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)

  def multilayer_perceptron(_X, _weights, _biases,dropout=0):
    layer_1 = tf.nn.relu(tf.add(tf.matmul(_X, _weights['h1']), _biases['b1'])) #Hidden layer with RELU activation
    if dropout:
        layer_1 = tf.nn.dropout(layer_1, keep_prob_dropout)
    
    layer_2 = tf.nn.relu(tf.add(tf.matmul(layer_1, _weights['h2']), _biases['b2'])) #Hidden layer with RELU activation
    if dropout:
        layer_2 = tf.nn.dropout(layer_2, keep_prob_dropout)
    return tf.add(tf.matmul(layer_2, _weights['out']), _biases['out'])

  # Store layers weight & bias
  weights = {
      'h1': tf.Variable(tf.random_normal([image_size * image_size, hidden_nodes_layer_1])),
      'h2': tf.Variable(tf.random_normal([hidden_nodes_layer_1, hidden_nodes_layer_2])),
      'out': tf.Variable(tf.random_normal([hidden_nodes_layer_2, num_labels]))
  }
  biases = {
    'b1': tf.Variable(tf.random_normal([hidden_nodes_layer_1])),
    'b2': tf.Variable(tf.random_normal([hidden_nodes_layer_2])),
    'out': tf.Variable(tf.random_normal([num_labels]))
  }
  
  
  logits = multilayer_perceptron(tf_train_dataset, weights, biases,1)
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(
            logits, tf_train_labels))
  
  # Optimizer.
#  learning_rate = tf.train.exponential_decay(starter_learning_rate, global_step,
#                                             30, learning_rate_decay, staircase=True)
  optimizer = tf.train.AdagradOptimizer(learning_rate).minimize(loss)
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    multilayer_perceptron(tf_valid_dataset, weights, biases))

  test_prediction = tf.nn.softmax(multilayer_perceptron(tf_test_dataset, weights, biases))


with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    indexes = np.random.choice(train_labels.shape[0], batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[indexes, :]
    batch_labels = train_labels[indexes, :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [36]:

    
batch_size = 128
hidden_nodes_layer_1 = 1024
hidden_nodes_layer_2 = num_labels
starter_learning_rate = .5
num_steps = 3001
keep_prob_dropout = 0.5
learning_rate_decay = .96
print('Training set :', train_dataset.shape, train_labels.shape)

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights_layer_1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes_layer_1]))
  biases_layer_1 = tf.Variable(tf.zeros([hidden_nodes_layer_1]))
    
  
  weights_layer_2 = tf.Variable(
    tf.truncated_normal([hidden_nodes_layer_1, hidden_nodes_layer_2]))
  biases_layer_2 = tf.Variable(tf.zeros([hidden_nodes_layer_2]))
  
  weights_out = tf.Variable(
    tf.truncated_normal([hidden_nodes_layer_2, num_labels]))
  
  biases_out = tf.Variable(tf.zeros([num_labels]))
  # Training computation.
  ouput_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights_layer_1), biases_layer_1))
  #output_1 = tf.contrib.layers.fully_connected(
  #  tf_train_dataset,hidden_nodes_layer_1,tf.nn.relu)
  
  ouput_1_drop = tf.nn.dropout(ouput_1, keep_prob_dropout)
  
  ouput_2 = tf.nn.relu(tf.add(tf.matmul(ouput_1_drop, weights_layer_2), biases_layer_2))
  ouput_2_drop = tf.nn.dropout(ouput_2, keep_prob_dropout)

  logits = tf.add(tf.matmul(ouput_2_drop,weights_out),biases_out)
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(
            logits, tf_train_labels))
  
  # Optimizer.
  step = tf.Variable(0, trainable=False)

  learning_rate = tf.train.exponential_decay(starter_learning_rate, step,
                                             30, learning_rate_decay, staircase=True)
  
  optimizer = tf.train.AdagradOptimizer(learning_rate).minimize(loss,global_step=step)
  step = step+1
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(
    tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_layer_1), biases_layer_1)),weights_layer_2),
                    biases_layer_2)),weights_out),biases_out))

  test_prediction =   tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(
    tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_layer_1), biases_layer_1)),weights_layer_2),
                    biases_layer_2)),weights_out),biases_out))

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    indexes = np.random.choice(train_labels.shape[0], batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[indexes, :]
    batch_labels = train_labels[indexes, :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      current_accuracy = accuracy(
        valid_prediction.eval(), valid_labels)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % current_accuracy)
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

