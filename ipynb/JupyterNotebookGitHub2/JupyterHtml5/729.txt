
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [7]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
# L2 regularization: Beta*(1/2) *norm(weights)[2 2] = Beta*(1/2)*(sum(weight**2)) = Beta*tf.nn.l2_loss(weights)
beta = 0.01
batch_size = 128
num_feature = image_size*image_size


graph = tf.Graph()

with graph.as_default():
    
    # Input
    tf_train_dataset = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_feature))
    tf_train_labels = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    
    #weight
    weights = tf.Variable(tf.truncated_normal([num_feature, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    
    #compute loss
    logits = tf.matmul(tf_train_dataset, weights) + biases
    
    #*******************IMPORTANT***********************
    regularizers = tf.nn.l2_loss(weights)
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = logits, labels = tf_train_labels)) + beta*regularizers
    #*******************IMPORTANT***********************
    
    
    #optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    #predict
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
# Run session, batch gradient descent (SGD)
num_step = 3001


with tf.Session(graph = graph) as session:
    #init variable
    tf.global_variables_initializer().run()
    print('Initialized')
    
    for step in range(num_step):
        
        #choose offset for the next batch
        offset = (step*batch_size) % (train_dataset.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        #feed the placeholder
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        
        #run
        _,l,predictions = session.run([optimizer, loss, train_prediction], feed_dict = feed_dict)
        
        if (step % 500) == 0:
            print('Minibatch loss at step %d: %f' %(step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
            
    print('-----------------')
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
        
    


    



In [7]:

    
# L2 regularization: Beta*(1/2) *norm(weights)[2 2] = Beta*(1/2)*(sum(weight**2)) = Beta*tf.nn.l2_loss(weights)
beta = 0.01
batch_size = 128
num_feature = image_size*image_size
num_hidden = 1024


graph = tf.Graph()

with graph.as_default():
    
    # Input
    tf_train_dataset = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_feature))
    tf_train_labels = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    
    #weight
    weights_1 = tf.Variable(tf.truncated_normal([num_feature, num_hidden]))
    biases_1 = tf.Variable(tf.zeros([num_hidden]))
    
    hidden = tf.matmul(tf_train_dataset, weights_1) + biases_1
    hidden = tf.nn.relu(hidden)
    
    weights_2 = tf.Variable(tf.truncated_normal([num_hidden, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
    
    #compute loss
    logits = tf.matmul(hidden, weights_2) + biases_2
    
    #*******************IMPORTANT***********************
    regularizers = tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = logits, labels = tf_train_labels)) + beta*regularizers
    #*******************IMPORTANT***********************
    
    
    #optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    #predict
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2)+ biases_2)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2)+ biases_2)


    



In [8]:

    
# Run session, batch gradient descent (SGD)
num_step = 3001


with tf.Session(graph = graph) as session:
    #init variable
    tf.global_variables_initializer().run()
    print('Initialized')
    
    for step in range(num_step):
        
        #choose offset for the next batch
        offset = (step*batch_size) % (train_dataset.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        #feed the placeholder
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        
        #run
        _,l,predictions = session.run([optimizer, loss, train_prediction], feed_dict = feed_dict)
        
        if (step % 500) == 0:
            print('Minibatch loss at step %d: %f' %(step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
            
    print('-----------------')
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
        
    


    



In [14]:

    
beta = 0.001
batch_size = 128
num_feature = image_size*image_size
num_hidden = 1024


graph = tf.Graph()

with graph.as_default():
    
    # Input
    tf_train_dataset = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_feature))
    tf_train_labels = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    
    #weight
    weights_1 = tf.Variable(tf.truncated_normal([num_feature, num_hidden]))
    biases_1 = tf.Variable(tf.zeros([num_hidden]))
    
    hidden = tf.matmul(tf_train_dataset, weights_1) + biases_1
    hidden = tf.nn.relu(hidden)
    
    weights_2 = tf.Variable(tf.truncated_normal([num_hidden, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
    
    #compute loss
    logits = tf.matmul(hidden, weights_2) + biases_2
    
    #*******************IMPORTANT***********************
    #regularizers = tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = logits, labels = tf_train_labels)) #+ beta*regularizers
    #*******************IMPORTANT***********************
    
    
    #optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    #predict
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2)+ biases_2)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2)+ biases_2)
    

    
# Run session, batch gradient descent (SGD)
num_step = 101 #important
num_batches = 3 #important

with tf.Session(graph = graph) as session:
    #init variable
    tf.global_variables_initializer().run()
    print('Initialized')
    
    for step in range(num_step):
        
        #choose offset for the next batch
        
        #important
        offset = ((step % num_batches)*batch_size) % (train_dataset.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        #feed the placeholder
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels}
        
        #run
        _,l,predictions = session.run([optimizer, loss, train_prediction], feed_dict = feed_dict)
        
        if (step % 2) == 0:
            print('Minibatch loss at step %d: %f' %(step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
            
    print('-----------------')
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
        


    



In [29]:

    
#Some different
#+ Dropout, keep_prob = 0.5
#+ stddev = 0.1 for weights_1, weights_2
#+ Number of step: 10 001

beta = 0.0001
batch_size = 128
num_feature = image_size*image_size
num_hidden = 1024


graph = tf.Graph()

with graph.as_default():
    
    # Input
    tf_train_dataset = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_feature))
    tf_train_labels = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    
    #weight
    weights_1 = tf.Variable(tf.truncated_normal([num_feature, num_hidden], stddev=0.1))
    biases_1 = tf.Variable(tf.zeros([num_hidden]))
    
    hidden = tf.matmul(tf_train_dataset, weights_1) + biases_1
    #add relu
    hidden = tf.nn.relu(hidden)
    
    #dropout
    keep_prob = tf.placeholder(dtype = tf.float32)
    hidden = tf.nn.dropout(hidden, keep_prob = keep_prob)
    
    weights_2 = tf.Variable(tf.truncated_normal([num_hidden, num_labels], stddev=0.1))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
    
    #compute loss
    logits = tf.matmul(hidden, weights_2) + biases_2
    
    #*******************IMPORTANT***********************
    regularizers = tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = logits, labels = tf_train_labels)) + beta*regularizers

    #*******************IMPORTANT***********************
    
    
    #optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    #predict
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2)+ biases_2)
    test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2)+ biases_2)


    



In [30]:

    
# Run session, batch gradient descent (SGD)
num_step = 10001


with tf.Session(graph = graph) as session:
    #init variable
    tf.global_variables_initializer().run()
    print('Initialized')
    
    for step in range(num_step):
        
        #choose offset for the next batch
        offset = (step*batch_size) % (train_dataset.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        #feed the placeholder
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, keep_prob:0.5}
        
        #run
        _,l,predictions = session.run([optimizer, loss, train_prediction], feed_dict = feed_dict)
        
        if (step % 500) == 0:
            print('Minibatch loss at step %d: %f' %(step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
            
    print('-----------------')
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [51]:

    
#ref: https://github.com/vanhuyz/udacity-dl/blob/master/3_regularization.ipynb

def prediction(tf_dataset, W1, b1, W2, b2, W3, b3, W4, b4):
    Y1 = tf.matmul(tf_dataset, W1) + b1
    
    X2 = tf.nn.relu(Y1)
    Y2 = tf.matmul(X2, W2) + b2
    
    X3 = tf.nn.relu(Y2)
    Y3 = tf.matmul(X3, W3) + b3
    
    X4 = tf.nn.relu(Y3)
    Y4 = tf.matmul(X4, W4) + b4
    
    return tf.nn.softmax(Y4)


    



In [56]:

    
num_hidden_1 = 1024
num_hidden_2 = 512
num_hidden_3 = 64

num_feature = image_size*image_size
batch_size = 128

beta = 5e-4


graph = tf.Graph()

with graph.as_default():
    
    #place holder
    tf_train_dataset = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_feature))
    tf_train_labels = tf.placeholder(dtype = tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    #Variable, weight
    
    W1 = tf.Variable(tf.truncated_normal([num_feature, num_hidden_1], stddev = 0.1))
    W2 = tf.Variable(tf.truncated_normal([num_hidden_1, num_hidden_2], stddev = 0.1))
    W3 = tf.Variable(tf.truncated_normal([num_hidden_2, num_hidden_3], stddev = 0.1))
    W4 = tf.Variable(tf.truncated_normal([num_hidden_3, num_labels], stddev = 0.1))
    
    b1 = tf.zeros([num_hidden_1])
    b2 = tf.zeros([num_hidden_2])
    b3 = tf.zeros([num_hidden_3])
    b4 = tf.zeros([num_labels])
    
    keep_prob = tf.placeholder(dtype = tf.float32)
    
    #compute hidden_1
    hidden_1 = tf.matmul(tf_train_dataset, W1) + b1
    hidden_1 = tf.nn.relu(hidden_1)
    hidden_1 = tf.nn.dropout(hidden_1, keep_prob = keep_prob)
    
    #compute hidden_2
    hidden_2 = tf.matmul(hidden_1, W2) + b2
    hidden_2 = tf.nn.relu(hidden_2)
    hidden_2 = tf.nn.dropout(hidden_2, keep_prob = keep_prob)
    
    #compute hidden_3
    hidden_3 = tf.matmul(hidden_2, W3) + b3
    hidden_3 = tf.nn.relu(hidden_3)
    hidden_3 = tf.nn.dropout(hidden_3, keep_prob = keep_prob)
    
    #compute logits
    logits = tf.matmul(hidden_3, W4) + b4
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = logits, labels = tf_train_labels))
    
    #regularizer
    regularizers = tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3) + tf.nn.l2_loss(W4)
    loss += beta * regularizers
    
    #optimizer
    global_step = tf.Variable(0)
    starter_learning_rate = 0.5
    learning_rate = tf.train.exponential_decay(starter_learning_rate, global_step,500,0.96)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    
    #predictions
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = prediction(tf_valid_dataset, W1, b1, W2, b2, W3, b3, W4, b4)
    test_prediction = prediction(tf_test_dataset, W1,b1, W2, b2, W3, b3, W4, b4)
    


    



In [57]:

    
# Run session, batch gradient descent (SGD)
num_step = 30001


with tf.Session(graph = graph) as session:
    #init variable
    tf.global_variables_initializer().run()
    print('Initialized')
    
    for step in range(num_step):
        
        #choose offset for the next batch
        offset = (step*batch_size) % (train_dataset.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        #feed the placeholder
        feed_dict = {tf_train_dataset: batch_data, tf_train_labels: batch_labels, keep_prob:0.5}
        
        #run
        _,l,predictions = session.run([optimizer, loss, train_prediction], feed_dict = feed_dict)
        
        if (step % 500) == 0:
            print('Minibatch loss at step %d: %f' %(step, l))
            print('Minibatch accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
            
    print('-----------------')
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    

