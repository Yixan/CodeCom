
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [26]:

    
batch_size = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.

  # Instead of these:
  # train_subset = 10000
  # tf_train_dataset = tf.constant(train_dataset[:train_subset, :])
  # tf_train_labels = tf.constant(train_labels[:train_subset])
    
  # Do this:
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))

  # No change for the rest of the code
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Add Constant for L2 Loss
  beta = tf.constant(0.001)

  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)) + \
    beta * tf.nn.l2_loss(weights)
  
  # Optimizer. 
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [27]:

    
num_steps = 5001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()

  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 1000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [29]:

    
batch_size = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size), name='train_X')
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels), name='train_y')

  # No change for the rest of the code
  tf_valid_dataset = tf.constant(valid_dataset, name='valid_X')
  tf_test_dataset = tf.constant(test_dataset, name='valid_y')
  
  # Variables.
  # Fully Connected Hidden Layer
  hidden_nodes = 1024
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]), name='weights_1')
  biases_1 = tf.Variable(tf.zeros([hidden_nodes]), name='biases_1')
    
  # Fully Connected Output Layer
  weights_2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]), name='weights_2')
  biases_2 = tf.Variable(tf.zeros([num_labels]), name='biases_2')
  
  # Training computation.
  # Logits of hidden layer
  logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
  # Apply Relu as activation
  logits_1 = tf.nn.relu(logits_1)
    
  # Logits of output layer
  logits_2 = tf.matmul(logits_1, weights_2) + biases_2 
    
  # Beta for L2 LOST
  beta = tf.constant(0.001)

  # Loss + L2 LOST
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2)) + \
            beta * tf.nn.l2_loss(tf.matmul(weights_1, weights_2))
  
  # Optimizer. 
  #optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  optimizer = tf.train.AdamOptimizer(1e-3).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_2)
    
  valid_logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
  valid_logits_1 = tf.nn.relu(valid_logits_1)
  valid_prediction = tf.nn.softmax(tf.matmul(valid_logits_1, weights_2) + biases_2)
    
  test_logits_1 =  tf.matmul(tf_test_dataset, weights_1) + biases_1
  test_logits_1 = tf.nn.relu(test_logits_1)
  test_prediction = tf.nn.softmax(tf.matmul(test_logits_1, weights_2) + biases_2)


    



In [30]:

    
num_steps = 6001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()

  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 1000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [49]:

    
batch_size = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size), name='train_X')
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels), name='train_y')

  # No change for the rest of the code
  tf_valid_dataset = tf.constant(valid_dataset, name='valid_X')
  tf_test_dataset = tf.constant(test_dataset, name='valid_y')
  
  # Variables.
  # Fully Connected Hidden Layer
  hidden_nodes = 1024
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]), name='weights_1')
  biases_1 = tf.Variable(tf.zeros([hidden_nodes]), name='biases_1')
    
  # Fully Connected Output Layer
  weights_2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]), name='weights_2')
  biases_2 = tf.Variable(tf.zeros([num_labels]), name='biases_2')
  
  # Training computation.
  # Logits of hidden layer
  logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
  # Apply Relu as activation
  logits_1 = tf.nn.relu(logits_1)
    
  # Logits of output layer
  logits_2 = tf.matmul(logits_1, weights_2) + biases_2 
    
  # Beta for L2 LOST
  beta = tf.constant(0.001)

  # Loss + L2 LOST
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2)) + \
            beta * tf.nn.l2_loss(tf.matmul(weights_1, weights_2))
  
  # Optimizer. 
  #optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  optimizer = tf.train.AdamOptimizer(1e-3).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_2)
    
  valid_logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
  valid_logits_1 = tf.nn.relu(valid_logits_1)
  valid_prediction = tf.nn.softmax(tf.matmul(valid_logits_1, weights_2) + biases_2)
    
  test_logits_1 =  tf.matmul(tf_test_dataset, weights_1) + biases_1
  test_logits_1 = tf.nn.relu(test_logits_1)
  test_prediction = tf.nn.softmax(tf.matmul(test_logits_1, weights_2) + biases_2)


    



In [50]:

    
num_steps = 6001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()

  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    ### RESTRICT TO THE SAME OFFSET
    offset = 0
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 1000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [54]:

    
batch_size = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size), name='train_X')
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels), name='train_y')

  # No change for the rest of the code
  tf_valid_dataset = tf.constant(valid_dataset, name='valid_X')
  tf_test_dataset = tf.constant(test_dataset, name='valid_y')
  
  # Variables.
  # Fully Connected Hidden Layer
  hidden_nodes = 1024
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]), name='weights_1')
  biases_1 = tf.Variable(tf.zeros([hidden_nodes]), name='biases_1')
    
  # Fully Connected Output Layer
  weights_2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]), name='weights_2')
  biases_2 = tf.Variable(tf.zeros([num_labels]), name='biases_2')
  
  # Training computation.
  # Logits of hidden layer
  logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
  # Apply Relu as activation
  logits_1 = tf.nn.relu(logits_1)
  logits_1 = tf.nn.dropout(logits_1, 0.5)
    
  # Logits of output layer
  logits_2 = tf.matmul(logits_1, weights_2) + biases_2 
    
  # Beta for L2 LOST
  beta = tf.constant(0.001)

  # Loss + L2 LOST
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2)) + \
            beta * tf.nn.l2_loss(tf.matmul(weights_1, weights_2))
  
  # Optimizer. 
  #optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  optimizer = tf.train.AdamOptimizer(1e-3).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_2)
    
  valid_logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
  valid_logits_1 = tf.nn.relu(valid_logits_1)
  valid_prediction = tf.nn.softmax(tf.matmul(valid_logits_1, weights_2) + biases_2)
    
  test_logits_1 =  tf.matmul(tf_test_dataset, weights_1) + biases_1
  test_logits_1 = tf.nn.relu(test_logits_1)
  test_prediction = tf.nn.softmax(tf.matmul(test_logits_1, weights_2) + biases_2)


    



In [55]:

    
num_steps = 6001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()

  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    ### RESTRICT TO THE SAME OFFSET
    offset = 0
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 1000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [56]:

    
batch_size = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size), name='train_X')
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels), name='train_y')

  tf_valid_dataset = tf.constant(valid_dataset, name='valid_X')
  tf_test_dataset = tf.constant(test_dataset, name='valid_y')
  
  # Variables.
  # Fully Connected Hidden Layer
  hidden_nodes = 1024
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]), name='weights_1')
  biases_1 = tf.Variable(tf.zeros([hidden_nodes]), name='biases_1')
    
  # Fully Connected Output Layer
  weights_2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]), name='weights_2')
  biases_2 = tf.Variable(tf.zeros([num_labels]), name='biases_2')
  
  # Training computation.
  # Logits of hidden layer
  logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
  logits_1 = tf.nn.relu(logits_1)
  logits_1 = tf.nn.dropout(logits_1, 0.5)
    
  # Logits of output layer
  logits_2 = tf.matmul(logits_1, weights_2) + biases_2 
    
  # Beta for L2 LOST
  beta = tf.constant(0.001)

  # Loss + L2 LOST
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2)) + \
            beta * tf.nn.l2_loss(tf.matmul(weights_1, weights_2))
  
  # Optimizer. 
  optimizer = tf.train.AdamOptimizer(1e-3).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_2)
    
  valid_logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
  valid_logits_1 = tf.nn.relu(valid_logits_1)
  valid_prediction = tf.nn.softmax(tf.matmul(valid_logits_1, weights_2) + biases_2)
    
  test_logits_1 =  tf.matmul(tf_test_dataset, weights_1) + biases_1
  test_logits_1 = tf.nn.relu(test_logits_1)
  test_prediction = tf.nn.softmax(tf.matmul(test_logits_1, weights_2) + biases_2)


    



In [57]:

    
num_steps = 6001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()

  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 1000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [91]:

    
batch_size = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size), name='train_X')
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels), name='train_y')

  tf_valid_dataset = tf.constant(valid_dataset, name='valid_X')
  tf_test_dataset = tf.constant(test_dataset, name='valid_y')
  
  # Variables.
  # Fully Connected Hidden Layer
  hidden_nodes = 1024
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]), name='weights_1')
  biases_1 = tf.Variable(tf.zeros([hidden_nodes]), name='biases_1')
    
  # Fully Connected Output Layer
  weights_2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]), name='weights_2')
  biases_2 = tf.Variable(tf.zeros([num_labels]), name='biases_2')
  
  # Training computation.
  # Logits of hidden layer
  logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
  logits_1 = tf.nn.relu(logits_1)
  logits_1 = tf.nn.dropout(logits_1, 0.5)
    
  # Logits of output layer
  logits_2 = tf.matmul(logits_1, weights_2) + biases_2 
    
  # Beta for L2 LOST
  beta = tf.constant(0.001)

  # Loss + L2 LOST
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2)) + \
            beta * tf.nn.l2_loss(tf.matmul(weights_1, weights_2))
  
  # Optimizer. 
  global_step = tf.Variable(0)  # count the number of steps taken.
  learning_rate = tf.train.exponential_decay(1e-2, global_step, 100, 0.99, staircase=False) 
  optimizer = tf.train.AdamOptimizer(learning_rate).minimize(loss, global_step=global_step)

  #optimizer = tf.train.AdamOptimizer(1e-3).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_2)
    
  valid_logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
  valid_logits_1 = tf.nn.relu(valid_logits_1)
  valid_prediction = tf.nn.softmax(tf.matmul(valid_logits_1, weights_2) + biases_2)
    
  test_logits_1 =  tf.matmul(tf_test_dataset, weights_1) + biases_1
  test_logits_1 = tf.nn.relu(test_logits_1)
  test_prediction = tf.nn.softmax(tf.matmul(test_logits_1, weights_2) + biases_2)


    



In [92]:

    
num_steps = 6001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()

  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 1000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 256

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size), name='train_X')
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels), name='train_y')

  tf_valid_dataset = tf.constant(valid_dataset, name='valid_X')
  tf_test_dataset = tf.constant(test_dataset, name='valid_y')
  
  # Variables.
  # Fully Connected Hidden Layer
  hidden_nodes = 1024
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]), name='weights_1')
  biases_1 = tf.Variable(tf.zeros([hidden_nodes]), name='biases_1')
    
  # Hiddent Layer2
  hidden_nodes_2 = 512
  weights_2 = tf.Variable(tf.truncated_normal([hidden_nodes, hidden_nodes_2]), name='weights_2')
  biases_2 = tf.Variable(tf.zeros([hidden_nodes_2]), name='biases_2')
    
  # Fully Connected Output Layer
  weights_last = tf.Variable(tf.truncated_normal([hidden_nodes_2, num_labels]), name='weights_last')
  biases_last = tf.Variable(tf.zeros([num_labels]), name='biases_last')
  
  # Training computation.
  # Logits of hidden layer
  logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
  logits_1 = tf.nn.relu(logits_1)
  logits_1 = tf.nn.dropout(logits_1, 0.5)

  # Logits for hidden layer2
  logits_2 = tf.matmul(logits_1, weights_2) + biases_2
  logits_2 = tf.nn.relu(logits_2)
  logits_2 = tf.nn.dropout(logits_2, 0.5)
    
  # Logits of output layer
  logits_last = tf.matmul(logits_2, weights_last) + biases_last 
    
  # Beta for L2 LOST
  beta = tf.constant(0.001)

  # Loss + L2 LOST
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_last)) + \
            beta * tf.nn.l2_loss(tf.matmul(tf.matmul(weights_1, weights_2), weights_last))
  
  # Optimizer1
 # global_step = tf.Variable(0)  # count the number of steps taken.
 # learning_rate = tf.train.exponential_decay(1e-2, global_step, 100, 0.99, staircase=False) 
 # optimizer = tf.train.AdamOptimizer(learning_rate).minimize(loss, global_step=global_step)

  optimizer = tf.train.AdamOptimizer(1e-3).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_last)
    
  valid_logits_1 = tf.matmul(tf_valid_dataset, weights_1) + biases_1
  valid_logits_1 = tf.nn.relu(valid_logits_1)
  valid_logits_2 = tf.matmul(valid_logits_1, weights_2) + biases_2
  valid_prediction = tf.nn.softmax(tf.matmul(valid_logits_2, weights_last) + biases_last)
    
  test_logits_1 =  tf.matmul(tf_test_dataset, weights_1) + biases_1
  test_logits_1 = tf.nn.relu(test_logits_1)
  test_logits_2 = tf.matmul(test_logits_1, weights_2) + biases_2
  test_prediction = tf.nn.softmax(tf.matmul(test_logits_2, weights_last) + biases_last)


    



In [8]:

    
num_steps = 601

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()

  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

