
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save  # hint to help gc free up memory
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
    dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
    # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
    labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
    return dataset, labels

train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [5]:

    
def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [11]:

    
# Parameters
batch_size = 128
display_step = 500

# Models Parameters
num_input = 784 # img shape: 28*28
num_classes = 10 # A-J alphabet


    



In [17]:

    
batch_size = 128

# This is a good beta value to start with
beta = 0.01

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, num_input))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_classes))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    weights = tf.Variable(tf.truncated_normal([num_input, num_classes]))
    biases  = tf.Variable(tf.zeros([num_classes]))

    # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    regularizer = tf.nn.l2_loss(weights)
    loss = tf.reduce_mean(loss + beta * regularizer)

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [18]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % display_step == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [25]:

    
# Parameters 
learning_rate = 0.5

# Network Parameters
n_hidden_1 = 1024 # 1st layer number of neurons
beta = 0.01


    



In [26]:

    
graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, num_input))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_classes))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables - store layers weight & bias
    weights = {
        'h1': tf.Variable(tf.truncated_normal([num_input, n_hidden_1])),
        'out': tf.Variable(tf.truncated_normal([n_hidden_1, num_classes]))
    }
    biases = {
        'b1': tf.Variable(tf.truncated_normal([n_hidden_1])),
        'out': tf.Variable(tf.truncated_normal([num_classes]))
    }

    # Training computation.
    # - Hidden fully connected layer with 256 neurons
    layer_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights['h1']), biases['b1']))
    # - Output fully connected layer with a neuron for each class
    logits = tf.matmul(layer_1, weights['out']) + biases['out']
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    regularizers = tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(weights['out'])
    loss = tf.reduce_mean(loss + beta * regularizers)

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    layer_1_valid = tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights['h1']), biases['b1']))
    valid_prediction = tf.nn.softmax(tf.matmul(layer_1_valid, weights['out']) + biases['out'])
    layer_1_test = tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights['h1']), biases['b1']))
    test_prediction  = tf.nn.softmax(tf.matmul(layer_1_test, weights['out']) + biases['out'])


    



In [27]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % display_step == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [29]:

    
num_steps = 3001

train_dataset_2 = train_dataset[:500, :]
train_labels_2 = train_labels[:500]

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels_2.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset_2[offset:(offset + batch_size), :]
        batch_labels = train_labels_2[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [30]:

    
graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, num_input))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_classes))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables - store layers weight & bias
    weights = {
        'h1': tf.Variable(tf.truncated_normal([num_input, n_hidden_1])),
        'out': tf.Variable(tf.truncated_normal([n_hidden_1, num_classes]))
    }
    biases = {
        'b1': tf.Variable(tf.truncated_normal([n_hidden_1])),
        'out': tf.Variable(tf.truncated_normal([num_classes]))
    }

    # Training computation.
    # - Hidden fully connected layer with 256 neurons
    layer_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights['h1']), biases['b1']))
    # - Dropout on hidden layer: RELU layer
    keep_prob = tf.placeholder("float")
    layer_1_dropout = tf.nn.dropout(layer_1, keep_prob)
    # - Output fully connected layer with a neuron for each class
    logits = tf.matmul(layer_1_dropout, weights['out']) + biases['out']
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    regularizers = tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(weights['out'])
    loss = tf.reduce_mean(loss + beta * regularizers)

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    layer_1_valid = tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights['h1']), biases['b1']))
    valid_prediction = tf.nn.softmax(tf.matmul(layer_1_valid, weights['out']) + biases['out'])
    layer_1_test = tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights['h1']), biases['b1']))
    test_prediction  = tf.nn.softmax(tf.matmul(layer_1_test, weights['out']) + biases['out'])


    



In [32]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % display_step == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [33]:

    
num_steps = 3001
beta = 0.01

train_dataset_2 = train_dataset[:500, :]
train_labels_2 = train_labels[:500]

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels_2.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset_2[offset:(offset + batch_size), :]
        batch_labels = train_labels_2[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,  keep_prob : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {:.1f}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {:.1f}".format(accuracy(valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {:.1f}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [72]:

    
import math as math

# Parameters
batch_size = 128

# Network Parameters
n_hidden_1 = 1200 # 1st layer number of neurons
n_hidden_2 = int(n_hidden_1*0.5)
n_hidden_3 = int(n_hidden_1*0.5*0.5)
n_hidden_4 = int(n_hidden_1*0.5*0.5*0.5)
n_hidden_5 = int(n_hidden_1*0.5*0.5*0.5*0.5)

num_input = 784 # img shape: 28*28
num_classes = 10 # A-J alphabet
beta = 0.001 # parameter of regularization factor


    



In [73]:

    
graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, num_input))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_classes))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables - store layers weight & bias
    weights = {
        'h1': tf.Variable(tf.truncated_normal([num_input, n_hidden_1], stddev=math.sqrt(2.0/num_input) )),
        'h2': tf.Variable(tf.truncated_normal([n_hidden_1, n_hidden_2], stddev=math.sqrt(2.0/n_hidden_1) )),
        'h3': tf.Variable(tf.truncated_normal([n_hidden_2, n_hidden_3], stddev=math.sqrt(2.0/n_hidden_2) )),
        'h4': tf.Variable(tf.truncated_normal([n_hidden_3, n_hidden_4], stddev=math.sqrt(2.0/n_hidden_3) )),
        'h5': tf.Variable(tf.truncated_normal([n_hidden_4, n_hidden_5], stddev=math.sqrt(2.0/n_hidden_4) )),
        'out': tf.Variable(tf.truncated_normal([n_hidden_5, num_classes], stddev=math.sqrt(2.0/n_hidden_5) ))
    }

    biases = {
        'b1': tf.Variable(tf.truncated_normal([n_hidden_1])),
        'b2': tf.Variable(tf.truncated_normal([n_hidden_2])),
        'b3': tf.Variable(tf.truncated_normal([n_hidden_3])),
        'b4': tf.Variable(tf.truncated_normal([n_hidden_4])),
        'b5': tf.Variable(tf.truncated_normal([n_hidden_5])),
        'out': tf.Variable(tf.truncated_normal([num_classes]))
    }
    keep_prob = tf.placeholder("float")

    # Training computation.
    layer_1 = tf.nn.relu(tf.add(tf.matmul(tf_train_dataset, weights['h1']), biases['b1']))
    layer_1_dropout = tf.nn.dropout(layer_1, keep_prob)
    
    layer_2 = tf.nn.relu(tf.add(tf.matmul(layer_1_dropout, weights['h2']), biases['b2']))
    layer_2_dropout = tf.nn.dropout(layer_2, keep_prob)
    
    layer_3 = tf.nn.relu(tf.add(tf.matmul(layer_2_dropout, weights['h3']), biases['b3']))
    layer_3_dropout = tf.nn.dropout(layer_3, keep_prob)
    
    layer_4 = tf.nn.relu(tf.add(tf.matmul(layer_3_dropout, weights['h4']), biases['b4']))
    layer_4_dropout = tf.nn.dropout(layer_4, keep_prob)
    
    layer_5 = tf.nn.relu(tf.add(tf.matmul(layer_4_dropout, weights['h5']), biases['b5']))
    layer_5_dropout = tf.nn.dropout(layer_5, keep_prob)
    
    # Output layer
    logits = tf.matmul(layer_5_dropout, weights['out']) + biases['out']
    
    # Normal loss function
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    # Loss function with L2 Regularization 
    regularizers = tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(weights['h2']) + \
                   tf.nn.l2_loss(weights['h3']) + tf.nn.l2_loss(weights['h4']) + \
                   tf.nn.l2_loss(weights['h5']) + tf.nn.l2_loss(weights['out'])               
    loss = tf.reduce_mean(loss + beta*regularizers)

    # Optimizer with decaying learning rate beta=0.5
    global_step = tf.Variable(0)  # count the number of steps taken.
    start_learning_rate = 0.5
    learning_rate = tf.train.exponential_decay(start_learning_rate, global_step, 100000, 0.96, staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

    # Predictions for the training
    train_prediction = tf.nn.softmax(logits)
    
    # Predictions for the validation
    layer_1_valid = tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights['h1']), biases['b1']))
    layer_2_valid = tf.nn.relu(tf.add(tf.matmul(layer_1_valid, weights['h2']), biases['b2']))
    layer_3_valid = tf.nn.relu(tf.add(tf.matmul(layer_2_valid, weights['h3']), biases['b3']))
    layer_4_valid = tf.nn.relu(tf.add(tf.matmul(layer_3_valid, weights['h4']), biases['b4']))
    layer_5_valid = tf.nn.relu(tf.add(tf.matmul(layer_4_valid, weights['h5']), biases['b5']))
    valid_prediction = tf.nn.softmax(tf.matmul(layer_5_valid, weights['out']) + biases['out'])
    
    # Predictions for the test data.
    layer_1_test = tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights['h1']), biases['b1']))
    layer_2_test = tf.nn.relu(tf.add(tf.matmul(layer_1_test, weights['h2']), biases['b2']))
    layer_3_test = tf.nn.relu(tf.add(tf.matmul(layer_2_test, weights['h3']), biases['b3']))
    layer_4_test = tf.nn.relu(tf.add(tf.matmul(layer_3_test, weights['h4']), biases['b4']))
    layer_5_test = tf.nn.relu(tf.add(tf.matmul(layer_4_test, weights['h5']), biases['b5']))
    test_prediction  = tf.nn.softmax(tf.matmul(layer_5_test, weights['out']) + biases['out'])


    



In [74]:

    
num_steps = 15001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.5}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 1000 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

