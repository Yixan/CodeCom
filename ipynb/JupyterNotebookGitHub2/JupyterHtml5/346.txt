
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
import cPickle as pickle
import numpy as np
import tensorflow as tf


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print 'Training set', train_dataset.shape, train_labels.shape
  print 'Validation set', valid_dataset.shape, valid_labels.shape
  print 'Test set', test_dataset.shape, test_labels.shape


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print 'Training set', train_dataset.shape, train_labels.shape
print 'Validation set', valid_dataset.shape, valid_labels.shape
print 'Test set', test_dataset.shape, test_labels.shape


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128
wd = 0.0009
graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    weights_hidden = tf.Variable(tf.truncated_normal([image_size * image_size, 1024]))
    biases_hidden = tf.Variable(tf.zeros([1024]))
    
    weight_hidden_decay = tf.mul(tf.nn.l2_loss(weights_hidden), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_hidden_decay)

    hidden = tf.nn.relu_layer(tf_train_dataset, weights_hidden, biases_hidden )

    weights_output = tf.Variable(tf.truncated_normal([1024, num_labels]))
    biases_output = tf.Variable(tf.zeros([num_labels]))
    weight_output_decay = tf.mul(tf.nn.l2_loss(weights_output), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_output_decay)

    # Training computation.
    logits = tf.matmul(hidden, weights_output) + biases_output
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    tf.add_to_collection('losses', loss)
    
    total_loss = tf.add_n(tf.get_collection('losses'), name='total_loss')

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(total_loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu_layer(tf_valid_dataset, weights_hidden, biases_hidden),
                  weights_output) + biases_output)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu_layer(tf_test_dataset, weights_hidden, biases_hidden),
                  weights_output) + biases_output)


    



In [27]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print "Initialized"
  for step in xrange(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print "Minibatch loss at step", step, ":", l
      print "Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels)
      print "Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels)
  print "Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels)


    



In [42]:

    
step=10
offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
print offset
print train_labels.shape[0] - batch_size
step % 10


    



In [43]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print "Initialized"
  for step in xrange(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = ((step % 10) * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print "Minibatch loss at step", step, ":", l
      print "Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels)
      print "Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels)
  print "Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels)


    



In [54]:

    
batch_size = 128
wd = 0.0009
graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    weights_hidden = tf.Variable(tf.truncated_normal([image_size * image_size, 1024]))
    biases_hidden = tf.Variable(tf.zeros([1024]))
    
    weight_hidden_decay = tf.mul(tf.nn.l2_loss(weights_hidden), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_hidden_decay)

    hidden = tf.nn.relu_layer(tf_train_dataset, weights_hidden, biases_hidden )
    hidden_dropout = tf.nn.dropout(hidden, 0.5)

    weights_output = tf.Variable(tf.truncated_normal([1024, num_labels]))
    biases_output = tf.Variable(tf.zeros([num_labels]))
    weight_output_decay = tf.mul(tf.nn.l2_loss(weights_output), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_output_decay)

    # Training computation.
    logits = tf.matmul(hidden_dropout, weights_output) + biases_output
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    tf.add_to_collection('losses', loss)
    
    total_loss = tf.add_n(tf.get_collection('losses'), name='total_loss')

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(total_loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu_layer(tf_valid_dataset, weights_hidden, biases_hidden),
                  weights_output) + biases_output)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu_layer(tf_test_dataset, weights_hidden, biases_hidden),
                  weights_output) + biases_output)


    



In [55]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print "Initialized"
  for step in xrange(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print "Minibatch loss at step", step, ":", l
      print "Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels)
      print "Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels)
  print "Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels)


    



In [56]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print "Initialized"
  for step in xrange(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = ((step % 10) * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print "Minibatch loss at step", step, ":", l
      print "Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels)
      print "Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels)
  print "Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels)


    



In [57]:

    
train_labels.shape[0] / batch_size


    



In [56]:

    
batch_size = 128
wd = 0.0009
initial_learning_rate = 0.5
NUM_EPOCHS_PER_DECAY = 1.2
LEARNING_RATE_DECAY_FACTOR = 0.45
keep_prob = 0.5

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    weights_hidden = tf.Variable(tf.truncated_normal([image_size * image_size, 1024], stddev=0.05))
    biases_hidden = tf.Variable(tf.zeros([1024]))
    
    weight_hidden_decay = tf.mul(tf.nn.l2_loss(weights_hidden), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_hidden_decay)

    hidden = tf.nn.relu_layer(tf_train_dataset, weights_hidden, biases_hidden )
    hidden_dropout = tf.nn.dropout(hidden, keep_prob)
    
    weights_hidden2 = tf.Variable(tf.truncated_normal([1024, 300], stddev=0.044))
    biases_hidden2 = tf.Variable(tf.zeros([300]))
    
    weight_hidden2_decay = tf.mul(tf.nn.l2_loss(weights_hidden2), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_hidden2_decay)

    hidden2 = tf.nn.relu_layer(hidden_dropout, weights_hidden2, biases_hidden2 )
    hidden2_dropout = tf.nn.dropout(hidden2, keep_prob)
    
    weights_hidden3 = tf.Variable(tf.truncated_normal([300, 50], stddev=0.08))
    biases_hidden3 = tf.Variable(tf.zeros([50]))
    
    weight_hidden3_decay = tf.mul(tf.nn.l2_loss(weights_hidden3), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_hidden3_decay)

    hidden3 = tf.nn.relu_layer(hidden2_dropout, weights_hidden3, biases_hidden3 )
    hidden3_dropout = tf.nn.dropout(hidden3, keep_prob)

    weights_output = tf.Variable(tf.truncated_normal([50, num_labels], stddev=0.14))
    biases_output = tf.Variable(tf.zeros([num_labels]))
    weight_output_decay = tf.mul(tf.nn.l2_loss(weights_output), wd, name="weight_loss")
    tf.add_to_collection('losses', weight_output_decay)

    # Training computation.
    logits = tf.matmul(hidden3_dropout, weights_output) + biases_output
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    tf.add_to_collection('losses', loss)
    
    total_loss = tf.add_n(tf.get_collection('losses'), name='total_loss')

    global_step = tf.Variable(0)  # count the number of steps taken.
    nr_batches_per_epoch = train_labels.shape[0] / batch_size
    decay_steps = int(nr_batches_per_epoch * NUM_EPOCHS_PER_DECAY)
    print decay_steps
    
    learning_rate = tf.train.exponential_decay(
        initial_learning_rate,
        global_step,
        decay_steps,
        LEARNING_RATE_DECAY_FACTOR,
        staircase=True)
    
    optimizer = tf.train.AdagradOptimizer(learning_rate, 0.9).minimize(total_loss, global_step=global_step)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu_layer(
                tf.nn.relu_layer(
                tf.nn.relu_layer(tf_valid_dataset, weights_hidden, biases_hidden),
                weights_hidden2, biases_hidden2),
                weights_hidden3, biases_hidden3),
                weights_output) + biases_output)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu_layer(
                tf.nn.relu_layer(
                tf.nn.relu_layer(tf_test_dataset, weights_hidden, biases_hidden),
                weights_hidden2, biases_hidden2),
                weights_hidden3, biases_hidden3),
                weights_output) + biases_output)


    



In [60]:

    
num_steps = 20000

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print "Initialized"
  for step in xrange(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print "Minibatch loss at step", step, ":", l
      print "Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels)
      print "Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels)
  print "Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels)


    



In [ ]:

    
 


    

