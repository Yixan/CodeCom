
In [ ]:

    
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
import pickle

import matplotlib.pyplot as plt
from IPython.display import display, Image

%matplotlib inline


    



In [ ]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [ ]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [ ]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [ ]:

    
batch_size = 128

#Weight for L2 regularization loss (tunable)
beta = 0.001

graph_sgd = tf.Graph()
with graph_sgd.as_default():
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases

  #regularized loss with L2 weight and bias regularization, penalize larger weights for their conrtibution for loss
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels) + beta*tf.nn.l2_loss(weights) + beta*tf.nn.l2_loss(biases))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [ ]:

    
num_steps = 3001

with tf.Session(graph=graph_sgd) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
batch_size = 128
hidden_units = 1024

#This L2 regularization beta will be applied to all hidden layer and input weights (and biases)
beta = 0.001

graph_sgd_relu = tf.Graph()
with graph_sgd_relu.as_default():
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_units]))
  biases1 = tf.Variable(tf.zeros([hidden_units]))
  
  hidden_output = tf.matmul(tf_train_dataset, weights1) + biases1
  relu_output = tf.nn.relu(hidden_output)

  hidden_output_valid = tf.matmul(tf_valid_dataset, weights1) + biases1
  relu_output_valid = tf.nn.relu(hidden_output_valid)

  hidden_output_test = tf.matmul(tf_test_dataset, weights1) + biases1
  relu_output_test = tf.nn.relu(hidden_output_test)

  weights2 = tf.Variable(
    tf.truncated_normal([hidden_units,num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(relu_output, weights2) + biases2
  
  #Loss with same beta regularization over every weights and biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels) + beta*tf.nn.l2_loss(weights1)
            + beta*tf.nn.l2_loss(biases1) + beta*tf.nn.l2_loss(weights2) + beta*tf.nn.l2_loss(biases2))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(relu_output_valid, weights2) + biases2)
  test_prediction = tf.nn.softmax(tf.matmul(relu_output_test, weights2) + biases2)

print("Graph with hidden layer created")


    



In [ ]:

    
num_steps = 3001

with tf.Session(graph=graph_sgd_relu) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))

#This achives upto test accuracy of 93%


    



In [ ]:

    
batch_size = 50
hidden_units = 1024

beta = 0.001

graph_sgd_relu_new = tf.Graph()
with graph_sgd_relu_new.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_units]))
  biases1 = tf.Variable(tf.zeros([hidden_units]))
  
  hidden_output = tf.matmul(tf_train_dataset, weights1) + biases1
  relu_output = tf.nn.relu(hidden_output)

  hidden_output_valid = tf.matmul(tf_valid_dataset, weights1) + biases1
  relu_output_valid = tf.nn.relu(hidden_output_valid)

  hidden_output_test = tf.matmul(tf_test_dataset, weights1) + biases1
  relu_output_test = tf.nn.relu(hidden_output_test)

  weights2 = tf.Variable(
    tf.truncated_normal([hidden_units,num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(relu_output, weights2) + biases2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels) + beta*tf.nn.l2_loss(weights1)
            + beta*tf.nn.l2_loss(biases1) + beta*tf.nn.l2_loss(weights2) + beta*tf.nn.l2_loss(biases2))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(relu_output_valid, weights2) + biases2)
  test_prediction = tf.nn.softmax(tf.matmul(relu_output_test, weights2) + biases2)

print("Graph with hidden layer created")


    



In [ ]:

    
num_steps = 65

training_accuracy = []
validation_accuracy = []

with tf.Session(graph=graph_sgd_relu_new) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (1000 - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    training_accuracy.append(accuracy(predictions, batch_labels))
    validation_accuracy.append(accuracy(valid_prediction.eval(), valid_labels))
    if (step % 10 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
%matplotlib inline

fig=plt.figure()
#a=fig.add_subplot(1,1,1)
plt.plot(range(len(training_accuracy)),training_accuracy,'r',range(len(validation_accuracy)),validation_accuracy, 'b')
#plt.imshow(range(len(training_accuracy)),training_accuracy,'r',range(len(validation_accuracy)),validation_accuracy, 'b')


    



In [ ]:

    
#introducing dropout on hidden layer, to reduce overfitting
batch_size = 50
hidden_units = 1024

keeping_probability = 0.5
beta = 0.001

graph_sgd_relu_new_dropout = tf.Graph()
with graph_sgd_relu_new_dropout.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_units]))
  biases1 = tf.Variable(tf.zeros([hidden_units]))
  
  hidden_output = tf.matmul(tf_train_dataset, weights1) + biases1
  relu_output = tf.nn.relu(hidden_output)
  drop_out_layer = tf.nn.dropout(relu_output, keeping_probability)
    
    
  hidden_output_valid = tf.matmul(tf_valid_dataset, weights1) + biases1
  relu_output_valid = tf.nn.relu(hidden_output_valid)

  hidden_output_test = tf.matmul(tf_test_dataset, weights1) + biases1
  relu_output_test = tf.nn.relu(hidden_output_test)

  weights2 = tf.Variable(
    tf.truncated_normal([hidden_units,num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(drop_out_layer, weights2) + biases2
  logits_wo_dropout = tf.matmul(relu_output,weights2) + biases2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels) + beta*tf.nn.l2_loss(weights1)
            + beta*tf.nn.l2_loss(biases1) + beta*tf.nn.l2_loss(weights2) + beta*tf.nn.l2_loss(biases2))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  # Prediction should be done on the layer without any dropout, otherwise result will be stochastic  
  train_prediction = tf.nn.softmax(logits_wo_dropout)
  valid_prediction = tf.nn.softmax(
    tf.matmul(relu_output_valid, weights2) + biases2)
  test_prediction = tf.nn.softmax(tf.matmul(relu_output_test, weights2) + biases2)

print("Graph with hidden layer created")


    



In [ ]:

    
num_steps = 65

training_accuracy = []
validation_accuracy = []

with tf.Session(graph=graph_sgd_relu_new_dropout) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (1000 - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    training_accuracy.append(accuracy(predictions, batch_labels))
    validation_accuracy.append(accuracy(valid_prediction.eval(), valid_labels))
    if (step % 10 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
#From graph itself, it is clear that dropout has reduced the overfitting

%matplotlib inline

fig=plt.figure()
#a=fig.add_subplot(1,1,1)
plt.plot(range(len(training_accuracy)),training_accuracy,'r',range(len(validation_accuracy)),validation_accuracy, 'b')
#plt.imshow(range(len(training_accuracy)),training_accuracy,'r',range(len(validation_accuracy)),validation_accuracy, 'b')


    

