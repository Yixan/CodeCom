
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
# from __future__ import print_function # Using Python 3 interpreter
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
beta = 0.01 # A good beta to start with, tuning beta can give better performance


    



In [6]:

    
batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  # original loss function
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits))
  # Loss function using L2 Regularization
  regularization_term = tf.nn.l2_loss(weights)
  loss = tf.reduce_mean(loss + beta * regularization_term)# update loss fxn
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [7]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [8]:

    
num_nodes = 1024
batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_nodes]))
  biases1 = tf.Variable(tf.zeros([num_nodes]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_nodes, num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits1 = tf.matmul(tf_train_dataset, weights1) + biases1
  relu_layer = tf.nn.relu(logits1)
  logits2 = tf.matmul(relu_layer, weights2) + biases2
  # original loss function
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits2))# the last logits is the culmination
  # Add regularization terms for each weight tensor and add to original loss
  regularization_terms = tf.nn.l2_loss(weights1) + tf.nn.l2_loss(weights2)
  loss = tf.reduce_mean(loss + beta * regularization_terms)
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits2)# the last logits is the culmination
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights1) + biases1),weights2)+biases2)
  test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights1) + biases1),weights2)+biases2)


    



In [9]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [10]:

    
num_steps = 3001

# Subset of train_dataset:
train_dataset_sub = train_dataset[:500, :]
train_labels_sub = train_labels[:500]

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_sub.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_sub[offset:(offset + batch_size), :]
    batch_labels = train_labels_sub[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
num_nodes = 1024
batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_nodes]))
  biases1 = tf.Variable(tf.zeros([num_nodes]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_nodes, num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits1 = tf.matmul(tf_train_dataset, weights1) + biases1
  relu_layer = tf.nn.relu(logits1)
  keep_prob = tf.placeholder("float") # probability of node being kept in layer
  relu_layer_dropout = tf.nn.dropout(relu_layer, keep_prob=keep_prob)
    
  logits2 = tf.matmul(relu_layer_dropout, weights2) + biases2 #pass dropout layer on
  # original loss function
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf_train_labels, logits=logits2))# the last logits is the culmination
  # Add regularization terms for each weight tensor and add to original loss
  regularization_terms = tf.nn.l2_loss(weights1) + tf.nn.l2_loss(weights2)
  loss = tf.reduce_mean(loss + beta * regularization_terms)
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits2)# the last logits is the culmination
  
  # Avoid applying any dropout in prediction tensors for validation or testing  
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights1) + biases1),weights2)+biases2)
  test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights1) + biases1),weights2)+biases2)


    



In [12]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {
        tf_train_dataset : batch_data,
        tf_train_labels : batch_labels,
        keep_prob : 0.5
    }
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [13]:

    
num_steps = 3001

# Subset of train_dataset:
train_dataset_sub = train_dataset[:500, :]
train_labels_sub = train_labels[:500]

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_sub.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_sub[offset:(offset + batch_size), :]
    batch_labels = train_labels_sub[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {
        tf_train_dataset : batch_data,
        tf_train_labels : batch_labels,
        keep_prob : 0.5
    }
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [18]:

    
#4 hidden layers
num_nodes_layer_1 = 1024
num_nodes_layer_2 = 512
num_nodes_layer_3 = 256
num_nodes_layer_4 = 128

batch_size = 128

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Weight variables for 4 hidden layers.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_nodes_layer_1], stddev=np.sqrt(2.0 / (image_size * image_size))))
  biases1 = tf.Variable(tf.zeros([num_nodes_layer_1]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_nodes_layer_1, num_nodes_layer_2], stddev=np.sqrt(2.0 / (num_nodes_layer_1))))
  biases2 = tf.Variable(tf.zeros([num_nodes_layer_2]))
  weights3 = tf.Variable(
    tf.truncated_normal([num_nodes_layer_2, num_nodes_layer_3], stddev=np.sqrt(2.0 / (num_nodes_layer_2))))
  biases3 = tf.Variable(tf.zeros([num_nodes_layer_3]))
  weights4 = tf.Variable(
    tf.truncated_normal([num_nodes_layer_3, num_nodes_layer_4], stddev=np.sqrt(2.0 / (num_nodes_layer_3))))
  biases4 = tf.Variable(tf.zeros([num_nodes_layer_4]))
  weights5 = tf.Variable(# output layer
    tf.truncated_normal([num_nodes_layer_4, num_labels], stddev=np.sqrt(2.0 / (num_nodes_layer_4))))
  biases5 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  keep_prob = tf.placeholder(tf.float32) # probability of node being kept in layer

  logits1 = tf.matmul(tf_train_dataset, weights1) + biases1
  relu_layer_dropout_1 = tf.nn.dropout(tf.nn.relu(logits1), keep_prob)
  logits2 = tf.matmul(relu_layer_dropout_1, weights2) + biases2
  relu_layer_dropout_2 = tf.nn.dropout(tf.nn.relu(logits2), keep_prob)
  logits3 = tf.matmul(relu_layer_dropout_2, weights3) + biases3
  relu_layer_dropout_3 = tf.nn.dropout(tf.nn.relu(logits3), keep_prob)
  logits4 = tf.matmul(relu_layer_dropout_3, weights4) + biases4
  relu_layer_dropout_4 = tf.nn.dropout(tf.nn.relu(logits4), keep_prob)
  logits5 = tf.matmul(relu_layer_dropout_4, weights5) + biases5 # output layer

  # original loss function
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits5, labels=tf_train_labels))# the last logits tensor is the culmination
  # Add regularization terms for each weight tensor and add to original loss
  regularization_terms =\
    tf.nn.l2_loss(weights1) + tf.nn.l2_loss(weights2) + tf.nn.l2_loss(weights3) +\
    tf.nn.l2_loss(weights4) + tf.nn.l2_loss(weights5)
  temp_beta = 0.001438
  loss = tf.reduce_mean(loss + temp_beta * regularization_terms)
    
  # Optimizer.
  global_step = tf.Variable(0)  # count the number of steps taken.
  learning_rate = tf.train.exponential_decay(0.1, global_step, 100000, 0.96, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  #optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits5)# the last logits is the culmination
  
  # Avoid applying any dropout in prediction tensors for validation or testing  
  # VALIDATION
  valid_logits_1 = tf.matmul(tf_valid_dataset, weights1) + biases1
  relu_layer_1 = tf.nn.relu(valid_logits_1)
  valid_logits_2 = tf.matmul(relu_layer_1, weights2) + biases2
  relu_layer_2 = tf.nn.relu(valid_logits_2)
  valid_logits_3 = tf.matmul(relu_layer_2, weights3) + biases3
  relu_layer_3 = tf.nn.relu(valid_logits_3)
  valid_logits_4 = tf.matmul(relu_layer_3, weights4) + biases4
  relu_layer_4 = tf.nn.relu(valid_logits_4)
  valid_logits_5 = tf.matmul(relu_layer_4, weights5) + biases5 # output layer
  valid_prediction = tf.nn.softmax(valid_logits_5)

  # TESTING
  test_logits_1 = tf.matmul(tf_test_dataset, weights1) + biases1
  relu_layer_1 = tf.nn.relu(test_logits_1)
  test_logits_2 = tf.matmul(relu_layer_1, weights2) + biases2
  relu_layer_2 = tf.nn.relu(test_logits_2)
  test_logits_3 = tf.matmul(relu_layer_2, weights3) + biases3
  relu_layer_3 = tf.nn.relu(test_logits_3)
  test_logits_4 = tf.matmul(relu_layer_3, weights4) + biases4
  relu_layer_4 = tf.nn.relu(test_logits_4)
  test_logits_5 = tf.matmul(relu_layer_4, weights5) + biases5 # output layer
  test_prediction = tf.nn.softmax(test_logits_5)
  


    



In [19]:

    
num_steps = 15000

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {
        tf_train_dataset : batch_data,
        tf_train_labels : batch_labels,
        keep_prob : 0.7
    }
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict
    )
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    

