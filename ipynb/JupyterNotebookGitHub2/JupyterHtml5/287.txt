
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [57]:

    
# Stochastic Gradient Descent Model

batch_size = 128
beta = 0.01

graph = tf.Graph()
with graph.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
        shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32,
        shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    # Training computation
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    loss += 0.5 * beta * tf.nn.l2_loss(weights)
                                      
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf_test_dataset, weights) + biases)    
    


    



In [61]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {}".format(accuracy(
                valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [59]:

    
# Neural Network with 1 Hidden Layer
hidden_units = 1024
batch_size = 128
beta = 0.01

graph = tf.Graph()
with graph.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
        shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32,
        shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Hidden Variables
    hidden_weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_units]))
    hidden_biases = tf.Variable(tf.zeros([hidden_units]))
    
    # relus
    tf_train_relus = tf.nn.relu(tf.matmul(tf_train_dataset, hidden_weights) + hidden_biases)
    tf_valid_relus = tf.nn.relu(tf.matmul(tf_valid_dataset, hidden_weights) + hidden_biases)
    tf_test_relus = tf.nn.relu(tf.matmul(tf_test_dataset, hidden_weights) + hidden_biases)
    
    # Output Variables                                      
    weights = tf.Variable(
        tf.truncated_normal([hidden_units, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
                                       
    # Training computation
    logits = tf.matmul(tf_train_relus, weights) + biases
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    loss += 0.5 * beta * (tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights))
                                      
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf_valid_relus, weights) + biases)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf_test_relus, weights) + biases)    
    


    



In [60]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {}".format(accuracy(
                valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [62]:

    
# Stochastic Gradient Descent Model

batch_size = 128
beta = 0.01

graph = tf.Graph()
with graph.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
        shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32,
        shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    # Training computation
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    loss += 0.5 * beta * tf.nn.l2_loss(weights)
                                      
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf_test_dataset, weights) + biases)    
    


    



In [63]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized
        offset = (step % 5 * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {}".format(accuracy(
                valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [67]:

    
# Neural Network with 1 Hidden Layer
hidden_units = 1024
batch_size = 128
beta = 0.01

graph = tf.Graph()
with graph.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
        shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32,
        shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    keep_prob = tf.placeholder(tf.float32)
    
    # Hidden Variables
    hidden_weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_units]))
    hidden_biases = tf.Variable(tf.zeros([hidden_units]))
    
    # relus
    tf_train_relus = tf.nn.dropout(tf.nn.relu(tf.matmul(tf_train_dataset, hidden_weights) + hidden_biases), keep_prob)
    tf_valid_relus = tf.nn.relu(tf.matmul(tf_valid_dataset, hidden_weights) + hidden_biases)
    tf_test_relus = tf.nn.relu(tf.matmul(tf_test_dataset, hidden_weights) + hidden_biases)
    
    # Output Variables                                      
    weights = tf.Variable(
        tf.truncated_normal([hidden_units, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
                                       
    # Training computation
    logits = tf.matmul(tf_train_relus, weights) + biases
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    loss += 0.5 * beta * (tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(weights))
                                      
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions for the training, validation, and test data
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf_valid_relus, weights) + biases)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf_test_relus, weights) + biases)    
    


    



In [68]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob: 0.5}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {}".format(accuracy(
                valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [129]:

    
import math
image_size = 28
image_pixels = image_size * image_size
num_labels = 10
hidden1_units = 1024
hidden2_units = 512
    
# Neural Network with 1 Hidden Layer
batch_size = 128
beta = 0.01

graph = tf.Graph()
with graph.as_default():
    
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32,
        shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32,
        shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    keep_prob = tf.placeholder(tf.float32)
    
    # Hidden 1
    with tf.name_scope('hidden1'):
        weights = tf.Variable(
            tf.truncated_normal([image_pixels, hidden1_units],
            stddev=1.0 / math.sqrt(float(image_pixels))),
                            name='weights')
        biases = tf.Variable(tf.zeros([hidden1_units]),
                            name='biases')
        hidden1_dict = {"weights": weights, "biases": biases}

    # Hidden 2
    with tf.name_scope('hidden2'):
        weights = tf.Variable(
            tf.truncated_normal([hidden1_units, hidden2_units],
            stddev=1.0 / math.sqrt(float(hidden1_units))),
                            name='weights')
        biases = tf.Variable(tf.zeros([hidden2_units]),
                            name='biases')
        hidden2_dict = {"weights": weights, "biases": biases}
    
    # Linear
    with tf.name_scope('softmax_linear'):
        weights = tf.Variable(
            tf.truncated_normal([hidden2_units, num_labels],
            stddev=1.0 / math.sqrt(float(hidden2_units))),
                            name='weights')
        biases = tf.Variable(tf.zeros([num_labels]),
                             name='biases')
        logits_dict = {"weights": weights, "biases": biases}
    
    def forward_prop(X, keep_prob):
        hidden1 = tf.nn.dropout(tf.nn.relu(tf.matmul(X, hidden1_dict['weights']) +
                                    hidden1_dict['biases']), keep_prob)
        hidden2 = tf.nn.dropout(tf.nn.relu(tf.matmul(hidden1, hidden2_dict['weights']) +
                                    hidden2_dict['biases']), keep_prob)
        return tf.matmul(hidden2, logits_dict['weights']) + logits_dict['biases']
    
    loss = tf.nn.softmax_cross_entropy_with_logits(forward_prop(tf_train_dataset, 0.5), tf_train_labels)
    loss += 0.5 * beta * (tf.nn.l2_loss(hidden1_dict['weights']) +
                          tf.nn.l2_loss(hidden2_dict['weights']) +
                          tf.nn.l2_loss(logits_dict['weights']))
    loss = tf.reduce_mean(loss)
    
    global_step = tf.Variable(0)   # count number of steps taken
    learning_rate = tf.train.exponential_decay(0.3, global_step, 3500, 0.86, staircase=True)
    
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    
    # Predictions for the training, validation, and test data
    train_prediction = tf.nn.softmax(forward_prop(tf_train_dataset, 0.5))
    valid_prediction = tf.nn.softmax(forward_prop(tf_valid_dataset, 1))
    test_prediction = tf.nn.softmax(forward_prop(tf_test_dataset, 1))    
    


    



In [130]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob: 0.5}
        _, l, predictions = session.run(
            [optimizer, loss[0], train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step {}: {}".format(step, l))
            print("Minibatch accuracy: {}".format(accuracy(predictions, batch_labels)))
            print("Validation accuracy: {}".format(accuracy(
                valid_prediction.eval(), valid_labels)))
    print("Test accuracy: {}".format(accuracy(test_prediction.eval(), test_labels)))


    



In [ ]:

    
 


    

