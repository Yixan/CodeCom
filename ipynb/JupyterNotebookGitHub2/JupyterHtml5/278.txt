
In [2]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [3]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [5]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [6]:

    
batch_size = 128

graph_l2 = tf.Graph()
with graph_l2.as_default():
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
    weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss_basic = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    l2_beta = 0.002
    loss = loss_basic + l2_beta * tf.nn.l2_loss(weights)
  
  # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001

with tf.Session(graph=graph_l2) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
        
        print("Offset starts at %d" % (offset,))
        print("Minibatch loss at step %d: %f" % (step, l))
        print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
        print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
        print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
        


    



In [6]:

    
def weight_variable(shape):
    initial = tf.truncated_normal(shape)
    return tf.Variable(initial)

def bias_variable(shape):
    initial = tf.zeros(shape=shape)
    return tf.Variable(initial)


hidden_nodes = 1024
l2_beta = 0.002
batch_size = 128

graph_relu = tf.Graph()
with graph_relu.as_default():
    
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    #Variables.
    input_weights = weight_variable([image_size*image_size, hidden_nodes])
    input_biases = bias_variable([hidden_nodes])
    
    hidden_1 = tf.nn.relu(tf.matmul(tf_train_dataset,input_weights) + input_biases)
    hidden_weights = weight_variable([hidden_nodes,num_labels])
    hidden_biases = bias_variable([num_labels])
    
    logits = tf.matmul(hidden_1, hidden_weights) + hidden_biases
    loss_basic = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    
    loss = loss_basic + l2_beta * (tf.nn.l2_loss(hidden_weights) + tf.nn.l2_loss(input_weights))
  
  # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    
    valid_relu = tf.nn.relu(tf.matmul(tf_valid_dataset, input_weights) + input_biases)
    valid_prediction = tf.nn.softmax(tf.matmul(valid_relu, hidden_weights) + hidden_biases)
    
    test_relu = tf.nn.relu(tf.matmul(tf_test_dataset, input_weights) + input_biases)
    test_prediction = tf.nn.softmax(tf.matmul(test_relu, hidden_weights) + hidden_biases)


    



In [8]:

    
num_steps = 3001

with tf.Session(graph=graph_relu) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 500 == 0):
        print("Offset is %d" % (offset,))
        print("Minibatch loss at step %d: %f" % (step, l))
        print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
        print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
        print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [37]:

    
tf.reset_default_graph()
l2_beta = 0.001
batch_size = 20

train_subset = train_dataset[:100,:]
train_subset_labels = train_labels[:100,:]

graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
    weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    
    #loss =  loss_basic + l2_beta * tf.nn.l2_loss(weights)
  
  # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [38]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    
    for step in range(num_steps):
        
        offset = (step * batch_size) % (train_subset_labels.shape[0] - batch_size) 
        batch_data = train_subset[offset:(offset + batch_size), :]
        batch_labels = train_subset_labels[offset:(offset + batch_size), :]
        
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict = feed_dict)
        
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [42]:

    
hidden_nodes = 1024
batch_size = 50

graph_relu = tf.Graph()

train_subset = train_dataset[:100,:]
train_subset_labels = train_labels[:100]


with graph_relu.as_default():
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))  
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Input layer
    input_weights = weight_variable([image_size*image_size, hidden_nodes])
    input_biases = bias_variable([hidden_nodes])
    
    # Hidden layer
    hidden_1 = tf.nn.relu(tf.matmul(tf_train_dataset,input_weights) + input_biases)
    hidden_weights = weight_variable([hidden_nodes,num_labels])
    hidden_biases = bias_variable([num_labels])
    
    # Output layer
    logits = tf.matmul(hidden_1, hidden_weights) + hidden_biases
    loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    #l2_beta = 0.005
    #loss = (loss_basic + l2_beta * tf.nn.l2_loss(hidden_weights) + 
            #l2_beta * tf.nn.l2_loss(input_weights))
  
  # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    
    valid_relu = tf.nn.relu(tf.matmul(tf_valid_dataset, input_weights) + input_biases)
    valid_prediction = tf.nn.softmax(tf.matmul(valid_relu, hidden_weights) + hidden_biases)
    
    test_relu = tf.nn.relu(tf.matmul(tf_test_dataset, input_weights) + input_biases)
    test_prediction = tf.nn.softmax(tf.matmul(test_relu, hidden_weights) + hidden_biases)


    



In [43]:

    
num_steps = 3001

with tf.Session(graph=graph_relu) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_subset_labels.shape[0] - batch_size)
        
        batch_data = train_subset[offset:(offset + batch_size), :]
        batch_labels = train_subset_labels[offset:(offset + batch_size), :]
        
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict = feed_dict)
        
        if (step % 500 == 0):
            print("Training loss at step %d: %f" % (step, l))
            print("Training accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                    valid_prediction.eval(), valid_labels))
            print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [104]:

    
hidden_nodes = 1024
batch_size = 128

graph_relu = tf.Graph()

with graph_relu.as_default():
    tf_train_dataset = tf.placeholder(tf.float32)
                                    #shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))  
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    keep_p = tf.placeholder(tf.float32)
    
    # Input layer
    input_weights = weight_variable([image_size*image_size, hidden_nodes])
    input_biases = bias_variable([hidden_nodes])
    
    # Hidden layer
    hidden_1 = tf.nn.relu(tf.matmul(tf_train_dataset,input_weights) + input_biases)
    hidden_dropout = tf.nn.dropout(hidden_1,keep_prob = keep_p)
    hidden_weights = weight_variable([hidden_nodes,num_labels])
    hidden_biases = bias_variable([num_labels])
    
    # Output layer
    logits = tf.matmul(hidden_dropout, hidden_weights) + hidden_biases
    loss_basic = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    l2_beta = 0.005
    loss = (loss_basic + l2_beta *(tf.nn.l2_loss(hidden_weights) 
                                   + tf.nn.l2_loss(input_weights)))
  
  # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
    prediction = tf.nn.softmax(logits)
    


    



In [108]:

    
num_steps = 3001

with tf.Session(graph=graph_relu) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_p: 0.5}
        _, l, predictions = session.run(
            [optimizer, loss, prediction], feed_dict = feed_dict)
        
        if (step % 500 == 0):
            print("Training loss at step %d: %f" % (step, l))
            print("Training accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            
            feed_dict = { tf_train_dataset: valid_dataset, keep_p: 1}
            predictions = session.run(prediction, feed_dict = feed_dict)
            
            print("Validation accuracy: %.1f%%" % accuracy(predictions, valid_labels))
            
            feed_dict = { tf_train_dataset: test_dataset, keep_p: 1}
            predictions = session.run(prediction, feed_dict = feed_dict)
            
            print("Test accuracy: %.1f%%" % accuracy(predictions, test_labels))


    



In [111]:

    
hidden_nodes = 1024
batch_size = 128

graph_relu = tf.Graph()


with graph_relu.as_default():
    tf_train_dataset = tf.placeholder(tf.float32)
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))  
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    keep_p = tf.placeholder(tf.float32)
    
    # Input layer
    input_weights = weight_variable([image_size*image_size, hidden_nodes])
    input_biases = bias_variable([hidden_nodes])
    
    # Hidden layer
    hidden_1 = tf.nn.relu(tf.matmul(tf_train_dataset,input_weights) + input_biases)
    hidden_dropout = tf.nn.dropout(hidden_1,keep_prob = keep_p)
    hidden_weights = weight_variable([hidden_nodes,num_labels])
    hidden_biases = bias_variable([num_labels])
    
    # Output layer
    logits = tf.matmul(hidden_dropout, hidden_weights) + hidden_biases
    loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    #l2_beta = 0.005
    #loss = (loss_basic + l2_beta *(tf.nn.l2_loss(hidden_weights) 
                                   #+ tf.nn.l2_loss(input_weights)))
  
  # Optimizer.
    global_step = tf.Variable(0, trainable = False)  # count the number of steps taken.
    starter_learning_rate = 0.008
    learning_rate = tf.train.exponential_decay(starter_learning_rate, 
                                               global_step = global_step,
                                               decay_steps = 10000,
                                              decay_rate = 0.8,
                                              staircase = True)
    
    optimizer = tf.train.GradientDescentOptimizer(
        learning_rate).minimize(loss,global_step = global_step)
  
  # Predictions for the training, validation, and test data.
    prediction = tf.nn.softmax(logits)


    



In [114]:

    
num_steps = 3001

with tf.Session(graph=graph_relu) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_p: 0.5}
        _, l, predictions = session.run(
            [optimizer, loss, prediction], feed_dict = feed_dict)
        
        if (step % 500 == 0):
            print("Training loss at step %d: %f" % (step, l))
            print("Training accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            
            feed_dict = { tf_train_dataset: valid_dataset, keep_p: 1}
            predictions = session.run(prediction, feed_dict = feed_dict)
            
            print("Validation accuracy: %.1f%%" % accuracy(predictions, valid_labels))
            
            feed_dict = { tf_train_dataset: test_dataset, keep_p: 1}
            predictions = session.run(prediction, feed_dict = feed_dict)
            
            print("Test accuracy: %.1f%%" % accuracy(predictions, test_labels))


    



In [13]:

    
hidden_nodes = 1024
batch_size = 128

def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev = 0.1)
    return tf.Variable(initial)

def bias_variable(shape):
    initial = tf.zeros(shape=shape)
    return tf.Variable(initial)

graph_multi = tf.Graph()


with graph_multi.as_default():
    tf_train_dataset = tf.placeholder(tf.float32)
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))  
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    keep_p = tf.placeholder(tf.float32)
    
    # Input layer
    initial_weights = weight_variable([image_size*image_size, hidden_nodes])
    initial_biases = bias_variable([hidden_nodes])
    
    hidden_weights_1 = weight_variable([hidden_nodes,hidden_nodes])
    hidden_biases_1 = bias_variable([hidden_nodes])
    
    hidden_weights_2 = weight_variable([hidden_nodes,hidden_nodes])
    hidden_biases_2 = bias_variable([hidden_nodes])
    
    hidden_weights_3 = weight_variable([hidden_nodes,num_labels])
    hidden_biases_3 = bias_variable([num_labels])
    
    def model(dataset):
        # Hidden layer 1
        hidden_1 = tf.nn.relu(tf.matmul(dataset,initial_weights) + initial_biases)
        hidden_dropout_1 = tf.nn.dropout(hidden_1,keep_prob = keep_p)
    
    
        # Hidden layer 2
        hidden_2 = tf.nn.relu(tf.matmul(hidden_dropout_1,hidden_weights_1) + hidden_biases_1)
        hidden_dropout_2 = tf.nn.dropout(hidden_2,keep_prob = keep_p)
    
    
        # Hidden layer 3
        hidden_3 = tf.nn.relu(tf.matmul(hidden_dropout_2,hidden_weights_2) + hidden_biases_2)
        hidden_dropout_3 = tf.nn.dropout(hidden_3,keep_prob = keep_p)
        
        return tf.matmul(hidden_dropout_3, hidden_weights_3) + hidden_biases_3
    
    # Output layer
    logits = model(tf_train_dataset)
    loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    #l2_beta = 0.5e-3
    #loss = (loss_basic + l2_beta *(tf.nn.l2_loss(initial_weights) 
                                   #+ tf.nn.l2_loss(hidden_weights_1)
                                  #+ tf.nn.l2_loss(hidden_weights_2)
                                  #+ tf.nn.l2_loss(hidden_weights_3)))
  
  # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.05).minimize(loss)
  
  # Predictions for the training, validation, and test data.
    prediction = tf.nn.softmax(logits)


    



In [15]:

    
num_steps = 1001

with tf.Session(graph=graph_multi) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_p: 0.5}
        _, l, predictions = session.run(
            [optimizer, loss, prediction], feed_dict = feed_dict)
        
        if (step % 200 == 0):
            print("Training loss at step %d: %f" % (step, l))
            print("Training accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            
            feed_dict = { tf_train_dataset: valid_dataset, keep_p: 1}
            predictions = session.run(prediction, feed_dict = feed_dict)
            
            print("Validation accuracy: %.1f%%" % accuracy(predictions, valid_labels))
            
            feed_dict = { tf_train_dataset: test_dataset, keep_p: 1}
            predictions = session.run(prediction, feed_dict = feed_dict)
            
            print("Test accuracy: %.1f%%" % accuracy(predictions, test_labels))


    



In [ ]:

    
 


    

