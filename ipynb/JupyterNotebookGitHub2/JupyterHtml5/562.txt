
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128
beta=0.01
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  # Loss function

  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    
  # regularization L2
  regularizer=tf.nn.l2_loss(weights)
  loss=tf.reduce_mean(loss +beta*regularizer)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 128
num_hidden_nodes=1024
beta = 0.01
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_nodes]))
  biases = tf.Variable(tf.zeros([num_hidden_nodes]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes, num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  a1 =  tf.matmul(tf_train_dataset, weights) + biases
  z1= tf.nn.relu(a1)
  logits = tf.matmul(z1,weights2) + biases2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  
  # regulizer
  regularizers=tf.nn.l2_loss(weights)+tf.nn.l2_loss(weights2)
  loss=tf.reduce_mean(loss+beta*regularizers)  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  #valid
  layer_1_valid=tf.nn.relu(tf.matmul(tf_valid_dataset,weights)+biases)
  logits_valid= tf.matmul(layer_1_valid,weights2)+biases2
    
  valid_prediction = tf.nn.softmax(logits_valid)
  # prediction
  layer_1_prediction=tf.nn.relu(tf.matmul(tf_test_dataset,weights)+biases)
  logits_prediction= tf.matmul(layer_1_prediction,weights2)+biases2 
    
  test_prediction = tf.nn.softmax(logits_prediction)


    



In [8]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [9]:

    
batch_size = 500
num_hidden_nodes=1024
beta = 0.01
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_nodes]))
  biases = tf.Variable(tf.zeros([num_hidden_nodes]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes, num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  a1 =  tf.matmul(tf_train_dataset, weights) + biases
  z1= tf.nn.relu(a1)
  logits = tf.matmul(z1,weights2) + biases2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  
  # regulizer
  regularizers=tf.nn.l2_loss(weights)+tf.nn.l2_loss(weights2)
  loss=tf.reduce_mean(loss+beta*regularizers)  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  #valid
  layer_1_valid=tf.nn.relu(tf.matmul(tf_valid_dataset,weights)+biases)
  logits_valid= tf.matmul(layer_1_valid,weights2)+biases2
    
  valid_prediction = tf.nn.softmax(logits_valid)
  # prediction
  layer_1_prediction=tf.nn.relu(tf.matmul(tf_test_dataset,weights)+biases)
  logits_prediction= tf.matmul(layer_1_prediction,weights2)+biases2 
    
  test_prediction = tf.nn.softmax(logits_prediction)


    



In [10]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
batch_size = 128
num_hidden_nodes=1024
beta = 0.01
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_nodes]))
  biases = tf.Variable(tf.zeros([num_hidden_nodes]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes, num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  a1 =  tf.matmul(tf_train_dataset, weights) + biases
  z1= tf.nn.relu(a1)
  
  # dropout
  keep_prob=tf.placeholder("float")
  z1_dropout=tf.nn.dropout(z1,keep_prob)

    
  logits = tf.matmul(z1_dropout,weights2) + biases2
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  
  # regulizer
  regularizers=tf.nn.l2_loss(weights)+tf.nn.l2_loss(weights2)
  loss=tf.reduce_mean(loss+beta*regularizers)  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  #valid
  layer_1_valid=tf.nn.relu(tf.matmul(tf_valid_dataset,weights)+biases)
  logits_valid= tf.matmul(layer_1_valid,weights2)+biases2
    
  valid_prediction = tf.nn.softmax(logits_valid)
  # prediction
  layer_1_prediction=tf.nn.relu(tf.matmul(tf_test_dataset,weights)+biases)
  logits_prediction= tf.matmul(layer_1_prediction,weights2)+biases2 
    
  test_prediction = tf.nn.softmax(logits_prediction)


    



In [12]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,keep_prob:0.5}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [48]:

    
import math


    



In [49]:

    
batch_size = 128
num_hidden_nodes=1024
num_hidden_nodes2=int(num_hidden_nodes*0.5)



beta = 0.001




graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  
    
    
  # Variables.
    # layer 1  (728*1024)
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_nodes], stddev=math.sqrt(2.0/(image_size*image_size))))
  biases = tf.Variable(tf.zeros([num_hidden_nodes]))
    #layer 2 (1024*512)
  weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes, num_hidden_nodes2], stddev=math.sqrt(2.0/num_hidden_nodes)))
  biases2 = tf.Variable(tf.zeros([num_hidden_nodes2]))
   #layer 3  (512*10)
  weights3 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes2, num_labels],stddev=math.sqrt(2.0/num_hidden_nodes2)))
  biases3 = tf.Variable(tf.zeros([num_labels]))





  # Training computation.
    #layer1
  a1 =tf.matmul(tf_train_dataset,weights)+biases
  z1= tf.nn.relu(a1)
  
  # dropout
  keep_prob=tf.placeholder("float")
  z1_dropout=tf.nn.dropout(z1,keep_prob)
    
 #layer 2
  a2=tf.matmul(z1_dropout,weights2)+biases2
  z2=tf.nn.relu(a2)
  z2_dropout=tf.nn.dropout(z2,keep_prob)  


    
    
    
#layer output    
  logits = tf.matmul(z2_dropout,weights3) + biases3
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  
  # regulizer
  regularizers=tf.nn.l2_loss(weights)+tf.nn.l2_loss(weights2)+tf.nn.l2_loss(weights3)
  loss=tf.reduce_mean(loss+beta*regularizers)  
  # Optimizer.
  # agregando un learning rate descendiente
  global_step=tf.Variable(0)
  start_learning_rate=0.5
  learning_rate=tf.train.exponential_decay(start_learning_rate,global_step,100000,0.96,staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  #valid
  layer_1_valid=tf.nn.relu(tf.matmul(tf_valid_dataset,weights)+biases)
  layer_2_valid=tf.nn.relu(tf.matmul(layer_1_valid,weights2)+biases2) 
  

  logits_valid= tf.matmul(layer_2_valid,weights3)+biases3
    
  valid_prediction = tf.nn.softmax(logits_valid)
  # prediction
  layer_1_prediction=tf.nn.relu(tf.matmul(tf_test_dataset,weights)+biases)
  layer_2_prediction=tf.nn.relu(tf.matmul(layer_1_prediction,weights2)+biases2)
    
  logits_prediction= tf.matmul(layer_2_prediction,weights3)+biases3 
    
  test_prediction = tf.nn.softmax(logits_prediction)


    



In [50]:

    
num_steps =15000

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,keep_prob:0.5}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [51]:

    
batch_size = 128
num_hidden_nodes=1024
num_hidden_nodes2=int(num_hidden_nodes*0.5)
num_hidden_nodes3=int(num_hidden_nodes*np.power(0.5, 2))
num_hidden_nodes4=int(num_hidden_nodes*np.power(0.5, 3))
num_hidden_nodes5=int(num_hidden_nodes*np.power(0.5, 4))
num_hidden_nodes6=int(num_hidden_nodes*np.power(0.5, 5))



beta = 0.001




graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  
    
    
  # Variables.
    # layer 1  (728*1024)
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_nodes],stddev=math.sqrt(2.0/( image_size * image_size))))
  biases = tf.Variable(tf.zeros([num_hidden_nodes]))    #layer 2 (1024*512)
  weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes, num_hidden_nodes2],stddev=math.sqrt(2.0/num_hidden_nodes)))
  biases2 = tf.Variable(tf.zeros([num_hidden_nodes2]))
   #layer 3  (512*256)
  weights3 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes2, num_hidden_nodes3],stddev=math.sqrt(2.0/num_hidden_nodes2)))
  biases3 = tf.Variable(tf.zeros([num_hidden_nodes3]))

   #layer 4 (256*128)
  weights4 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes3, num_hidden_nodes4],stddev=math.sqrt(2.0/num_hidden_nodes3)))
  biases4 = tf.Variable(tf.zeros([num_hidden_nodes4]))

   #layer 5 (128*64)
  weights5 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes4, num_hidden_nodes5],stddev=math.sqrt(2.0/num_hidden_nodes4)))
  biases5 = tf.Variable(tf.zeros([num_hidden_nodes5]))

   #layer 6 (64*10)
  weights6 = tf.Variable(
    tf.truncated_normal([num_hidden_nodes5, num_labels],stddev=math.sqrt(2.0/num_hidden_nodes5)))
  biases6 = tf.Variable(tf.zeros([num_labels]))




  # Training computation.
    #layer1
  a1 =tf.matmul(tf_train_dataset,weights)+biases
  z1= tf.nn.relu(a1)
  
  # dropout
  keep_prob=tf.placeholder("float")
  z1_dropout=tf.nn.dropout(z1,keep_prob)
    
 #layer 2
  a2=tf.matmul(z1_dropout,weights2)+biases2
  z2=tf.nn.relu(a2)
  z2_dropout=tf.nn.dropout(z2,keep_prob)  

 #layer 3
  a3=tf.matmul(z2_dropout,weights3)+biases3
  z3=tf.nn.relu(a3)
  z3_dropout=tf.nn.dropout(z3,keep_prob)  

    
 #layer 4
  a4=tf.matmul(z3_dropout,weights4)+biases4
  z4=tf.nn.relu(a4)
  z4_dropout=tf.nn.dropout(z4,keep_prob)  

 #layer 4
  a5=tf.matmul(z4_dropout,weights5)+biases5
  z5=tf.nn.relu(a5)
  z5_dropout=tf.nn.dropout(z5,keep_prob)  
    
    
    
    
#layer output    
  logits = tf.matmul(z5_dropout,weights6) + biases6
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
  
  # regulizer
  regularizers=tf.nn.l2_loss(weights)+tf.nn.l2_loss(weights2)+tf.nn.l2_loss(weights3)+tf.nn.l2_loss(weights4)+tf.nn.l2_loss(weights5)+tf.nn.l2_loss(weights6)
  loss=tf.reduce_mean(loss+beta*regularizers)  
  # Optimizer.
  # agregando un learning rate descendiente
  global_step=tf.Variable(0)
  start_learning_rate=0.5
  learning_rate=tf.train.exponential_decay(start_learning_rate,global_step,100000,0.96,staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  #valid
  layer_1_valid=tf.nn.relu(tf.matmul(tf_valid_dataset,weights)+biases)
  layer_2_valid=tf.nn.relu(tf.matmul(layer_1_valid,weights2)+biases2) 
  layer_3_valid=tf.nn.relu(tf.matmul(layer_2_valid,weights3)+biases3)  
  layer_4_valid=tf.nn.relu(tf.matmul(layer_3_valid,weights4)+biases4)
  layer_5_valid=tf.nn.relu(tf.matmul(layer_4_valid,weights5)+biases5)
  

  logits_valid= tf.matmul(layer_5_valid,weights6)+biases6
    
  valid_prediction = tf.nn.softmax(logits_valid)
  # prediction
  layer_1_prediction=tf.nn.relu(tf.matmul(tf_test_dataset,weights)+biases)
  layer_2_prediction=tf.nn.relu(tf.matmul(layer_1_prediction,weights2)+biases2)
  layer_3_prediction=tf.nn.relu(tf.matmul(layer_2_prediction,weights3)+biases3)
  layer_4_prediction=tf.nn.relu(tf.matmul(layer_3_prediction,weights4)+biases4)
  layer_5_prediction=tf.nn.relu(tf.matmul(layer_4_prediction,weights5)+biases5)
    
  logits_prediction= tf.matmul(layer_5_prediction,weights6)+biases6 
    
  test_prediction = tf.nn.softmax(logits_prediction)


    



In [52]:

    
num_steps = 15000

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,keep_prob:0.5}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    



In [ ]:

    
 


    

