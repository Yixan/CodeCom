
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128

hiddel_nodes = 50

num_labels = 10


graph = tf.Graph()



with graph.as_default():
    # Variables.
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, hiddel_nodes]))
    biases = tf.Variable(tf.zeros([hiddel_nodes]))
    weights2 = tf.Variable(tf.truncated_normal([hiddel_nodes, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))

    def multi_layer_net(data_st):
      # Training computation.
      logits1 = tf.matmul(data_st, weights) + biases
      # number of hidden nodes
      hidden = tf.nn.relu(logits1)
      logits2 = tf.matmul(hidden, weights2) + biases2
      return logits2
    
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    logits2 = multi_layer_net(tf_train_dataset)
    eta = 0.01
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits2)
                         + eta * tf.nn.l2_loss(weights)
                         + eta * tf.nn.l2_loss(biases)
                         + eta * tf.nn.l2_loss(weights2)
                         + eta * tf.nn.l2_loss(biases2))

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits2)
    valid_prediction = tf.nn.softmax(multi_layer_net(tf_valid_dataset))
    test_prediction = tf.nn.softmax(multi_layer_net(tf_test_dataset))


    



In [6]:

    
num_steps = 10000

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [9]:

    
num_steps = 3

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for stepp in range(100):
      for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 10 == 0 and stepp % 10 ==0):
          print("Minibatch loss at step %d: %f" % (step, l))
          print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
          print("Validation accuracy: %.1f%%" % accuracy(
            valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [12]:

    
batch_size = 128

hiddel_nodes = 50

num_labels = 10


graph = tf.Graph()



with graph.as_default():
    # Variables.
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, hiddel_nodes]))
    biases = tf.Variable(tf.zeros([hiddel_nodes]))
    weights2 = tf.Variable(tf.truncated_normal([hiddel_nodes, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))

    def multi_layer_net(data_st, train=True):
      # Training computation.
      logits1 = tf.matmul(data_st, weights) + biases
      # number of hidden nodes
      hidden = tf.nn.relu(logits1)
      if train:
        dp = tf.nn.dropout(hidden, 0.5)
        logits2 = tf.matmul(dp, weights2) + biases2
        return logits2
      else:
        logits2 = tf.matmul(hidden, weights2) + biases2
        return logits2
    
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    logits2 = multi_layer_net(tf_train_dataset)
    eta = 0.01
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits2)
                         + eta * tf.nn.l2_loss(weights)
                         + eta * tf.nn.l2_loss(biases)
                         + eta * tf.nn.l2_loss(weights2)
                         + eta * tf.nn.l2_loss(biases2))

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits2)
    valid_prediction = tf.nn.softmax(multi_layer_net(tf_valid_dataset, train=False))
    test_prediction = tf.nn.softmax(multi_layer_net(tf_test_dataset, train=False))


    



In [13]:

    
num_steps = 3

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for stepp in range(100):
      for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 10 == 0 and stepp % 10 ==0):
          print("Minibatch loss at step %d: %f" % (step, l))
          print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
          print("Validation accuracy: %.1f%%" % accuracy(
            valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [36]:

    
tf.contrib.layers.xavier_initializer()


    



In [60]:

    
batch_size = 128

hiddel_nodes = 500
hiddel_nodes2 = 100
num_labels = 10



graph = tf.Graph()



with graph.as_default():
    initializer = tf.contrib.layers.xavier_initializer()
    #initializer = tf.truncated_normal

    # Variables.
    weights = tf.Variable(initializer([image_size * image_size, hiddel_nodes]))
    biases = tf.Variable(initializer([hiddel_nodes]))
    weights2 = tf.Variable(initializer([hiddel_nodes, hiddel_nodes2]))
    biases2 = tf.Variable(initializer([hiddel_nodes2]))
    weights3 = tf.Variable(initializer([hiddel_nodes2, num_labels]))
    biases3 = tf.Variable(initializer([num_labels]))
    

    def multi_layer_net(data_st, train=True):
      # Training computation.
      logits1 = tf.matmul(data_st, weights) + biases
      # number of hidden nodes
      hidden = tf.nn.relu(logits1)
      if train:
        dp = tf.nn.dropout(hidden, 0.7)
        logits2 = tf.matmul(dp, weights2) + biases2
        hidden2 = tf.nn.relu(logits2)
        logits3 = tf.matmul(hidden2, weights3) + biases3
        return logits3
      else:
        logits2 = tf.matmul(hidden, weights2) + biases2
        hidden2 = tf.nn.relu(logits2)
        logits3 = tf.matmul(hidden2, weights3) + biases3
        return logits3
    
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    logits2 = multi_layer_net(tf_train_dataset)
    eta = 0.01
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits2)
                         + eta * tf.nn.l2_loss(weights)
                         + eta * tf.nn.l2_loss(biases)
                         + eta * tf.nn.l2_loss(weights2)
                         + eta * tf.nn.l2_loss(biases2)
                         + eta * tf.nn.l2_loss(weights3)
                         + eta * tf.nn.l2_loss(biases3))

    # Optimizer.
    global_step = tf.Variable(0)  # count the number of steps taken.
    learning_rate = tf.train.exponential_decay(0.5, global_step, 900, 0.25)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits2)
    valid_prediction = tf.nn.softmax(multi_layer_net(tf_valid_dataset, False))
    test_prediction = tf.nn.softmax(multi_layer_net(tf_test_dataset, False))


    



In [61]:

    
num_steps = 10000

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

