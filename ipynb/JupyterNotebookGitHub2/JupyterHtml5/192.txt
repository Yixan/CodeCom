
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
from time import time

# First reload the data we generated in notmist.ipynb.
pickle_file = 'proj1/notMNIST_original.pickle'

with open(pickle_file, 'rb') as f:
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save  # hint to help gc free up memory
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)

def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])

# Reformat into a shape that's more adapted to the models we are going to train:
# - data as a flat matrix
# - labels as float 1-hot encoding
image_size = 28
num_labels = 10
def reformat(dataset,labels):
    dataset = dataset.reshape([-1, image_size * image_size]).astype(np.float32)
    labels = (np.arange(num_labels) == labels[:, None]).astype(np.float32)
    return(dataset, labels)
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [14]:

    
# LR first
# With gradient descent training, even this much data is prohibitive.
# Subset the training data for faster turnaround.
train_subset = 10000
beta = 0 # changes regulartion term, big value prevents overfitting
LR = 0.5
graph = tf.Graph()\

with graph.as_default():
    
    # input data.
    # Load the training, validation and test data into constants that are
    # attached to the graph
    
    tf_train_dataset = tf.constant(train_dataset[:train_subset,:])
    tf_train_labels  = tf.constant(train_labels[:train_subset])
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables.
    # These are the parameters that we are going to be training. The weight
    # matrix will be initialized using random values following a (truncated)
    # normal distribution. The biases get initialized to zero.
    
    weights = tf.Variable(
       tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    # Training computation.
    # We multiply the inputs with the weight matrix, and add biases. We compute
    # the softmax and cross-entropy (it's one operation in TensorFlow, because
    # it's very common, and it can be optimized). We take the average of this
    # cross-entropy across all training examples: that's our loss.
    
    logits = tf.matmul(tf_train_dataset, weights) + biases # 10000*784, 784*10
    loss = tf.reduce_mean(
       tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) 
    regloss = tf.nn.l2_loss(weights)
    total_loss = loss + beta*regloss
    
    # Optimizer.
    # We are going to find the minimum of this loss using gradient descent.
    
    ##global_step = tf.Variable(0)  # count the number of steps taken.
    #learning_rate = tf.train.exponential_decay(
    #      0.7,                      # Base learning rate.
    #      global_step,   # Current index into the dataset.
    #      801,                # Decay step.
    #      0.95,                      # Decay rate.
    #      staircase=True)
    ##Optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(total_loss, global_step = global_step)

    Optimizer = tf.train.GradientDescentOptimizer(LR).minimize(total_loss)
    
    # Predictions for training, validation, and test data.
    # These are not part of training, but merely here so that we can report
    # accuracy figures as we train.
    
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
      tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)
    


    



In [15]:

    
# Let's run this computation and iterate
num_steps = 801
t0 = time()
with tf.Session(graph=graph) as session:
    # This is a one-time operation which ensures the parameters get initialized
    # as we described in the graph: random weights for the matrix, zeros for the
    # biases.
    tf.initialize_all_variables().run()
    loss_step = np.zeros(num_steps)
    print('Initialized')
    for step in range(num_steps):
        # Run the computations. We tell .run() that we want to run the optimization
        # and get the loss value and the training predictions returned as numpy arrays.
        if step == 0:
            print('initial',train_prediction)
        _, l, predictions = session.run([Optimizer, total_loss, train_prediction])
        if (step % 100 ==0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, train_labels[:train_subset,:]))
            # Calling .eval() on validation_prediction is basically like calling run(), but
            # just to get that one numpy array. Note that it recomputes all its graph
            # dependencies.
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
            loss_step[step] = l
            
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))
    print('In',time() - t0,'seconds')


    



In [80]:

    
# LR with SGD second
batch_size = 128
beta = 0
LR = 0.5

graph = tf.Graph()

with graph.as_default():
    # Input data. For the training data, we use a placeholder that 
    # will be fed at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape = (batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables.
    weights = tf.Variable(
       tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(
       tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regloss = tf.nn.l2_loss(weights)
    total_loss = loss + beta*regloss
    
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(LR).minimize(total_loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
          tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [81]:

    
num_steps = 3001
t0 = time()
with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        ## step2 = step % 4
        offset = (step * batch_size) % (train_labels.shape[0]-batch_size)
        
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset+batch_size),:]
        batch_labels = train_labels[offset:(offset+batch_size),:]
        
        # Prepare a dictionary telling the session where to feed the 
        # minibatch. The key of the dictionary is the placeholder node of the
        # graph to be fed and the value is the numpy array.
        
        feed_dict = {tf_train_dataset : batch_data, 
                     tf_train_labels : batch_labels}
        _, l, predictions = session.run(
                [optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
    print('In',time() - t0,'seconds')


        


    



In [9]:

    
# NN with SGD and with regularization : third
batch_size = 128
num_nodes = 1024
graph = tf.Graph()
beta = 0.0007
LR = 0.1

with graph.as_default():
    # Input data. For the training data, we use a placeholder that 
    # will be fed at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape = (batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables.
    weights1 = tf.Variable(
       tf.truncated_normal([image_size * image_size, num_nodes],stddev = 0.1))
    biases1 = tf.Variable(tf.zeros([num_nodes]))
    weights2 = tf.Variable(
       tf.truncated_normal([num_nodes, num_labels],stddev = 0.1))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    
    # Training computation.
    logits1 = tf.matmul(tf_train_dataset, weights1) + biases1
    tf_hidden_dataset = tf.nn.relu(logits1)
    logits = tf.matmul(tf_hidden_dataset, weights2) + biases2
    
    loss = tf.reduce_mean(
       tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regloss = tf.nn.l2_loss(weights1) +  tf.nn.l2_loss(weights2)
    total_loss = loss + beta*regloss
    
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(LR).minimize(total_loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    
    first_valid = tf.matmul(tf_valid_dataset, weights1) + biases1
    logits_valid = tf.matmul(tf.nn.relu(first_valid), weights2) + biases2
    valid_prediction = tf.nn.softmax(logits_valid)
    
    first_test = tf.matmul(tf_test_dataset, weights1) + biases1
    logits_test = tf.matmul(tf.nn.relu(first_test), weights2) + biases2
    test_prediction = tf.nn.softmax(logits_test)


    



In [11]:

    
num_steps = 20001
from time import time
t0 = time()

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        step2 = step % 4
        offset = (step2 * batch_size) % (train_labels.shape[0]-batch_size)
        
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset+batch_size),:]
        batch_labels = train_labels[offset:(offset+batch_size),:]
        
        # Prepare a dictionary telling the session where to feed the 
        # minibatch. The key of the dictionary is the placeholder node of the
        # graph to be fed and the value is the numpy array.
        
        feed_dict = {tf_train_dataset : batch_data, 
                     tf_train_labels : batch_labels}
        _, l, predictions = session.run(
                [optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
    print('In',time() - t0,'seconds')


    



In [21]:

    
# NN with SGD and with dropout : fourth
batch_size = 128
num_nodes = 1024
graph = tf.Graph()
beta = 0
LR = 0.1

with graph.as_default():
    # Input data. For the training data, we use a placeholder that 
    # will be fed at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape = (batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables.
    weights1 = tf.Variable(
       tf.truncated_normal([image_size * image_size, num_nodes],stddev =0.1))
    biases1 = tf.Variable(tf.zeros([num_nodes]))
    weights2 = tf.Variable(
       tf.truncated_normal([num_nodes, num_labels],stddev = 0.1))
    biases2 = tf.Variable(tf.zeros([num_labels]))
    
    # Training computation.
    logits1 = tf.matmul(tf_train_dataset, weights1) + biases1
    logits1 = tf.nn.dropout(logits1,0.7)
    tf_hidden_dataset = tf.nn.relu(logits1)
    tf_hidden_dataset = tf.nn.dropout(tf_hidden_dataset,0.7)
    logits = tf.matmul(tf_hidden_dataset, weights2) + biases2
    
    loss = tf.reduce_mean(
       tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regloss = tf.nn.l2_loss(weights1) + tf.nn.l2_loss(weights2)
    total_loss = loss + beta*regloss
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(LR).minimize(total_loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    
    first_valid = tf.matmul(tf_valid_dataset, weights1) + biases1
    logits_valid = tf.matmul(tf.nn.relu(first_valid), weights2) + biases2
    valid_prediction = tf.nn.softmax(logits_valid)
    
    first_test = tf.matmul(tf_test_dataset, weights1) + biases1
    logits_test = tf.matmul(tf.nn.relu(first_test), weights2) + biases2
    test_prediction = tf.nn.softmax(logits_test)


    



In [22]:

    
num_steps = 20001

t0 = time()

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        #step2 = step % 4
        offset = (step * batch_size) % (train_labels.shape[0]-batch_size)
        
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset+batch_size),:]
        batch_labels = train_labels[offset:(offset+batch_size),:]
        
        # Prepare a dictionary telling the session where to feed the 
        # minibatch. The key of the dictionary is the placeholder node of the
        # graph to be fed and the value is the numpy array.
        
        feed_dict = {tf_train_dataset : batch_data, 
                     tf_train_labels : batch_labels}
        _, l, predictions = session.run(
                [optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 2000 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
    print('In',time() - t0,'seconds')


    



In [38]:

    
# NN with SGD and with dropout : fourth
batch_size = 128
num_nodes1 = 128
num_nodes2 = 128
graph = tf.Graph()
beta = 0.007
LR = 0.3

with graph.as_default():
    # Input data. For the training data, we use a placeholder that 
    # will be fed at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32, shape = (batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape = (batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variables.
    weights1 = tf.Variable(
           tf.truncated_normal([image_size * image_size, num_nodes1],stddev =0.1))
    biases1 = tf.Variable(tf.zeros([num_nodes1]))
    weights2 = tf.Variable(
           tf.truncated_normal([num_nodes1, num_nodes2],stddev = 0.1))
    biases2 = tf.Variable(tf.zeros([num_nodes2]))
        
    weights3 = tf.Variable(
           tf.truncated_normal([num_nodes2, num_labels],stddev = 0.1))
    biases3 = tf.Variable(tf.zeros([num_labels]))
    
    # Model.
    def model(data):
        # Training computation.
        logits1 = tf.matmul(data, weights1) + biases1
        #logits1 = tf.nn.dropout(logits1,0.5)
        tf_layer1 = tf.nn.relu(logits1)
        #tf_layer1 = tf.nn.dropout(tf_layer1,0.5)
        
        logits2 = tf.matmul(tf_layer1, weights2) + biases2
        #logits2 = tf.nn.dropout(logits2, 0.5)
        tf_layer2 = tf.nn.relu(logits2)
        #tf_layer2 = tf.nn.dropout(tf_layer2,0.5)
        
        logits = tf.matmul(tf_layer2, weights3) + biases3
        
        print('data input:', data.get_shape().as_list())
        print('logits1 output:', logits1.get_shape().as_list())
        print('tf_layer1:', tf_layer1.get_shape().as_list())
        print('tf_layer2:', tf_layer2.get_shape().as_list())
        print('logits output:', logits.get_shape().as_list())
        return(logits)
    
    logits = model(tf_train_dataset)
    loss = tf.reduce_mean(
       tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regloss = tf.nn.l2_loss(weights1) + tf.nn.l2_loss(weights2) + tf.nn.l2_loss(weights3)
    total_loss = loss + beta*regloss
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(LR).minimize(total_loss)
    
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    
    logits_valid = model(tf_valid_dataset)
    valid_prediction = tf.nn.softmax(logits_valid)
    
    logits_test = model(tf_test_dataset)
    test_prediction = tf.nn.softmax(logits_test)


    



In [39]:

    
num_steps = 20001

t0 = time()

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        #step2 = step % 4
        offset = (step * batch_size) % (train_labels.shape[0]-batch_size)
        
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset+batch_size),:]
        batch_labels = train_labels[offset:(offset+batch_size),:]
        
        # Prepare a dictionary telling the session where to feed the 
        # minibatch. The key of the dictionary is the placeholder node of the
        # graph to be fed and the value is the numpy array.
        
        feed_dict = {tf_train_dataset : batch_data, 
                     tf_train_labels : batch_labels}
        _, l, predictions = session.run(
                [optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 2000 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
    print('In',time() - t0,'seconds')


    



In [ ]:

    
 


    

