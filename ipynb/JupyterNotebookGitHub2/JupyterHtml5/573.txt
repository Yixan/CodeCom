
In [2]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [3]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [5]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
def prediction(X1, W1, b1):
    logits = tf.matmul(X1, W1) + b1
    return tf.nn.softmax(logits)


    



In [42]:

    
batch_size = 128
beta = 0.001

graph = tf.Graph()
with graph.as_default():
    # Input data
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size*image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    # Variable
    W1 = tf.Variable(tf.truncated_normal([image_size*image_size, num_labels]))
    b1 = tf.Variable(tf.zeros([num_labels]))
    
    # Train computation
    logits = tf.matmul(tf_train_dataset, W1) + b1
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    #add l2_loss to loss
    loss += beta * tf.nn.l2_loss(W1)
    
    # Optimization
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions on training, validation and test data
    
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = prediction(tf_valid_dataset, W1, b1)
    test_prediction = prediction(tf_test_dataset, W1, b1)


    



In [43]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
def prediction_NN(X1,W1,b1,W2,b2):
    Y1 = tf.matmul(X1, W1) + b1
    X2 = tf.nn.relu(Y1)
    Y2 = tf.matmul(X2, W2) + b2
    return tf.nn.softmax(Y2)


    



In [8]:

    
batch_size = 128
hidden_nodes = 1024
beta = 0.001
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
  b1 = tf.Variable(tf.zeros([hidden_nodes]))
  W2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))
  # Go through RELU   
  Y1 = tf.matmul(tf_train_dataset, W1) + b1 
  X2 = tf.nn.relu(Y1)
  logits = tf.matmul(X2, W2) + b2
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  #add l2_loss to loss
  loss += beta*(tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2))  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = prediction_NN(tf_valid_dataset,W1,b1,W2,b2)
  test_prediction = prediction_NN(tf_test_dataset,W1,b1,W2,b2)


    



In [9]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [5]:

    
def prediction_NN(X1,W1,b1,W2,b2):
    Y1 = tf.matmul(X1, W1) + b1
    X2 = tf.nn.relu(Y1)
    Y2 = tf.matmul(X2, W2) + b2
    return tf.nn.softmax(Y2)


    



In [6]:

    
batch_size = 16
train_size = 50
hidden_nodes = 1024
beta = 0.001
# Make train data set smaller
mini_train_dataset = train_dataset[:train_size]
mini_train_labels = train_labels[:train_size]

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
  b1 = tf.Variable(tf.zeros([hidden_nodes]))
  W2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))
  # Go through RELU   
  Y1 = tf.matmul(tf_train_dataset, W1) + b1 
  X2 = tf.nn.relu(Y1)
  logits = tf.matmul(X2, W2) + b2
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  #add l2_loss to loss
  loss += beta*(tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2))  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = prediction_NN(tf_valid_dataset,W1,b1,W2,b2)
  test_prediction = prediction_NN(tf_test_dataset,W1,b1,W2,b2)


    



In [7]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (mini_train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = mini_train_dataset[offset:(offset + batch_size), :]
    batch_labels = mini_train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [19]:

    
def prediction_NN_Drop(X1,W1,b1,W2,b2):
    Y1 = tf.matmul(X1, W1) + b1
    X2 = tf.nn.relu(Y1)
    Y2 = tf.matmul(X2, W2) + b2
    return tf.nn.softmax(Y2)


    



In [20]:

    
batch_size = 128
hidden_nodes = 1024
beta = 0.001
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  tf_keep_prob = tf.placeholder(tf.float32)

  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
  b1 = tf.Variable(tf.zeros([hidden_nodes]))
  W2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))
  
  # Go through RELU   
  Y1 = tf.matmul(tf_train_dataset, W1) + b1 
  X2 = tf.nn.relu(Y1)
  
  # Apply drop out
  X2_drop = tf.nn.dropout(X2, tf_keep_prob)
    
  logits = tf.matmul(X2_drop, W2) + b2
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  #add l2_loss to loss
  loss += beta*(tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2))  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = prediction_NN_Drop(tf_valid_dataset,W1,b1,W2,b2)
  test_prediction = prediction_NN_Drop(tf_test_dataset,W1,b1,W2,b2)


    



In [21]:

    
num_steps = 10001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, tf_keep_prob: 0.5}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [15]:

    
def prediction_NN_Drop(X1,W1,b1,W2,b2,W3,b3):
    Y1 = tf.matmul(X1, W1) + b1
    X2 = tf.nn.relu(Y1)
    Y2 = tf.matmul(X2, W2) + b2
    X3 = tf.nn.relu(Y2)
    Y3 = tf.matmul(X3, W3) + b3
    return tf.nn.softmax(Y3)

###########################################################

batch_size = 128
hidden_nodes_layer_1 = 1024
hidden_nodes_layer_2 = 512
beta = 1e-4

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  tf_keep_prob = tf.placeholder(tf.float32)

  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)

  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes_layer_1],stddev=0.1))
  b1 = tf.Variable(tf.zeros([hidden_nodes_layer_1]))
  W2 = tf.Variable(tf.truncated_normal([hidden_nodes_layer_1, hidden_nodes_layer_2],stddev=0.1))
  b2 = tf.Variable(tf.zeros([hidden_nodes_layer_2]))
  W3 = tf.Variable(tf.truncated_normal([hidden_nodes_layer_2, num_labels],stddev=0.1))
  b3 = tf.Variable(tf.zeros([num_labels]))
  
  # Go through RELU & dropout  
  Y1 = tf.matmul(tf_train_dataset, W1) + b1

  X2 = tf.nn.relu(Y1)
  X2_drop = tf.nn.dropout(X2, tf_keep_prob)
  Y2 = tf.matmul(X2_drop, W2) + b2

  X3 = tf.nn.relu(Y2)
  X3_drop = tf.nn.dropout(X3, tf_keep_prob)  
  logits = tf.matmul(X3_drop, W3) + b3

  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  
  #add l2_loss to loss
  loss += beta*(tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3))  
  
  # Optimizer & apply exponeital decay of learning rate
  global_step = tf.Variable(0)  # count the number of steps taken.
  learning_rate = tf.train.exponential_decay(0.5, global_step, 500, 0.96)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = prediction_NN_Drop(tf_valid_dataset,W1,b1,W2,b2,W3,b3)
  test_prediction = prediction_NN_Drop(tf_test_dataset,W1,b1,W2,b2,W3,b3)

############################################################################################

num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, tf_keep_prob: 0.8}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [10]:

    
def prediction_NN_Drop(X1,W1,b1,W2,b2,W3,b3,W4,b4):
    Y1 = tf.matmul(X1, W1) + b1
    X2 = tf.nn.relu(Y1)
    Y2 = tf.matmul(X2, W2) + b2
    X3 = tf.nn.relu(Y2)
    Y3 = tf.matmul(X3, W3) + b3
    X4 = tf.nn.relu(Y3)
    Y4 = tf.matmul(X4, W4) + b4
    return tf.nn.softmax(Y4)

###########################################################

batch_size = 128
hidden_nodes_layer_1 = 1024
hidden_nodes_layer_2 = 512
hidden_nodes_layer_3 = 128
beta = 1e-4
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  tf_keep_prob = tf.placeholder(tf.float32)

  # Variables.
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes_layer_1],stddev=0.1))
  b1 = tf.Variable(tf.zeros([hidden_nodes_layer_1]))
  W2 = tf.Variable(tf.truncated_normal([hidden_nodes_layer_1, hidden_nodes_layer_2],stddev=0.1))
  b2 = tf.Variable(tf.zeros([hidden_nodes_layer_2]))
  W3 = tf.Variable(tf.truncated_normal([hidden_nodes_layer_2, hidden_nodes_layer_3],stddev=0.1))
  b3 = tf.Variable(tf.zeros([hidden_nodes_layer_3]))
  W4 = tf.Variable(tf.truncated_normal([hidden_nodes_layer_3, num_labels],stddev=0.1))
  b4 = tf.Variable(tf.zeros([num_labels]))
  
  # Go through RELU   
  Y1 = tf.matmul(tf_train_dataset, W1) + b1 
  X2 = tf.nn.relu(Y1)
  X2_drop = tf.nn.dropout(X2, tf_keep_prob)

  Y2 = tf.matmul(X2_drop, W2) + b2
  X3 = tf.nn.relu(Y2)
  X3_drop = tf.nn.dropout(X3, tf_keep_prob)
    
  Y3 = tf.matmul(X3_drop, W3) + b3
  X4 = tf.nn.relu(Y3)
  X4_drop = tf.nn.dropout(X4, tf_keep_prob)
    
  logits = tf.matmul(X4_drop, W4) + b4
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  
  #add l2_loss to loss
  loss += beta*(tf.nn.l2_loss(W1) + tf.nn.l2_loss(W2) + tf.nn.l2_loss(W3) + tf.nn.l2_loss(W4))  
  
  # Optimizer & apply exponeital decay of learning rate
  global_step = tf.Variable(0)  # count the number of steps taken.
  learning_rate = tf.train.exponential_decay(0.5, global_step, 500, 0.96)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = prediction_NN_Drop(tf_valid_dataset,W1,b1,W2,b2,W3,b3,W4,b4)
  test_prediction = prediction_NN_Drop(tf_test_dataset,W1,b1,W2,b2,W3,b3,W4,b4)

############################################################################################

num_steps = 30001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, tf_keep_prob: 0.8}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 5000 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
#Attention: if set the loss at the beginning is too large (this case > 10) -> get NaN;
#changing the parameters to receive a smaller one will help.


    

