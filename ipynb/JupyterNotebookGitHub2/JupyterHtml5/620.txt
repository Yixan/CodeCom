
In [2]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [3]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [5]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [24]:

    
batch_size = 128
hidden_units = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  dataset = tf.placeholder(tf.float32)
  labels = tf.placeholder(tf.float32)
    
  with tf.name_scope('hidden'):
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_units]))
    biases = tf.Variable(tf.zeros([hidden_units]))
    hidden = tf.nn.relu(tf.matmul(dataset, weights) + biases)
    hidden_regularizer = (tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases))
    
  with tf.name_scope('logits'):
    weights = tf.Variable(
        tf.truncated_normal([hidden_units, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden, weights) + biases
    logits_regularizer = (tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases))
  
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, labels))
    
  alpha = 5e-4
  regularizer = alpha * (hidden_regularizer + logits_regularizer)
    
  loss += regularizer
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  prediction = tf.nn.softmax(logits)


    



In [25]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {dataset : batch_data, labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      feed_dict_valid = {dataset : valid_dataset, labels : valid_labels}
      valid_predictions = session.run(prediction, feed_dict=feed_dict_valid)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_predictions, valid_labels))
  feed_dict_test = {dataset : test_dataset, labels : test_labels}
  test_predictions = session.run(prediction, feed_dict=feed_dict_test)
  print("Test accuracy: %.1f%%" % accuracy(test_predictions, test_labels))


    



In [26]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % 5 #(train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {dataset : batch_data, labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      feed_dict_valid = {dataset : valid_dataset, labels : valid_labels}
      valid_predictions = session.run(prediction, feed_dict=feed_dict_valid)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_predictions, valid_labels))
  feed_dict_test = {dataset : test_dataset, labels : test_labels}
  test_predictions = session.run(prediction, feed_dict=feed_dict_test)
  print("Test accuracy: %.1f%%" % accuracy(test_predictions, test_labels))


    



In [28]:

    
batch_size = 128
hidden_units = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  dataset = tf.placeholder(tf.float32)
  labels = tf.placeholder(tf.float32)
  keep_prob = tf.placeholder(tf.float32)
    
  with tf.name_scope('hidden'):
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden_units]))
    biases = tf.Variable(tf.zeros([hidden_units]))
    hidden = tf.nn.relu(tf.matmul(dataset, weights) + biases)
    weights = tf.nn.dropout(weights, keep_prob)
    
  with tf.name_scope('logits'):
    weights = tf.Variable(
        tf.truncated_normal([hidden_units, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden, weights) + biases
  
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, labels))
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  prediction = tf.nn.softmax(logits)


    



In [32]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {dataset : batch_data, labels : batch_labels, keep_prob: 0.5}
    _, l, predictions = session.run(
      [optimizer, loss, prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      feed_dict_valid = {dataset : valid_dataset, labels : valid_labels, keep_prob: 1.0}
      valid_predictions = session.run(prediction, feed_dict=feed_dict_valid)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_predictions, valid_labels))
  feed_dict_test = {dataset : test_dataset, labels : test_labels, keep_prob: 1.0}
  test_predictions = session.run(prediction, feed_dict=feed_dict_test)
  print("Test accuracy: %.1f%%" % accuracy(test_predictions, test_labels))


    



In [72]:

    
import math

batch_size = 128
hidden1_units = 1024
hidden2_units = 300

num_steps = 3001

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  dataset = tf.placeholder(tf.float32)
  labels = tf.placeholder(tf.float32)
    
  with tf.name_scope('hidden1'):
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, hidden1_units],
                            stddev=1.0 / math.sqrt(float(image_size * image_size))))
    biases = tf.Variable(tf.zeros([hidden1_units]))
    hidden1 = tf.nn.relu(tf.matmul(dataset, weights) + biases)
    hidden1_regularizer = (tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases))
    
  with tf.name_scope('hidden2'):
    weights = tf.Variable(
        tf.truncated_normal([hidden1_units, hidden2_units],
                            stddev=1.0 / math.sqrt(float(hidden1_units))))
    biases = tf.Variable(tf.zeros([hidden2_units]))
    hidden2 = tf.nn.relu(tf.matmul(hidden1, weights) + biases)
    hidden2_regularizer = (tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases))
    

  with tf.name_scope('logits'):
    weights = tf.Variable(
        tf.truncated_normal([hidden2_units, num_labels],
                            stddev=1.0 / math.sqrt(float(hidden2_units))))
    biases = tf.Variable(tf.zeros([num_labels]))
    logits = tf.matmul(hidden2, weights) + biases
    logits_regularizer = (tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases))
  
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, labels))
    
  alpha = 5e-4
  regularizer = alpha * (hidden1_regularizer + hidden2_regularizer + logits_regularizer)
    
  loss += regularizer
  
  # Optimizer.
  #optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  global_step = tf.Variable(0)  # count the number of steps taken.
  learning_rate = tf.train.exponential_decay(0.5, global_step, num_steps, 0.96)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  prediction = tf.nn.softmax(logits)


    



In [73]:

    
with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    feed_dict = {dataset : batch_data, labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      feed_dict_valid = {dataset : valid_dataset, labels : valid_labels}
      valid_predictions = session.run(prediction, feed_dict=feed_dict_valid)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_predictions, valid_labels))
  feed_dict_test = {dataset : test_dataset, labels : test_labels}
  test_predictions = session.run(prediction, feed_dict=feed_dict_test)
  print("Test accuracy: %.1f%%" % accuracy(test_predictions, test_labels))


    



In [ ]:

    
 


    

