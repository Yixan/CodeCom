
In [6]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [173]:

    
subset = 100000
max_steps = 1001
regularization = 0.01
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.constant(train_dataset[:subset, :])
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    tf_train_labels = tf.constant(train_labels[:subset, :])
    
    weights = tf.Variable(tf.truncated_normal([image_size*image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    logits = tf.add(tf.matmul(tf_train_dataset, weights), biases)
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,tf_train_labels) + tf.mul(regularization,tf.nn.l2_loss(weights)))
    
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    
    valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf_valid_dataset, weights), biases))
    test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf_test_dataset, weights), biases))
    
with tf.Session(graph=graph) as session:
    
    tf.initialize_all_variables().run()
    print('Initialized for logistic regression')
    
    for step in range(max_steps):
        _, l, predictions = session.run([optimizer, loss, train_prediction])
        if (step % 100 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, train_labels[:subset, :]))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [401]:

    
#NN section
batch_size = 128
max_steps = 3001
regularization = 0.0015
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size*image_size))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    
    relu_size = 1024
    
    weights_1 = tf.Variable(tf.truncated_normal([image_size*image_size, relu_size]))
    biases_1 = tf.Variable(tf.zeros([relu_size]))
    
    weights_2 = tf.Variable(tf.truncated_normal([relu_size, num_labels]))
    biases_2 = tf.Variable(tf.truncated_normal([num_labels]))
    
    layer_1 = tf.add(tf.matmul(tf_train_dataset, weights_1), biases_1)
    logits = tf.add(tf.matmul(tf.nn.relu(layer_1), weights_2), biases_2)
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,tf_train_labels) + tf.mul(regularization,tf.nn.l2_loss(weights_1)) + tf.mul(regularization,tf.nn.l2_loss(weights_2)))
    
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    
    valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_1), biases_1)), weights_2), biases_2))
    test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_1), biases_1)), weights_2), biases_2))
with tf.Session(graph=graph) as session:
    
    tf.initialize_all_variables().run()
    print('Initialized for 1 layer NN')
    
    for step in range(max_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 500 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [242]:

    
#NN section
batch_size = 128
max_steps = 51
repeat_batch = 1
regularization = 0.0
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size*image_size))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    
    relu_size = 1024
    
    weights_1 = tf.Variable(tf.truncated_normal([image_size*image_size, relu_size]))
    biases_1 = tf.Variable(tf.zeros([relu_size]))
    
    weights_2 = tf.Variable(tf.truncated_normal([relu_size, num_labels]))
    biases_2 = tf.Variable(tf.truncated_normal([num_labels]))
    
    layer_1 = tf.add(tf.matmul(tf_train_dataset, weights_1), biases_1)
    logits = tf.add(tf.matmul(tf.nn.relu(layer_1), weights_2), biases_2)
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,tf_train_labels) + tf.mul(regularization,tf.nn.l2_loss(weights_1)) + tf.mul(regularization,tf.nn.l2_loss(weights_2)))
    
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    
    valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_1), biases_1)), weights_2), biases_2))
    test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_1), biases_1)), weights_2), biases_2))
with tf.Session(graph=graph) as session:
    
    tf.initialize_all_variables().run()
    print('Initialized for 1 layer NN')
    
    for step in range(max_steps):
        offset = (step%repeat_batch * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 10 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [293]:

    
#NN section
batch_size = 128
max_steps = 1001
regularization = 0.0
keep_prob = 0.3
repeat_batch = 2

graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size*image_size))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    
    relu_size = 1024
    
    weights_1 = tf.Variable(tf.truncated_normal([image_size*image_size, relu_size]))
    biases_1 = tf.Variable(tf.zeros([relu_size]))
    
    weights_2 = tf.Variable(tf.truncated_normal([relu_size, num_labels]))
    biases_2 = tf.Variable(tf.truncated_normal([num_labels]))
    
    layer_1 = tf.add(tf.matmul(tf_train_dataset, weights_1), biases_1)
    logits = tf.add(tf.matmul(tf.nn.dropout(tf.nn.relu(layer_1),keep_prob), weights_2), biases_2)
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,tf_train_labels) + tf.mul(regularization,tf.nn.l2_loss(weights_1)) + tf.mul(regularization,tf.nn.l2_loss(weights_2)))
    
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(layer_1), weights_2), biases_2))
    
    valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_1), biases_1)), weights_2), biases_2))
    test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_1), biases_1)), weights_2), biases_2))
with tf.Session(graph=graph) as session:
    
    tf.initialize_all_variables().run()
    print('Initialized for 1 layer NN')
    
    for step in range(max_steps):
        offset = (step%repeat_batch * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 500 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [426]:

    
#Single Layer
batch_size = 256
max_steps = 20001
regularization = 0.0015
relu_size = 1024
decay_steps = 1000
decay = 0.9
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size*image_size))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    
    weights_1 = tf.Variable(tf.truncated_normal([image_size*image_size, relu_size]))
    biases_1 = tf.Variable(tf.zeros([relu_size]))
    
    weights_2 = tf.Variable(tf.truncated_normal([relu_size, num_labels], stddev=np.sqrt(2/relu_size)))
    biases_2 = tf.Variable(tf.truncated_normal([num_labels], stddev=np.sqrt(2/relu_size)))
    
    layer_1 = tf.add(tf.matmul(tf_train_dataset, weights_1), biases_1)
    logits = tf.add(tf.matmul(tf.nn.relu(layer_1), weights_2), biases_2)
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,tf_train_labels) + tf.mul(regularization,tf.nn.l2_loss(weights_1)) + tf.mul(regularization,tf.nn.l2_loss(weights_2)))
    
    global_step = tf.Variable(0)  # count the number of steps taken.
    learning_rate = tf.train.exponential_decay(0.5, global_step, decay_steps, decay)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

    
    train_prediction = tf.nn.softmax(logits)
    
    valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_1), biases_1)), weights_2), biases_2))
    test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_1), biases_1)), weights_2), biases_2))
with tf.Session(graph=graph) as session:
    
    tf.initialize_all_variables().run()
    print('Initialized for 1 layer NN')
    
    for step in range(max_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 1000 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [446]:

    
#Two Layer
batch_size = 256
max_steps = 10001
regularization = 0.0015
l1_size = 1024
l2_size = 512
decay_steps = 1000
decay = 0.9
start_rate = 0.3
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size*image_size))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    
    weights_1 = tf.Variable(tf.truncated_normal([image_size*image_size, l1_size]))
    biases_1 = tf.Variable(tf.zeros([relu_size]))
    
    weights_2 = tf.Variable(tf.truncated_normal([l1_size, l2_size], stddev=np.sqrt(2/l1_size)))
    biases_2 = tf.Variable(tf.truncated_normal([l2_size]))
    
    weights_3 = tf.Variable(tf.truncated_normal([l2_size, num_labels], stddev=np.sqrt(2/l2_size)))
    biases_3 = tf.Variable(tf.truncated_normal([num_labels]))
    
    layer_1 = tf.add(tf.matmul(tf_train_dataset, weights_1), biases_1)
    layer_2 = tf.add(tf.matmul(tf.nn.relu(layer_1), weights_2), biases_2)
    logits = tf.add(tf.matmul(tf.nn.relu(layer_2), weights_3), biases_3)
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,tf_train_labels) + tf.mul(regularization,tf.nn.l2_loss(weights_1)) + tf.mul(regularization,tf.nn.l2_loss(weights_2)) + tf.mul(regularization,tf.nn.l2_loss(weights_3)))
    
    global_step = tf.Variable(0)  # count the number of steps taken.
    learning_rate = tf.train.exponential_decay(start_rate, global_step, decay_steps, decay)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

    
    train_prediction = tf.nn.softmax(logits)
    
    valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_1), biases_1)), weights_2), biases_2), weights_3), biases_3))
    test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_1), biases_1)), weights_2), biases_2), weights_3), biases_3))
with tf.Session(graph=graph) as session:
    
    tf.initialize_all_variables().run()
    print('Initialized for 1 layer NN')
    
    for step in range(max_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 1000 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [455]:

    
#Three Layer
batch_size = 128
max_steps = 10001
regularization = 0.0025
l1_size = 1024
l2_size = 512
l3_size = 256
decay_steps = 500
decay = 0.9
start_rate = 0.5
graph = tf.Graph()
with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size*image_size))
    tf_test_dataset = tf.constant(test_dataset)
    tf_valid_dataset = tf.constant(valid_dataset)
    
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    
    weights_1 = tf.Variable(tf.truncated_normal([image_size*image_size, l1_size]))
    biases_1 = tf.Variable(tf.zeros([relu_size]))
    
    weights_2 = tf.Variable(tf.truncated_normal([l1_size, l2_size], stddev=np.sqrt(2/l1_size)))
    biases_2 = tf.Variable(tf.truncated_normal([l2_size]))
    
    weights_3 = tf.Variable(tf.truncated_normal([l2_size, l3_size], stddev=np.sqrt(2/l2_size)))
    biases_3 = tf.Variable(tf.truncated_normal([l3_size]))
    
    weights_4 = tf.Variable(tf.truncated_normal([l3_size, num_labels], stddev=np.sqrt(2/l3_size)))
    biases_4 = tf.Variable(tf.truncated_normal([num_labels]))
    
    layer_1 = tf.add(tf.matmul(tf_train_dataset, weights_1), biases_1)
    layer_2 = tf.add(tf.matmul(tf.nn.relu(layer_1), weights_2), biases_2)
    layer_3 = tf.add(tf.matmul(tf.nn.relu(layer_2), weights_3), biases_3)
    logits = tf.add(tf.matmul(tf.nn.relu(layer_3), weights_4), biases_4)
    
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits,tf_train_labels) + tf.mul(regularization,tf.nn.l2_loss(weights_1)) + tf.mul(regularization,tf.nn.l2_loss(weights_2)) + tf.mul(regularization,tf.nn.l2_loss(weights_3)) + tf.mul(regularization,tf.nn.l2_loss(weights_4)))
    
    global_step = tf.Variable(0)  # count the number of steps taken.
    learning_rate = tf.train.exponential_decay(start_rate, global_step, decay_steps, decay)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

    
    train_prediction = tf.nn.softmax(logits)
    
    valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.add(tf.matmul(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset, weights_1), biases_1)), weights_2), biases_2), weights_3), biases_3), weights_4), biases_4))
    test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.add(tf.matmul(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset, weights_1), biases_1)), weights_2), biases_2), weights_3), biases_3), weights_4), biases_4))
with tf.Session(graph=graph) as session:
    
    tf.initialize_all_variables().run()
    print('Initialized for 1 layer NN')
    
    for step in range(max_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        
        if (step % 1000 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(predictions, batch_labels))
            print('Validation accuracy: %.1f%%' % accuracy(valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    

