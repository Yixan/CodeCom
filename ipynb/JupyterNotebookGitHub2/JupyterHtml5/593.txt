
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [31]:

    
# Logistic regression model
graph = tf.Graph()

# regularization parameter
beta = 0.001

batch_size = 128

with graph.as_default():
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    
    weights = tf.Variable(
      tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
    
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(
      tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) + \
      beta*tf.nn.l2_loss(weights)
    
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
      tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [32]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:  
    tf.initialize_all_variables().run()
    print('Initialized')
    for step in range(num_steps):
        
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print('Loss at step %d: %f' % (step, l))
            print('Training accuracy: %.1f%%' % accuracy(
                predictions, batch_labels))      
            print('Validation accuracy: %.1f%%' % accuracy(
                valid_prediction.eval(), valid_labels))
    print('Test accuracy: %.1f%%' % accuracy(test_prediction.eval(), test_labels))


    



In [33]:

    
# 1 hidden-layer neural network

beta1 = 0.001
beta2 = 0.001

graph = tf.Graph()
with graph.as_default():
    # input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(None, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(None, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # variables
    W1 = tf.Variable(tf.truncated_normal([image_size * image_size, 1024]))
    b1 = tf.Variable(tf.zeros([1024]))
    
    h1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + b1)
    
    W2 = tf.Variable(tf.truncated_normal([1024, num_labels]))
    b2 = tf.Variable(tf.zeros([num_labels]))
    
    # training computation
    logits = tf.matmul(h1, W2) + b2
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) +\
        beta1*tf.nn.l2_loss(W1) + beta2*tf.nn.l2_loss(W2)
    
    # optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + b1), W2) + b2)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, W1) + b1), W2) + b2)


    



In [34]:

    
num_steps = 3001
batch_size = 128

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [36]:

    
num_steps = 3001
batch_size = 128

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0]/1000 - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [73]:

    
# 1 hidden-layer neural network

beta1 = 0.001
beta2 = 0.001
dropout_rate = 0.5

graph = tf.Graph()
with graph.as_default():
    # input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(None, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(None, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # variables
    W1 = tf.Variable(tf.truncated_normal([image_size * image_size, 1024]))
    b1 = tf.Variable(tf.zeros([1024]))
    
    h1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + b1)
    
    keep_prob1 = tf.placeholder(tf.float32)
    h1_drop = tf.nn.dropout(h1, keep_prob1)
    
    W2 = tf.Variable(tf.truncated_normal([1024, num_labels]))
    b2 = tf.Variable(tf.zeros([num_labels]))
    
    # training computation
    logits = tf.matmul(h1_drop, W2) + b2
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) +\
        beta1*tf.nn.l2_loss(W1) + beta2*tf.nn.l2_loss(W2)
    
    # optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    # Predictions
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + b1), W2) + b2)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, W1) + b1), W2) + b2)


    



In [74]:

    
num_steps = 3001
batch_size = 128

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,\
                    keep_prob1: dropout_rate}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [72]:

    
num_steps = 3001
batch_size = 128

dropout_rate_extreme = 0.5

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0]/1000 - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,\
                    keep_prob1: dropout_rate_extreme}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [170]:

    
# 2 hidden-layer neural network

beta1 = 0.001
beta2 = 0.001
beta3 = 0.001
dropout_rate = 0.5

n_W1 = 1024
n_W2 = 1024

graph = tf.Graph()
with graph.as_default():
    # input data
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(None, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(None, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # variables
    W1 = tf.Variable(tf.truncated_normal([image_size * image_size, n_W1],\
                    stddev=np.sqrt(2.0/(image_size * image_size))))
    b1 = tf.Variable(tf.zeros([n_W1]))
    
    h1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + b1)
    
    keep_prob1 = tf.placeholder(tf.float32)
    h1_drop = tf.nn.dropout(h1, keep_prob1)
    
    W2 = tf.Variable(tf.truncated_normal([n_W1, n_W2],\
                                        stddev=np.sqrt(2.0/(n_W1))))
    b2 = tf.Variable(tf.zeros([n_W2]))
    
    h2 = tf.nn.relu(tf.matmul(h1_drop, W2) + b2)
    
    keep_prob2 = tf.placeholder(tf.float32)
    h2_drop = tf.nn.dropout(h2, keep_prob2)
    
    W3 = tf.Variable(tf.truncated_normal([n_W2, num_labels],\
                                        stddev=np.sqrt(2.0/(n_W2))))
    b3 = tf.Variable(tf.zeros([num_labels]))
    
    # training computation
    logits = tf.matmul(h2_drop, W3) + b3
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) +\
        beta1*tf.nn.l2_loss(W1) + beta2*tf.nn.l2_loss(W2) +\
        beta3*tf.nn.l2_loss(W3)
    
    # optimizer
    global_step = tf.Variable(0, trainable=False)
    starter_learning_rate = 0.1
    learning_rate = tf.train.exponential_decay(starter_learning_rate,\
                                              global_step, 3000, 0.95,\
                                              staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,\
                                            global_step=global_step)
    
    # Predictions
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + b1), W2) + b2), W3) + b3)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, W1) + b1), W2) + b2), W3) + b3)


    



In [171]:

    
num_steps = 9001
batch_size = 128

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("initialized")
    for step in range(num_steps):
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels,\
                    keep_prob1: dropout_rate, keep_prob2 : dropout_rate}
        _, l, predictions = session.run(
            [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 1000 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

