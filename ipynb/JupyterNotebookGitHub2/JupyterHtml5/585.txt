
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128
L2_beta = 0.01 # beta for L2 loss regularization

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  L2_loss = L2_beta * (tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases))
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) + L2_loss
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() # v0.12 and later
  # tf.initialize_all_variables().run() # v0.11 and earlier
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 128
num_nodes = 1024
L2_beta = 0.01 # beta for L2 loss regularization

graph = tf.Graph()
with graph.as_default():
    
  # Input data. We use a placeholder that will be fed
  tf_dataset = tf.placeholder(tf.float32, shape=(None, image_size * image_size))  
  tf_labels = tf.placeholder(tf.float32, shape=(None, num_labels))

  # Matrix 1 Variables.
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes]))
  biases_1 = tf.Variable(tf.zeros([num_nodes]))

  # Matrix 2 Variables.
  weights_2 = tf.Variable(tf.truncated_normal([num_nodes, num_labels]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))

  # Training computation.
  logits_1 = tf.matmul(tf_dataset, weights_1) + biases_1
  hidden_1 = tf.nn.relu(logits_1)
  logits_2 = tf.matmul(hidden_1, weights_2) + biases_2
  L2_loss = L2_beta * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2) + \
                       tf.nn.l2_loss(biases_1) + tf.nn.l2_loss(biases_2))

  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits_2, tf_labels)) + L2_loss
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

  # Prediction
  label_prediction = tf.nn.softmax(logits_2)


    



In [8]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() # v0.12 and later
  # tf.initialize_all_variables().run() # v0.11 and earlier
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_dataset : batch_data, tf_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, label_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        label_prediction.eval(feed_dict = {tf_dataset: valid_dataset}), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(label_prediction.eval(feed_dict = {tf_dataset: test_dataset}), test_labels))


    



In [9]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() # v0.12 and later
  # tf.initialize_all_variables().run() # v0.11 and earlier
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = np.random.choice(np.arange(10)) # Reduce the number of batches to 10.
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_dataset : batch_data, tf_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, label_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        label_prediction.eval(feed_dict = {tf_dataset: valid_dataset}), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(label_prediction.eval(feed_dict = {tf_dataset: test_dataset}), test_labels))


    



In [10]:

    
batch_size = 128
num_nodes = 1024
L2_beta = 0 # beta for L2 loss regularization
keep_prob = 0.5 # keep_prob of dropout

graph = tf.Graph()
with graph.as_default():
    
  # Input data. We use a placeholder that will be fed
  tf_dataset = tf.placeholder(tf.float32, shape=(None, image_size * image_size))  
  tf_labels = tf.placeholder(tf.float32, shape=(None, num_labels))

  # Matrix 1 Variables.
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes]))
  biases_1 = tf.Variable(tf.zeros([num_nodes]))

  # Matrix 2 Variables.
  weights_2 = tf.Variable(tf.truncated_normal([num_nodes, num_labels]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))

  # Training computation.
  logits_1 = tf.matmul(tf_dataset, weights_1) + biases_1
  hidden_1 = tf.nn.relu(logits_1)
  hidden_1_dropout = tf.nn.dropout(hidden_1, keep_prob = keep_prob)
  logits_2 = tf.matmul(hidden_1, weights_2) + biases_2
  logits_2_training = tf.matmul(hidden_1_dropout, weights_2) + biases_2
  L2_loss = L2_beta * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2) + \
                       tf.nn.l2_loss(biases_1) + tf.nn.l2_loss(biases_2))

  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits_2_training, tf_labels)) + L2_loss
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

  # Prediction
  label_prediction = tf.nn.softmax(logits_2)


    



In [11]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() # v0.12 and later
  # tf.initialize_all_variables().run() # v0.11 and earlier
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_dataset : batch_data, tf_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, label_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        label_prediction.eval(feed_dict = {tf_dataset: valid_dataset}), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(label_prediction.eval(feed_dict = {tf_dataset: test_dataset}), test_labels))


    



In [12]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() # v0.12 and later
  # tf.initialize_all_variables().run() # v0.11 and earlier
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = np.random.choice(np.arange(10)) # Reduce the number of batches to 10.
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_dataset : batch_data, tf_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, label_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        label_prediction.eval(feed_dict = {tf_dataset: valid_dataset}), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(label_prediction.eval(feed_dict = {tf_dataset: test_dataset}), test_labels))


    



In [13]:

    
batch_size = 1000
num_nodes_1 = 960
num_nodes_2 = 650
L2_beta = 0.0005 # beta for L2 loss regularization

graph = tf.Graph()
with graph.as_default():
    
  # Input data. We use a placeholder that will be fed
  tf_dataset = tf.placeholder(tf.float32, shape=(None, image_size * image_size))  
  tf_labels = tf.placeholder(tf.float32, shape=(None, num_labels))

  # Matrix 1 Variables.
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes_1]))
  biases_1 = tf.Variable(tf.zeros([num_nodes_1]))

  # Matrix 2 Variables.
  weights_2 = tf.Variable(tf.truncated_normal([num_nodes_1, num_nodes_2]))
  biases_2 = tf.Variable(tf.zeros([num_nodes_2]))

  # Matrix 3 Variables.
  weights_3 = tf.Variable(tf.truncated_normal([num_nodes_2, num_labels]))
  biases_3 = tf.Variable(tf.zeros([num_labels]))



  # Training computation.
  logits_1 = tf.matmul(tf_dataset, weights_1) + biases_1
  hidden_1 = tf.nn.relu(logits_1)
  logits_2 = tf.matmul(hidden_1, weights_2) + biases_2
  hidden_2 = tf.nn.relu(logits_2)
  logits_3 = tf.matmul(hidden_2, weights_3) + biases_3

    
  L2_loss = L2_beta * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(biases_1) + \
                       tf.nn.l2_loss(weights_2) + tf.nn.l2_loss(biases_2) + \
                       tf.nn.l2_loss(weights_3) + tf.nn.l2_loss(biases_3))

  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits_3, tf_labels)) + L2_loss
  
  # Optimizer.
  # Optimizer 1
  optimizer = tf.train.GradientDescentOptimizer(0.0005).minimize(loss)
  # Optimizer 2
  #global_step = tf.Variable(0)  # count the number of steps taken.
  #learning_rate = tf.train.exponential_decay(0.0005, global_step, decay_steps = 100, decay_rate = 0.95, staircase=True)
  #optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

  # Prediction
  label_prediction = tf.nn.softmax(logits_3)


    



In [14]:

    
num_steps = 7501

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() # v0.12 and later
  # tf.initialize_all_variables().run() # v0.11 and earlier
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_dataset : batch_data, tf_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, label_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        label_prediction.eval(feed_dict = {tf_dataset: valid_dataset}), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(label_prediction.eval(feed_dict = {tf_dataset: test_dataset}), test_labels))


    



In [55]:

    
batch_size = 128
num_nodes_1 = 1024
num_nodes_2 = 300
num_nodes_3 = 50
L2_beta = 0.01 # beta for L2 loss regularization

graph = tf.Graph()
with graph.as_default():
    
  # Input data. We use a placeholder that will be fed
  tf_dataset = tf.placeholder(tf.float32, shape=(None, image_size * image_size))  
  tf_labels = tf.placeholder(tf.float32, shape=(None, num_labels))

  # Matrix 1 Variables.
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes_1]))
  biases_1 = tf.Variable(tf.zeros([num_nodes_1]))

  # Matrix 2 Variables.
  weights_2 = tf.Variable(tf.truncated_normal([num_nodes_1, num_nodes_2]))
  biases_2 = tf.Variable(tf.zeros([num_nodes_2]))

  # Matrix 3 Variables.
  weights_3 = tf.Variable(tf.truncated_normal([num_nodes_2, num_nodes_3]))
  biases_3 = tf.Variable(tf.zeros([num_nodes_3]))

  # Matrix 4 Variables.
  weights_4 = tf.Variable(tf.truncated_normal([num_nodes_3, num_labels]))
  biases_4 = tf.Variable(tf.zeros([num_labels]))

  # Training computation.
  logits_1 = tf.matmul(tf_dataset, weights_1) + biases_1
  hidden_1 = tf.nn.relu(logits_1)
  logits_2 = tf.matmul(hidden_1, weights_2) + biases_2
  hidden_2 = tf.nn.relu(logits_2)
  logits_3 = tf.matmul(hidden_2, weights_3) + biases_3
  hidden_3 = tf.nn.relu(logits_3)
  logits_4 = tf.matmul(hidden_3, weights_4) + biases_4
    
    
    
  L2_loss = L2_beta * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(biases_1) + \
                       tf.nn.l2_loss(weights_2) + tf.nn.l2_loss(biases_2) + \
                       tf.nn.l2_loss(weights_3) + tf.nn.l2_loss(biases_3) + \
                       tf.nn.l2_loss(weights_4) + tf.nn.l2_loss(biases_4))

  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits_4, tf_labels)) + L2_loss
  
  # Optimizer.
  # Optimizer 1
  #optimizer = tf.train.GradientDescentOptimizer(0.00005).minimize(loss)
  # Optimizer 2
  global_step = tf.Variable(0)  # count the number of steps taken.
  learning_rate = tf.train.exponential_decay(0.0005, global_step,1000,0.90,staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)

  # Prediction
  label_prediction = tf.nn.softmax(logits_4)


    



In [ ]:

    
num_steps = 60010

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run() # v0.12 and later
  # tf.initialize_all_variables().run() # v0.11 and earlier
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_dataset : batch_data, tf_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, label_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        label_prediction.eval(feed_dict = {tf_dataset: valid_dataset}), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(label_prediction.eval(feed_dict = {tf_dataset: test_dataset}), test_labels))


    



In [ ]:

    
 


    

