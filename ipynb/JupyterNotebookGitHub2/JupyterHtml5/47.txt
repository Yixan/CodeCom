
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 100
hidden_nodes = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  # These are the parameters that we are going to be training. The weight
  # matrix will be initialized using random values following a (truncated)
  # normal distribution. The biases get initialized to zero.
    
  # first the hidden layer
  weights_hidden = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes]))
  biases_hidden = tf.Variable(tf.zeros([hidden_nodes]))
    
  hidden = tf.nn.relu(tf.matmul(tf_train_dataset, weights_hidden) + biases_hidden)

  # now the output layer
  biases_out = tf.Variable(tf.zeros([num_labels]))
  weights_out = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))  
    
  # Training computation.
  # We multiply the inputs with the weight matrix, and add biases. We compute
  # the softmax and cross-entropy (it's one operation in TensorFlow, because
  # it's very common, and it can be optimized). We take the average of this
  # cross-entropy across all training examples: that's our loss.
  logits = tf.matmul(hidden, weights_out) + biases_out
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  l2_reg = tf.nn.l2_loss(weights_out)
  loss += l2_reg * 1e-2 # adding l2 regularization
  
  # Optimizer.
  # We are going to find the minimum of this loss using gradient descent.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  # These are not part of training, but merely here so that we can report
  # accuracy figures as we train.
  train_prediction = tf.nn.softmax(logits)
    
  valid_prediction = tf.nn.softmax(
    tf.matmul(
    tf.nn.relu(tf.matmul(tf_valid_dataset, weights_hidden) + biases_hidden),
    weights_out) + biases_out)

  test_prediction = tf.nn.softmax(
    tf.matmul(
    tf.nn.relu(tf.matmul(tf_test_dataset, weights_hidden) + biases_hidden),
    weights_out) + biases_out)


    



In [6]:

    
num_steps = 5000

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
num_steps = 3001
batch_size = 100
with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step % 10 * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [8]:

    
batch_size = 250
hidden_nodes = 2000 #1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
    
  keep_prob = tf.placeholder(tf.float32) # keep prob for dropout
  
  # Variables.
  # These are the parameters that we are going to be training. The weight
  # matrix will be initialized using random values following a (truncated)
  # normal distribution. The biases get initialized to zero.
    
  # first the hidden layer
  weights_hidden = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes]))
  biases_hidden = tf.Variable(tf.zeros([hidden_nodes]))
    
  hidden = tf.nn.relu(tf.matmul(tf_train_dataset, weights_hidden) + biases_hidden)
  hidden_dropout = tf.nn.dropout(hidden, keep_prob=keep_prob)

  # now the output layer
  biases_out = tf.Variable(tf.zeros([num_labels]))
  weights_out = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))  
    
  # Training computation.
  # We multiply the inputs with the weight matrix, and add biases. We compute
  # the softmax and cross-entropy (it's one operation in TensorFlow, because
  # it's very common, and it can be optimized). We take the average of this
  # cross-entropy across all training examples: that's our loss.
  logits = tf.matmul(hidden_dropout, weights_out) + biases_out
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  #l2_reg = tf.nn.l2_loss(weights_out)
  #loss += l2_reg * 1e-2 # adding l2 regularization
  
  # Optimizer.
  # We are going to find the minimum of this loss using gradient descent.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  # These are not part of training, but merely here so that we can report
  # accuracy figures as we train.
  train_prediction = tf.nn.softmax(logits)
    
  valid_prediction = tf.nn.softmax(
    tf.matmul(
    tf.nn.relu(tf.matmul(tf_valid_dataset, weights_hidden) + biases_hidden),
    weights_out) + biases_out)

  test_prediction = tf.nn.softmax(
    tf.matmul(
    tf.nn.relu(tf.matmul(tf_test_dataset, weights_hidden) + biases_hidden),
    weights_out) + biases_out)


    



In [9]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    
    feed_dict = {tf_train_dataset : batch_data,
                 tf_train_labels : batch_labels,
                 keep_prob : 0.9}
    
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [10]:

    
batch_size = 250
hidden_nodes = 3000 #1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
    
  keep_prob = tf.placeholder(tf.float32) # keep prob for dropout
  global_step = tf.Variable(0, trainable=False) # step for decaying learning rate
  learning_rate = tf.train.exponential_decay(0.5, global_step, decay_steps=10000, decay_rate=0.65, staircase=True)
  
  # first the hidden layer
  weights_hidden = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes]))
  biases_hidden = tf.Variable(tf.zeros([hidden_nodes]))
    
  hidden = tf.nn.relu(tf.matmul(tf_train_dataset, weights_hidden) + biases_hidden)
  hidden_dropout = tf.nn.dropout(hidden, keep_prob=keep_prob)

  # now the output layer
  biases_out = tf.Variable(tf.zeros([num_labels]))
  weights_out = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))  
    
  logits = tf.matmul(hidden_dropout, weights_out) + biases_out
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  # Optimizer.
  # We are going to find the minimum of this loss using gradient descent.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  train_prediction = tf.nn.softmax(logits)
    
  valid_prediction = tf.nn.softmax(
    tf.matmul(
    tf.nn.relu(tf.matmul(tf_valid_dataset, weights_hidden) + biases_hidden),
    weights_out) + biases_out)

  test_prediction = tf.nn.softmax(
    tf.matmul(
    tf.nn.relu(tf.matmul(tf_test_dataset, weights_hidden) + biases_hidden),
    weights_out) + biases_out)


    



In [11]:

    
num_steps = 2001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    
    feed_dict = {tf_train_dataset : batch_data,
                 tf_train_labels : batch_labels,
                 keep_prob : 0.85}
    
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [12]:

    
batch_size = 750
hidden_nodes1 = 3000 #1024
hidden_nodes2 = 500

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
    
  keep_prob = tf.placeholder(tf.float32) # keep prob for dropout
  global_step = tf.Variable(0, trainable=False) # step for decaying learning rate
  learning_rate = tf.train.exponential_decay(0.5, global_step, decay_steps=1000, decay_rate=0.65, staircase=True)
  
  # the first hidden layer
  weights_hidden1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, hidden_nodes1], stddev= 2.0/image_size/image_size))
  biases_hidden1 = tf.Variable(tf.zeros([hidden_nodes1]))
    
  hidden1 = tf.nn.relu(tf.matmul(tf_train_dataset, weights_hidden1) + biases_hidden1) # try sigmoid here?
  hidden_dropout1 = tf.nn.dropout(hidden1, keep_prob=keep_prob)
    
  # the second hidden layer
  weights_hidden2 = tf.Variable(
    tf.truncated_normal([hidden_nodes1, hidden_nodes2], stddev=np.sqrt(2.0/hidden_nodes1)))
  biases_hidden2 = tf.Variable(tf.zeros([hidden_nodes2]))
    
  hidden2 = tf.nn.relu(tf.matmul(hidden_dropout1, weights_hidden2) + biases_hidden2)
  hidden_dropout2 = tf.nn.dropout(hidden2, keep_prob=keep_prob)

  # now the output layer
  biases_out = tf.Variable(tf.zeros([num_labels]))
  weights_out = tf.Variable(tf.truncated_normal([hidden_nodes2, num_labels], stddev=np.sqrt(2.0/hidden_nodes2)))  
    
  logits = tf.matmul(hidden_dropout2, weights_out) + biases_out
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  # Optimizer.
  # We are going to find the minimum of this loss using gradient descent.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  train_prediction = tf.nn.softmax(logits)
    
  layer1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_hidden1) + biases_hidden1)
  layer2_valid = tf.nn.relu(tf.matmul(layer1_valid, weights_hidden2) + biases_hidden2)
  valid_prediction = tf.nn.softmax(tf.matmul(layer2_valid, weights_out) + biases_out)

  layer1_test = tf.nn.relu(tf.matmul(tf_test_dataset, weights_hidden1) + biases_hidden1)
  layer2_test = tf.nn.relu(tf.matmul(layer1_test, weights_hidden2) + biases_hidden2)
  test_prediction = tf.nn.softmax(tf.matmul(layer2_test, weights_out) + biases_out)


    



In [13]:

    
num_steps = 10001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    
    feed_dict = {tf_train_dataset : batch_data,
                 tf_train_labels : batch_labels,
                 keep_prob : 0.95}
    
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    



In [16]:

    
# Now see if can do the above with keras!


    



In [18]:

    
import keras
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout
from keras.optimizers import Adam, SGD


    



In [42]:

    
model = Sequential()
model.add(Dense(hidden_nodes1, input_dim=image_size **2, activation='relu', init='he_normal', bias=True))
model.add(Dropout(0.05))
model.add(Dense(hidden_nodes2, activation='relu', init='he_normal', bias=True))
model.add(Dropout(0.05))
model.add(Dense(10, init='he_normal', activation='softmax', bias=True))

sgd = SGD(lr=0.1, nesterov=True, decay=1e-8)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])


    



In [43]:

    
model.fit(train_dataset, train_labels, nb_epoch=10, batch_size=250)


    



In [41]:

    
train_score = model.evaluate(train_dataset, train_labels, batch_size=20000)
print(train_score)
test_score = model.evaluate(test_dataset, test_labels, batch_size=1000)
print(test_score)


    

