
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [15]:

    
batch_size = 128
hidden1_units = 1024
beta_L2 = 5e-4  #I believe this is called beta
flat_img_size   = image_size * image_size

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, flat_img_size))
    tf_train_labels = tf.placeholder(tf.float32,shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Input layer
    weights = tf.Variable(tf.truncated_normal([flat_img_size, hidden1_units],stddev=0.1))
    biases = tf.Variable(tf.zeros([hidden1_units]))
    InputLayerOutput = tf.matmul(tf_train_dataset, weights) + biases
    hidden1_input = tf.nn.relu(InputLayerOutput) ### for the first layer
    print('weights\'s shape:',weights.get_shape())
    print('biases\'s shape:',biases.get_shape())
    print('hidden1_input\'s shape:',hidden1_input.get_shape())

    # 1st hidden layer
    weights1 = tf.Variable(tf.truncated_normal([hidden1_units, num_labels]))
    biases1  = tf.Variable(tf.zeros([num_labels]));  
    print('weights1\'s shape:',weights1.get_shape())
    print('biases1 \'s shape:',biases1 .get_shape())

    # Training computation.
    logits = tf.matmul(hidden1_input , weights1) + biases1
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regularizers = tf.nn.l2_loss(weights)+tf.nn.l2_loss(biases)+tf.nn.l2_loss(weights1)+tf.nn.l2_loss(biases1)
    loss += beta_L2*regularizers    
    print('logits\'s shape:',logits.get_shape())
    print('loss\'s shape:',loss.get_shape())

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights) + biases), weights1) + biases1)
    test_prediction  = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights) + biases), weights1) + biases1)


    



In [16]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [5]:

    
batch_size = 128
hidden1_units = 1024
beta_L2 = 5e-4  #I believe this is called beta
flat_img_size   = image_size * image_size

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, flat_img_size))
    tf_train_labels = tf.placeholder(tf.float32,shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Input layer
    weights = tf.Variable(tf.truncated_normal([flat_img_size, hidden1_units],stddev=0.1))
    biases = tf.Variable(tf.zeros([hidden1_units]))
    InputLayerOutput = tf.matmul(tf_train_dataset, weights) + biases
    hidden1_input = tf.nn.relu(InputLayerOutput) ### for the first layer
    print('weights\'s shape:',weights.get_shape())
    print('biases\'s shape:',biases.get_shape())
    print('hidden1_input\'s shape:',hidden1_input.get_shape())

    # 1st hidden layer
    weights1 = tf.Variable(tf.truncated_normal([hidden1_units, num_labels]))
    biases1  = tf.Variable(tf.zeros([num_labels]));  
    print('weights1\'s shape:',weights1.get_shape())
    print('biases1 \'s shape:',biases1 .get_shape())

    # Training computation.
    logits = tf.matmul(hidden1_input , weights1) + biases1
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regularizers = tf.nn.l2_loss(weights)+tf.nn.l2_loss(biases)+tf.nn.l2_loss(weights1)+tf.nn.l2_loss(biases1)
    loss += beta_L2*regularizers    
    print('logits\'s shape:',logits.get_shape())
    print('loss\'s shape:',loss.get_shape())

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights) + biases), weights1) + biases1)
    test_prediction  = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights) + biases), weights1) + biases1)


    



In [7]:

    
num_steps = 3001

# reduce size of the dataset 
train_dataset = train_dataset[:15*batch_size]
train_labels = train_labels[:15*batch_size]

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
batch_size = 128
hidden1_units = 1024
beta_L2 = 5e-4  #I believe this is called beta
flat_img_size   = image_size * image_size

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, flat_img_size))
    tf_train_labels = tf.placeholder(tf.float32,shape=(batch_size, num_labels))
    keep_prob = tf.placeholder(tf.float32)
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Input layer
    weights = tf.Variable(tf.truncated_normal([flat_img_size, hidden1_units],stddev=0.1))
    biases = tf.Variable(tf.zeros([hidden1_units]))
    InputLayerOutput = tf.matmul(tf_train_dataset, weights) + biases
    hidden1_input = tf.nn.relu(InputLayerOutput) ### for the first layer
    print('weights\'s shape:',weights.get_shape())
    print('biases\'s shape:',biases.get_shape())
    print('hidden1_input\'s shape:',hidden1_input.get_shape())

    # dropout
    hidden1_input_drop = tf.nn.dropout(hidden1_input, keep_prob=keep_prob)
    print('hidden1_input_drop\'s shape:',hidden1_input_drop.get_shape())
    
    # 1st hidden layer
    weights1 = tf.Variable(tf.truncated_normal([hidden1_units, num_labels]))
    biases1  = tf.Variable(tf.zeros([num_labels]));  
    print('weights1\'s shape:',weights1.get_shape())
    print('biases1 \'s shape:',biases1 .get_shape())

    # Training computation.
    logits = tf.matmul(hidden1_input_drop , weights1) + biases1
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regularizers = tf.nn.l2_loss(weights)+tf.nn.l2_loss(biases)+tf.nn.l2_loss(weights1)+tf.nn.l2_loss(biases1)
    loss += beta_L2*regularizers    
    print('logits\'s shape:',logits.get_shape())
    print('loss\'s shape:',loss.get_shape())

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights) + biases), weights1) + biases1)
    test_prediction  = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights) + biases), weights1) + biases1)


    



In [13]:

    
num_steps = 3001

# reduce size of the dataset 
train_dataset = train_dataset[:15*batch_size]
train_labels = train_labels[:15*batch_size]

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.3}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [14]:

    
batch_size = 128
hidden1_units = 1024
beta_L2 = 5e-4  #I believe this is called beta
flat_img_size   = image_size * image_size

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, flat_img_size))
    tf_train_labels = tf.placeholder(tf.float32,shape=(batch_size, num_labels))
    keep_prob = tf.placeholder(tf.float32)
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Input layer
    weights = tf.Variable(tf.truncated_normal([flat_img_size, hidden1_units],stddev=0.1))
    biases = tf.Variable(tf.zeros([hidden1_units]))
    InputLayerOutput = tf.matmul(tf_train_dataset, weights) + biases
    hidden1_input = tf.nn.relu(InputLayerOutput) ### for the first layer
    print('weights\'s shape:',weights.get_shape())
    print('biases\'s shape:',biases.get_shape())
    print('hidden1_input\'s shape:',hidden1_input.get_shape())

    # dropout
    hidden1_input_drop = tf.nn.dropout(hidden1_input, keep_prob=keep_prob)
    print('hidden1_input_drop\'s shape:',hidden1_input_drop.get_shape())
    
    # 1st hidden layer
    weights1 = tf.Variable(tf.truncated_normal([hidden1_units, num_labels]))
    biases1  = tf.Variable(tf.zeros([num_labels]));  
    print('weights1\'s shape:',weights1.get_shape())
    print('biases1 \'s shape:',biases1 .get_shape())

    # Training computation.
    logits = tf.matmul(hidden1_input_drop , weights1) + biases1
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
    regularizers = tf.nn.l2_loss(weights)+tf.nn.l2_loss(biases)+tf.nn.l2_loss(weights1)+tf.nn.l2_loss(biases1)
    loss += beta_L2*regularizers    
    print('logits\'s shape:',logits.get_shape())
    print('loss\'s shape:',loss.get_shape())

    # Optimizer.
    global_step = tf.Variable(0)  # count the number of steps taken.
    learning_rate = tf.train.exponential_decay(0.5, global_step, 100000, 0.96)
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights) + biases), weights1) + biases1)
    test_prediction  = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights) + biases), weights1) + biases1)


    



In [ ]:

    
num_steps = 3001

# reduce size of the dataset 
train_dataset = train_dataset[:15*batch_size]
train_labels = train_labels[:15*batch_size]

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.3}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    

