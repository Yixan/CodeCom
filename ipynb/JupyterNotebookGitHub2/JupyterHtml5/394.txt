
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128
regularization = 0.001

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) +\
    regularization/2*tf.nn.l2_loss(weights)
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 128
num_hidden_units = 1024
regularization = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables of input layer
  weights_input = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_units]))
  biases_input = tf.Variable(tf.zeros([num_hidden_units]))
    
  # Variables.
  weights_hidden = tf.Variable(
    tf.truncated_normal([num_hidden_units, num_labels]))
  biases_hidden = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  relus = tf.nn.relu(tf.matmul(tf_train_dataset, weights_input) + biases_input)
  logits_hidden = tf.matmul(relus, weights_hidden) + biases_hidden
  loss = tf.reduce_mean(c
    tf.nn.softmax_cross_entropy_with_logits(logits_hidden, tf_train_labels)) +\
    0.5*regularization*(tf.nn.l2_loss(weights_input) + tf.nn.l2_loss(weights_hidden))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_hidden)
  valid_relus = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_input) + biases_input)
  valid_prediction = tf.nn.softmax(
    tf.matmul(valid_relus, weights_hidden) + biases_hidden)
  test_relus = tf.nn.relu(tf.matmul(tf_test_dataset, weights_input) + biases_input)
  test_prediction = tf.nn.softmax(
    tf.matmul(test_relus, weights_hidden) + biases_hidden)


    



In [8]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [18]:

    
batch_size = 128
num_hidden_units = 1024
regularization = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables of input layer
  weights_input = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_units]))
  biases_input = tf.Variable(tf.zeros([num_hidden_units]))
    
  # Variables.
  weights_hidden = tf.Variable(
    tf.truncated_normal([num_hidden_units, num_labels]))
  biases_hidden = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  relus = tf.nn.relu(tf.matmul(tf_train_dataset, weights_input) + biases_input)
  logits_hidden = tf.matmul(relus, weights_hidden) + biases_hidden
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits_hidden, tf_train_labels)) +\
    0.5*regularization*(tf.nn.l2_loss(weights_input) + tf.nn.l2_loss(weights_hidden))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_hidden)
  valid_relus = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_input) + biases_input)
  valid_prediction = tf.nn.softmax(
    tf.matmul(valid_relus, weights_hidden) + biases_hidden)
  test_relus = tf.nn.relu(tf.matmul(tf_test_dataset, weights_input) + biases_input)
  test_prediction = tf.nn.softmax(
    tf.matmul(test_relus, weights_hidden) + biases_hidden)


    



In [19]:

    
num_steps = 3001
# Restricting train size
ix_small = range(int(batch_size*5.5))
train_dataset_small = train_dataset[ix_small,:]
train_labels_small = train_labels[ix_small,:]

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_small.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_small[offset:(offset + batch_size), :]
    batch_labels = train_labels_small[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [22]:

    
 


    



In [26]:

    
batch_size = 128
num_hidden_units = 1024
regularization = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables of input layer
  weights_input = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_units]))
  biases_input = tf.Variable(tf.zeros([num_hidden_units]))
    
  # Variables.
  weights_hidden = tf.Variable(
    tf.truncated_normal([num_hidden_units, num_labels]))
  biases_hidden = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  relus = tf.nn.relu(tf.matmul(tf_train_dataset, weights_input) + biases_input)
  logits_hidden = tf.nn.dropout(tf.matmul(relus, weights_hidden) + biases_hidden, keep_prob = 0.5) # Added dropout
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits_hidden, tf_train_labels)) +\
    0.5*regularization*(tf.nn.l2_loss(weights_input) + tf.nn.l2_loss(weights_hidden))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_hidden)
  valid_relus = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_input) + biases_input)
  valid_prediction = tf.nn.softmax(
    tf.matmul(valid_relus, weights_hidden) + biases_hidden)
  test_relus = tf.nn.relu(tf.matmul(tf_test_dataset, weights_input) + biases_input)
  test_prediction = tf.nn.softmax(
    tf.matmul(test_relus, weights_hidden) + biases_hidden)


    



In [27]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [26]:

    
batch_size = 128
num_hidden_units = 1024
regularization = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables of input layer
  weights_input = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_units]))
  biases_input = tf.Variable(tf.zeros([num_hidden_units]))
    
  # Variables.
  weights_hidden = tf.Variable(
    tf.truncated_normal([num_hidden_units, num_labels]))
  biases_hidden = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  relus = tf.nn.relu(tf.matmul(tf_train_dataset, weights_input) + biases_input)
  logits_hidden = tf.nn.dropout(tf.matmul(relus, weights_hidden) + biases_hidden, keep_prob = 0.5) # Added dropout
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits_hidden, tf_train_labels)) +\
    0.5*regularization*(tf.nn.l2_loss(weights_input) + tf.nn.l2_loss(weights_hidden))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits_hidden)
  valid_relus = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_input) + biases_input)
  valid_prediction = tf.nn.softmax(
    tf.matmul(valid_relus, weights_hidden) + biases_hidden)
  test_relus = tf.nn.relu(tf.matmul(tf_test_dataset, weights_input) + biases_input)
  test_prediction = tf.nn.softmax(
    tf.matmul(test_relus, weights_hidden) + biases_hidden)


    



In [28]:

    
num_steps = 3001
# Restricting train size
ix_small = range(int(batch_size*5.5))
train_dataset_small = train_dataset[ix_small,:]
train_labels_small = train_labels[ix_small,:]

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_small.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_small[offset:(offset + batch_size), :]
    batch_labels = train_labels_small[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [89]:

    
batch_size = 512
num_hidden_units_L1 = 400
num_hidden_units_L2 = 400
regularization = 0.04

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # count the number of steps taken.
    global_step = tf.Variable(0)
    
    # Variables of input layer
    weights_input = tf.Variable(
        tf.truncated_normal([image_size * image_size, num_hidden_units_L1]))
    biases_input = tf.Variable(tf.zeros([num_hidden_units_L1]))

    # Variables of HL1
    weights_hidden_L1 = tf.Variable(
        tf.truncated_normal([num_hidden_units_L1, num_hidden_units_L2]))
    biases_hidden_L1 = tf.Variable(tf.zeros([num_hidden_units_L2]))

    # Variables of HL2
    weights_hidden_L2 = tf.Variable(
        tf.truncated_normal([num_hidden_units_L2, num_labels]))
    biases_hidden_L2 = tf.Variable(tf.zeros([num_labels]))

    # Training computation.
    relus_L1 = tf.nn.relu(tf.matmul(tf_train_dataset, weights_input) + biases_input)
    relus_L2 = tf.nn.relu(tf.matmul(relus_L1, weights_hidden_L1) + biases_hidden_L1)
    #logits_output = tf.nn.dropout(tf.matmul(relus_L2, weights_hidden_L2) + biases_hidden_L2, keep_prob = 0.5)
    logits_output = tf.matmul(relus_L2, weights_hidden_L2) + biases_hidden_L2

    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(logits_output, tf_train_labels)) +\
        0.5*regularization*(tf.nn.l2_loss(weights_input) + tf.nn.l2_loss(weights_hidden_L1) + tf.nn.l2_loss(weights_hidden_L2))

    # Optimizer.
    
    #learning_rate = tf.train.exponential_decay(0.01, global_step, 10, np.e)
    #optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
    optimizer = tf.train.GradientDescentOptimizer(0.05).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits_output)
    
    valid_relus_L1 = tf.nn.relu(tf.matmul(tf_valid_dataset, weights_input) + biases_input)
    valid_relus_L2 = tf.nn.relu(tf.matmul(valid_relus_L1, weights_hidden_L1) + biases_hidden_L1)
    valid_prediction = tf.nn.softmax(tf.matmul(valid_relus_L2, weights_hidden_L2) + biases_hidden_L2)
    
    test_relus_L1 = tf.nn.relu(tf.matmul(tf_test_dataset, weights_input) + biases_input)
    test_relus_L2 = tf.nn.relu(tf.matmul(test_relus_L1, weights_hidden_L1) + biases_hidden_L1)
    test_prediction = tf.nn.softmax(tf.matmul(test_relus_L2, weights_hidden_L2) + biases_hidden_L2)


    



In [91]:

    
num_steps = 6001

with tf.Session(graph=graph) as session:
    tf.initialize_all_variables().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 100 == 0):
            print("Step: %d" % (step))
            print("Minibatch loss: %f" % l)
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [65]:

    
tf.train.exponential_decay?


    



In [ ]:

    
 


    

