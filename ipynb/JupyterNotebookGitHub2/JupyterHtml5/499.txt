
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = '../lesson_2/notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [12]:

    
batch_size = 128
beta_l2_logit = 0.1


graph_logit = tf.Graph()
with graph_logit.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,
                                                                logits=logits))
          + 0.5 * tf.nn.l2_loss(weights) * beta_l2_logit
          + 0.5 * tf.nn.l2_loss(biases) * beta_l2_logit)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset,
                                             weights)
                                   + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset,
                                            weights)
                                  + biases)


    



In [13]:

    
num_steps = 3001

with tf.Session(graph=graph_logit) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [6]:

    
num_hidden_layers = 1024
beta_l2_1_layer_sgd = 0.1


batch_size = 128

graph_1_layer_sgd = tf.Graph()
with graph_1_layer_sgd.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(tf.truncated_normal([image_size * image_size,
                                             num_hidden_layers]))
  biases = tf.Variable(tf.zeros([num_hidden_layers]))
  preactivations_hidden = tf.add(tf.matmul(tf_train_dataset, weights), biases)

  # Hidden layer.
  activations_hidden = tf.nn.relu(preactivations_hidden)
  weights_hidden = tf.Variable(tf.truncated_normal([num_hidden_layers, num_labels]))
  bias_hidden = tf.Variable(tf.random_normal([num_labels]))
  logit_hidden = tf.add(tf.matmul(activations_hidden, weights_hidden), bias_hidden)
    
    
  # Training computation.
  loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,
                                                                logits=logit_hidden))
          + 0.5 * tf.nn.l2_loss(weights) * beta_l2_1_layer_sgd
          + 0.5 * tf.nn.l2_loss(biases) * beta_l2_1_layer_sgd
          + 0.5 * tf.nn.l2_loss(weights_hidden) * beta_l2_1_layer_sgd
          + 0.5 * tf.nn.l2_loss(bias_hidden) * beta_l2_1_layer_sgd
         )


  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logit_hidden)
  valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset,
                                                                                   weights),
                                                                         biases)),
                                                    weights_hidden),
                                          bias_hidden))
  test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset,
                                                                                  weights),
                                                                         biases)),
                                                    weights_hidden),
                                          bias_hidden))


    



In [30]:

    
batch_size = 128
num_steps = int(train_labels.shape[0] / batch_size)

with tf.Session(graph=graph_1_layer_sgd) as session:
  tf.global_variables_initializer().run()
  print("Initialized\n\n")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data,
                 tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction],
                                    feed_dict=feed_dict)
    if (step % int(num_steps/10) == 0):
      print("step %s / %s" %(step, num_steps))
      print("Minibatch loss: %f" % l)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
      print("\n\n")
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [45]:

    
# let's take a fraction only of the train set
fraction = 1 / 500
train_dataset_sub_set = train_dataset[:int(train_dataset.shape[0]*fraction),:]
train_labels_sub_set = train_labels[:int(train_labels.shape[0]*fraction),:]

train_labels_sub_set.shape, train_dataset_sub_set.shape # , train_labels


    



In [46]:

    
batch_size = 128
num_steps = int(train_labels_sub_set.shape[0] / batch_size)
num_steps


    



In [47]:

    
with tf.Session(graph=graph_1_layer_sgd) as session:
  tf.global_variables_initializer().run()
  print("Initialized\n\n")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_sub_set.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_sub_set[offset:(offset + batch_size), :]
    batch_labels = train_labels_sub_set[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data,
                 tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction],
                                    feed_dict=feed_dict)
    if (step % int(num_steps/np.min([num_steps, 10])) == 0):
      print("step %s / %s" %(step, num_steps))
      print("Minibatch loss: %f" % l)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(),
                                                     valid_labels))
      print("\n\n")
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [49]:

    
num_hidden_layers = 1024
beta_l2_1_layer_sgd = 0.1
drop_out_ratio = 0.5


batch_size = 128

graph_1_layer_sgd_with_dropout = tf.Graph()
with graph_1_layer_sgd_with_dropout.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(tf.truncated_normal([image_size * image_size,
                                             num_hidden_layers]))
  biases = tf.Variable(tf.zeros([num_hidden_layers]))
  preactivations_hidden = tf.add(tf.matmul(tf_train_dataset, weights), biases)

  # Hidden layer.
  activations_hidden = tf.nn.relu(preactivations_hidden)
  weights_hidden = tf.Variable(tf.truncated_normal([num_hidden_layers, num_labels]))
  bias_hidden = tf.Variable(tf.random_normal([num_labels]))
  logit_hidden = tf.nn.dropout(tf.add(tf.matmul(activations_hidden, weights_hidden),
                                      bias_hidden),
                               keep_prob=drop_out_ratio)
    
    
  # Training computation.
  loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels,
                                                                logits=logit_hidden))
          + 0.5 * tf.nn.l2_loss(weights) * beta_l2_1_layer_sgd
          + 0.5 * tf.nn.l2_loss(biases) * beta_l2_1_layer_sgd
          + 0.5 * tf.nn.l2_loss(weights_hidden) * beta_l2_1_layer_sgd
          + 0.5 * tf.nn.l2_loss(bias_hidden) * beta_l2_1_layer_sgd
         )


  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logit_hidden)
  valid_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_valid_dataset,
                                                                                   weights),
                                                                         biases)),
                                                    weights_hidden),
                                          bias_hidden))
  test_prediction = tf.nn.softmax(tf.add(tf.matmul(tf.nn.relu(tf.add(tf.matmul(tf_test_dataset,
                                                                                  weights),
                                                                         biases)),
                                                    weights_hidden),
                                          bias_hidden))


    



In [50]:

    
num_steps = 3001

with tf.Session(graph=graph_1_layer_sgd_with_dropout) as session:
  tf.global_variables_initializer().run()
  print("Initialized\n\n")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction],
                                    feed_dict=feed_dict)
    if (step % int(num_steps/np.min([num_steps, 10])) == 0):
      print("step %s / %s" %(step, num_steps))
      print("Minibatch loss: %f" % l)
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(),
                                                     valid_labels))
      print("\n\n")
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

