
In [4]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [5]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [6]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [8]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [31]:

    
batch_size = 128
lamda = 0.001
graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(
    labels=tf_train_labels, logits=logits) + lamda*tf.nn.l2_loss(weights))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)
    
    
num_steps = 3001
with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [35]:

    
batch_size = 128 
num_hidden= 1024
lamda = 0.0005

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = {
      'h1': tf.Variable(
          tf.truncated_normal([image_size * image_size, num_hidden])),
      'out': tf.Variable(
          tf.truncated_normal([num_hidden, num_labels]))
  }
  biases = {
      'b1': tf.Variable(
          tf.zeros([num_hidden])),
      'out': tf.Variable(
          tf.zeros([num_labels]))
  }
  
  # Training computation.
  layer_1 = tf.nn.relu(tf.add(
      tf.matmul(tf_train_dataset, weights['h1']), biases['b1']))
  logits = tf.matmul(layer_1, weights['out']) + biases['out']
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits) + 
    lamda*tf.nn.l2_loss(weights['h1']) + lamda*tf.nn.l2_loss(weights['out']))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_layer1 = tf.nn.relu(tf.add(
      tf.matmul(tf_valid_dataset, weights['h1']), biases['b1'])) 
  valid_prediction = tf.nn.softmax(
    tf.matmul(valid_layer1, weights['out']) + biases['out'])
  test_layer1 = tf.nn.relu(tf.add(
      tf.matmul(tf_test_dataset, weights['h1']), biases['b1'])) 
  test_prediction = tf.nn.softmax(
    tf.matmul(test_layer1, weights['out']) + biases['out'])  

num_steps = 5001
with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [6]:

    
n_reduced = 128
offset = 500 # in [0,(20000-n_reduced)]
train_dataset_reduced = train_dataset[offset:(offset + n_reduced), :]
train_labels_reduced = train_labels[offset:(offset + n_reduced), :]
print('Training set', train_dataset.shape, train_labels.shape)
print('Training set reduced', train_dataset_reduced.shape, train_labels_reduced.shape)


    



In [59]:

    
batch_size = 64
num_hidden= 1024
lamda = 0.0005

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = {
      'h1': tf.Variable(
          tf.truncated_normal([image_size * image_size, num_hidden])),
      'out': tf.Variable(
          tf.truncated_normal([num_hidden, num_labels]))
  }
  biases = {
      'b1': tf.Variable(
          tf.zeros([num_hidden])),
      'out': tf.Variable(
          tf.zeros([num_labels]))
  }
  
  # Training computation.
  layer_1 = tf.nn.relu(tf.add(
      tf.matmul(tf_train_dataset, weights['h1']), biases['b1']))
  logits = tf.matmul(layer_1, weights['out']) + biases['out']
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits) + 
    lamda*tf.nn.l2_loss(weights['h1']) + lamda*tf.nn.l2_loss(weights['out']))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_layer1 = tf.nn.relu(tf.add(
      tf.matmul(tf_valid_dataset, weights['h1']), biases['b1'])) 
  valid_prediction = tf.nn.softmax(
    tf.matmul(valid_layer1, weights['out']) + biases['out'])
  test_layer1 = tf.nn.relu(tf.add(
      tf.matmul(tf_test_dataset, weights['h1']), biases['b1'])) 
  test_prediction = tf.nn.softmax(
    tf.matmul(test_layer1, weights['out']) + biases['out'])  

num_steps = 2001
print(train_labels_reduced.shape[0])
with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_reduced.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_reduced[offset:(offset + batch_size), :]
    batch_labels = train_labels_reduced[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [3]:

    
batch_size = 64
num_hidden= 1024
lamda = 0.005
keep_prob = 0.5

graph = tf.Graph()

with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  keep_prob = tv.placeholder(tf.float32)
  
  # Variables.
  weights = {
      'h1': tf.Variable(
          tf.truncated_normal([image_size * image_size, num_hidden])),
      'out': tf.Variable(
          tf.truncated_normal([num_hidden, num_labels]))
  }
  biases = {
      'b1': tf.Variable(
          tf.zeros([num_hidden])),
      'out': tf.Variable(
          tf.zeros([num_labels]))
  }
  
  # Training computation.
  def model(X, weights, biases, keep_prob=1):
    # hidden layer with RELU activation
    layer_1 = tf.nn.relu(tf.add(
      tf.matmul(X, weights['h1']), biases['b1']))
    # apply DropOut to reduce overfitting  
    drop_out = tf.nn.dropout(layer_1, keep_prob)
    # calculate output layer    
    layer_out= tf.matmul(drop_out, weights['out']) + biases['out']
    return layer_out

  logits = model(tf_train_dataset, weights, biases) 
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits) + 
    lamda*tf.nn.l2_loss(weights['h1']) + lamda*tf.nn.l2_loss(weights['out']))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(model(tf_valid_dataset, weights, biases))
  test_prediction = tf.nn.softmax(model(tf_test_dataset, weights, biases))

num_steps = 2001
print(train_labels_reduced.shape[0])
with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_reduced.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_reduced[offset:(offset + batch_size), :]
    batch_labels = train_labels_reduced[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.5}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    

