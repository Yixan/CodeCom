
In [26]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [27]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [28]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [29]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
batch_size = 128
beta = 0.01
graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = tf.Variable(
        tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
  
    # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)
        + beta/2*(tf.nn.l2_loss(weights) + tf.nn.l2_loss(biases)))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
           [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [43]:

    
batch_size = 128
n_hidden_nodes = 1024
beta = 0.01
def NN_function(tf_dataset, variable_dict):
    weights_1 = variable_dict['weights_1']
    biases_1 = variable_dict['biases_1']
    weights_2 = variable_dict['weights_2']
    biases_2 = variable_dict['biases_2']
    logits_1 = tf.matmul(tf_dataset, weights_1) + biases_1
    input_2 = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(input_2, weights_2) + biases_2
    return logits_2

def regularisation_loss(variable_dict):
    loss = 0.0
    for matrice in variable_dict.values():
        loss += tf.nn.l2_loss(matrice)
    return loss

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights_1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, n_hidden_nodes]))
    biases_1 = tf.Variable(tf.zeros([n_hidden_nodes]))
    weights_2 = tf.Variable(
        tf.truncated_normal([n_hidden_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
  
    # Training computation.
    variable_dict = {'weights_1' : weights_1,
                     'biases_1' : biases_1,
                     'weights_2' : weights_2,
                     'biases_2' : biases_2}
    logits = NN_function(tf_train_dataset, variable_dict)
    
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)
        + beta/2*regularisation_loss(variable_dict))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(NN_function(tf_valid_dataset, variable_dict))
    test_prediction = tf.nn.softmax(NN_function(tf_test_dataset, variable_dict))


    



In [37]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
           [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [19]:

    
batch_size = 32
n_hidden_nodes = 1024
beta = 0.0
def NN_function(tf_dataset, variable_dict):
    weights_1 = variable_dict['weights_1']
    biases_1 = variable_dict['biases_1']
    weights_2 = variable_dict['weights_2']
    biases_2 = variable_dict['biases_2']
    logits_1 = tf.matmul(tf_dataset, weights_1) + biases_1
    input_2 = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(input_2, weights_2) + biases_2
    return logits_2

def regularisation_loss(variable_dict):
    loss = 0.0
    for matrice in variable_dict.values():
        loss += tf.nn.l2_loss(matrice)
    return loss

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights_1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, n_hidden_nodes]))
    biases_1 = tf.Variable(tf.zeros([n_hidden_nodes]))
    weights_2 = tf.Variable(
        tf.truncated_normal([n_hidden_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
  
    # Training computation.
    variable_dict = {'weights_1' : weights_1,
                     'biases_1' : biases_1,
                     'weights_2' : weights_2,
                     'biases_2' : biases_2}
    logits = NN_function(tf_train_dataset, variable_dict)
    
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)
        + beta/2*regularisation_loss(variable_dict))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(NN_function(tf_valid_dataset, variable_dict))
    test_prediction = tf.nn.softmax(NN_function(tf_test_dataset, variable_dict))


    



In [20]:

    
num_steps = 1001
number_of_batches = 2
with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = ((step % number_of_batches) * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
           [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 200 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [20]:

    
batch_size = 128
n_hidden_nodes = 1024
beta = 0

def NN_function(tf_dataset, variable_dict, dropout=False):
    weights_1 = variable_dict['weights_1']
    biases_1 = variable_dict['biases_1']
    weights_2 = variable_dict['weights_2']
    biases_2 = variable_dict['biases_2']
    logits_1 = tf.matmul(tf_dataset, weights_1) + biases_1
    if dropout:
        input_2_before_dropout = tf.nn.relu(logits_1)
        input_2 = tf.nn.dropout(input_2_before_dropout, 0.5)*2
    else:
        input_2 = tf.nn.relu(logits_1)
    logits_2 = tf.matmul(input_2, weights_2) + biases_2
    return logits_2

def regularisation_loss(variable_dict):
    loss = 0.0
    for matrice in variable_dict.values():
        loss += tf.nn.l2_loss(matrice)
    return loss

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights_1 = tf.Variable(
        tf.truncated_normal([image_size * image_size, n_hidden_nodes]))
    biases_1 = tf.Variable(tf.zeros([n_hidden_nodes]))
    weights_2 = tf.Variable(
        tf.truncated_normal([n_hidden_nodes, num_labels]))
    biases_2 = tf.Variable(tf.zeros([num_labels]))
    
  
    # Training computation.
    variable_dict = {'weights_1' : weights_1,
                     'biases_1' : biases_1,
                     'weights_2' : weights_2,
                     'biases_2' : biases_2}
    logits = NN_function(tf_train_dataset, variable_dict, dropout=True)
    
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)
        + beta/2*regularisation_loss(variable_dict))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(NN_function(tf_valid_dataset, variable_dict))
    test_prediction = tf.nn.softmax(NN_function(tf_test_dataset, variable_dict))


    



In [21]:

    
num_steps = 5001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
           [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 200 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [56]:

    
batch_size = 128
n_hidden_nodes1 = 1024
n_hidden_nodes2 = 256
n_hidden_nodes3 = 128
dropout = False
list_hidden_nodes = [image_size * image_size,
                     n_hidden_nodes1,
                     n_hidden_nodes2,
                     n_hidden_nodes3,
                     num_labels,]

beta = 0.001

def weights_biases_creation(list_hidden_nodes):
    variable_dict = {'weights' : [], 'biases': []}
    for i in range(len(list_hidden_nodes)-1):
        weights = tf.Variable(
            tf.truncated_normal([list_hidden_nodes[i], list_hidden_nodes[i+1]],
                                stddev=np.sqrt(2.0 / list_hidden_nodes[i])))
        biases = tf.Variable(tf.zeros([list_hidden_nodes[i+1]]))
        variable_dict['weights'].append(weights)
        variable_dict['biases'].append(biases)
    return variable_dict


def NN_function(tf_dataset, variable_dict, dropout=False):
    temp_logits = tf_dataset
    number_of_layers = len(variable_dict['weights'])
    for i in range(number_of_layers):
        weights = variable_dict['weights'][i]
        biases =  variable_dict['biases'][i]
        temp_logits = tf.matmul(temp_logits, weights) + biases
        if i < number_of_layers:
            temp_logits = tf.nn.relu(temp_logits)
            if dropout:
                temp_logits = tf.nn.dropout(temp_logits, 0.5)
    return temp_logits

def regularisation_loss(variable_dict):
    loss = 0.0
    for matrice in variable_dict['weights']:
        loss += tf.nn.l2_loss(matrice)
    for matrice in variable_dict['biases']:
        loss += tf.nn.l2_loss(matrice)
    return loss

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    variable_dict = weights_biases_creation(list_hidden_nodes)
    global_step = tf.Variable(0)
  
    # Training computation.
    logits = NN_function(tf_train_dataset, variable_dict, dropout=dropout)
    
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)
        + beta/2*regularisation_loss(variable_dict))
  
    # Optimizer
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
    #learning_rate = tf.train.exponential_decay(0.5, global_step, 4000, 0.65, staircase=True)
    #optimizer = tf.train.GradientDescentOptimizer(
    #    learning_rate).minimize(
    #        loss, global_step=global_step)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(NN_function(tf_valid_dataset, variable_dict))
    test_prediction = tf.nn.softmax(NN_function(tf_test_dataset, variable_dict))


    



In [58]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
           [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 200 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

