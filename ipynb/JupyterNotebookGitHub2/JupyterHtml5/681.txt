
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [42]:

    
batch_size = 128
tf.reset_default_graph()
graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    beta = tf.placeholder(tf.float32)

    # Variables.
    weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))

    # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits)) + beta*tf.nn.l2_loss(weights)

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [43]:

    
num_steps = 3001
for b in [1e-4, 1e-3, 1e-2, 1e-1]:
# b = 1e-3 
    print("------------------beta = {}--------------------".format(b))
    with tf.Session(graph=graph) as session:
        tf.global_variables_initializer().run()
        print("Initialized")
        for step in range(num_steps):
            # Pick an offset within the training data, which has been randomized.
            # Note: we could use better randomization across epochs.
            offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
            # Generate a minibatch.
            batch_data = train_dataset[offset:(offset + batch_size), :]
            batch_labels = train_labels[offset:(offset + batch_size), :]
            # Prepare a dictionary telling the session where to feed the minibatch.
            # The key of the dictionary is the placeholder node of the graph to be fed,
            # and the value is the numpy array to feed to it.
            feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, beta:b}
            _, l, predictions = session.run(
              [optimizer, loss, train_prediction], feed_dict=feed_dict)

        print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [44]:

    
num_steps = 3001
b= 1e-3

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, beta:b}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [45]:

    
batch_size = 128
num_hidden_layer = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  beta = tf.placeholder(tf.float32)
    
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_layer]))
  biases1 = tf.Variable(tf.zeros([num_hidden_layer]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_layer, num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  

  # Training computation.
  def net(input_data):
      hidden_out = tf.nn.relu(tf.matmul(input_data, weights1) + biases1)
      logits = tf.matmul(hidden_out, weights2) + biases2
      return logits
        
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=net(tf_train_dataset))) \
    + beta * ( tf.nn.l2_loss(weights1) + tf.nn.l2_loss(weights2) )
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(net(tf_train_dataset))
  
  valid_prediction = tf.nn.softmax(net(tf_valid_dataset))

  test_prediction = tf.nn.softmax(net(tf_test_dataset))


    



In [46]:

    
num_steps = 3001
for b in [1e-4, 1e-3, 1e-2, 1e-1]:
# b = 1e-3 
    print("------------------beta = {}--------------------".format(b))
    with tf.Session(graph=graph) as session:
        tf.global_variables_initializer().run()
        print("Initialized")
        for step in range(num_steps):
            # Pick an offset within the training data, which has been randomized.
            # Note: we could use better randomization across epochs.
            offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
            # Generate a minibatch.
            batch_data = train_dataset[offset:(offset + batch_size), :]
            batch_labels = train_labels[offset:(offset + batch_size), :]
            # Prepare a dictionary telling the session where to feed the minibatch.
            # The key of the dictionary is the placeholder node of the graph to be fed,
            # and the value is the numpy array to feed to it.
            feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, beta:b}
            _, l, predictions = session.run(
              [optimizer, loss, train_prediction], feed_dict=feed_dict)

        print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [41]:

    
num_steps = 3001
b= 1e-3

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, beta:b}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [49]:

    
batch_size = 128
num_hidden_layer = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
    
  # Variables.
  weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_layer]))
  biases1 = tf.Variable(tf.zeros([num_hidden_layer]))
  weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_layer, num_labels]))
  biases2 = tf.Variable(tf.zeros([num_labels]))
  

  # Training computation.
  def net(input_data):
      hidden_out = tf.nn.relu(tf.matmul(input_data, weights1) + biases1)
      logits = tf.matmul(hidden_out, weights2) + biases2
      return logits
        
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=net(tf_train_dataset)))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(net(tf_train_dataset))
  
  valid_prediction = tf.nn.softmax(net(tf_valid_dataset))

  test_prediction = tf.nn.softmax(net(tf_test_dataset))


    



In [52]:

    
num_steps = 3001
num_batches = 10

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = step % num_batches
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
            valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [83]:

    
batch_size = 128
num_hidden_layer = 1024

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
    drop = tf.placeholder(tf.float32)


    # Variables.
    weights1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_hidden_layer]))
    biases1 = tf.Variable(tf.zeros([num_hidden_layer]))
    weights2 = tf.Variable(
    tf.truncated_normal([num_hidden_layer, num_labels]))
    biases2 = tf.Variable(tf.zeros([num_labels]))


  # Training computation.
    def net(input_data):
        hidden_out = tf.nn.relu(tf.matmul(input_data, weights1) + biases1)
        drop1 = tf.nn.dropout(hidden_out, keep_prob=0.8)
        logits = tf.matmul(drop1, weights2) + biases2
        return logits
        
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=net(tf_train_dataset)))

    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(net(tf_train_dataset))

    valid_prediction = tf.nn.softmax(net(tf_valid_dataset))

    test_prediction = tf.nn.softmax(net(tf_test_dataset))


    



In [84]:

    
num_steps = 3001
num_batches = 10

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
#         offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        offset = step % num_batches
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
            valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [105]:

    
batch_size = 128
num_hidden_layer = [2024, 1024, 512]

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    weights = {'w1': tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_layer[0]], stddev=0.1)),
               'b1': tf.Variable(tf.zeros([num_hidden_layer[0]])),
               'w2': tf.Variable(tf.truncated_normal([num_hidden_layer[0], num_hidden_layer[1]], stddev=0.1)),
               'b2': tf.Variable(tf.zeros([num_hidden_layer[1]])),
               'w3': tf.Variable(tf.truncated_normal([num_hidden_layer[1], num_hidden_layer[2]], stddev=0.1)),
               'b3': tf.Variable(tf.zeros([num_hidden_layer[2]])),
               'w4': tf.Variable(tf.truncated_normal([num_hidden_layer[2], num_labels], stddev=0.1)),
               'b4': tf.Variable(tf.zeros([num_labels]))}

  # Training computation.
    def net(input_data):
        hidden_1 = tf.nn.relu(tf.matmul(input_data, weights['w1']) + weights['b1'])
#         drop1 = tf.nn.dropout(hidden_1, keep_prob=0.5)
        
        hidden_2 = tf.nn.relu(tf.matmul(hidden_1, weights['w2']) + weights['b2'])
#         drop2 = tf.nn.dropout(hidden_2, keep_prob=0.5)
        
        hidden_3 = tf.nn.relu(tf.matmul(hidden_2, weights['w3']) + weights['b3'])
        drop3 = tf.nn.dropout(hidden_3, keep_prob=0.5)
        
        logits = tf.matmul(drop3, weights['w4']) + weights['b4']
        
        return logits
        
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=net(tf_train_dataset)))

    # Optimizer.
    global_step = tf.Variable(0, trainable=False)
    starter_learning_rate = 0.1
    learning_rate = tf.train.exponential_decay(starter_learning_rate, global_step, 5000, 0.6, staircase=True)
    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step)

#     optimizer = tf.train.AdamOptimizer().minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(net(tf_train_dataset))

    valid_prediction = tf.nn.softmax(net(tf_valid_dataset))

    test_prediction = tf.nn.softmax(net(tf_test_dataset))


    



In [106]:

    
num_steps = 30001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
            valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [116]:

    
batch_size = 512
num_hidden_layer = [2048, 1024, 512, 256]

graph = tf.Graph()
with graph.as_default():

    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    weights = {'w1': tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_layer[0]], stddev=0.1)),
               'b1': tf.Variable(tf.zeros([num_hidden_layer[0]])),
               'w2': tf.Variable(tf.truncated_normal([num_hidden_layer[0], num_hidden_layer[1]], stddev=0.1)),
               'b2': tf.Variable(tf.zeros([num_hidden_layer[1]])),
               'w3': tf.Variable(tf.truncated_normal([num_hidden_layer[1], num_hidden_layer[2]], stddev=0.1)),
               'b3': tf.Variable(tf.zeros([num_hidden_layer[2]])),
               'w4': tf.Variable(tf.truncated_normal([num_hidden_layer[2], num_hidden_layer[3]], stddev=0.1)),
               'b4': tf.Variable(tf.zeros([num_hidden_layer[3]])),
               'w5': tf.Variable(tf.truncated_normal([num_hidden_layer[3], num_labels], stddev=0.1)),
               'b5': tf.Variable(tf.zeros([num_labels]))}

  # Training computation.
    def net(input_data):
        hidden_1 = tf.nn.relu(tf.matmul(input_data, weights['w1']) + weights['b1'])
#         drop1 = tf.nn.dropout(hidden_1, keep_prob=0.5)
        
        hidden_2 = tf.nn.relu(tf.matmul(hidden_1, weights['w2']) + weights['b2'])
#         drop2 = tf.nn.dropout(hidden_2, keep_prob=0.5)
        
        hidden_3 = tf.nn.relu(tf.matmul(hidden_2, weights['w3']) + weights['b3'])
#         drop3 = tf.nn.dropout(hidden_3, keep_prob=0.5)
        
        hidden_4 = tf.nn.relu(tf.matmul(hidden_3, weights['w4']) + weights['b4'])
        drop4 = tf.nn.dropout(hidden_4, keep_prob=0.5)
        
        logits = tf.matmul(drop4, weights['w5']) + weights['b5']
        
        return logits
        
    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=net(tf_train_dataset)))

    # Optimizer.
#     global_step = tf.Variable(0, trainable=False)
#     starter_learning_rate = 0.1
#     learning_rate = tf.train.exponential_decay(starter_learning_rate, global_step, 2000, 0.6, staircase=True)
#     optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step)

    optimizer = tf.train.AdamOptimizer().minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(net(tf_train_dataset))

    valid_prediction = tf.nn.softmax(net(tf_valid_dataset))

    test_prediction = tf.nn.softmax(net(tf_test_dataset))


    



In [117]:

    
num_steps = 30001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
            valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

