
In [36]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [37]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [38]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [39]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [45]:

    
batch_size = 128
B = .003

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) + (B * .5 * tf.nn.l2_loss(weights))
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [48]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [49]:

    
batch_size = 128
hidden_units = 1024
B = .003

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Set hidden layer 1
  weightsR = tf.Variable( tf.truncated_normal([image_size * image_size, hidden_units]) )
  
  biasesR = tf.Variable( tf.zeros([hidden_units]) )
    
  hiddenR = tf.nn.relu( tf.matmul(tf_train_dataset, weightsR) + biasesR )

  # Set final layer variables
  weights = tf.Variable( tf.truncated_normal([hidden_units, num_labels]) )

  biases = tf.Variable( tf.zeros([num_labels]) )
    
  logits = tf.matmul(hiddenR, weights) + biases
    
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  loss = loss + B*.5*(tf.nn.l2_loss(weightsR) + tf.nn.l2_loss(weights)) 

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax( logits )
  logits_validation = tf.matmul( tf.nn.relu( tf.matmul(tf_valid_dataset, weightsR) + biasesR ),
                                weights) + biases
  valid_prediction = tf.nn.softmax( logits_validation )
  logits_test = tf.matmul( tf.nn.relu( tf.matmul(tf_test_dataset, weightsR) + biasesR ),
                          weights) + biases
  test_prediction = tf.nn.softmax( logits_test )


    



In [50]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [51]:

    
batch_size = 10
hidden_units = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Set hidden layer 1
  weightsR = tf.Variable( tf.truncated_normal([image_size * image_size, hidden_units]) )
  
  biasesR = tf.Variable( tf.zeros([hidden_units]) )
    
  hiddenR = tf.nn.relu( tf.matmul(tf_train_dataset, weightsR) + biasesR )

  # Set final layer variables
  weights = tf.Variable( tf.truncated_normal([hidden_units, num_labels]) )

  biases = tf.Variable( tf.zeros([num_labels]) )
    
  logits = tf.matmul(hiddenR, weights) + biases
    
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  loss = loss + B*.5*(tf.nn.l2_loss(weightsR) + tf.nn.l2_loss(weights))

  # L2 loss implementation
  B = .003

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax( logits )
  logits_validation = tf.matmul( tf.nn.relu( tf.matmul(tf_valid_dataset, weightsR) + biasesR ),
                                weights) + biases
  valid_prediction = tf.nn.softmax( logits_validation )
  logits_test = tf.matmul( tf.nn.relu( tf.matmul(tf_test_dataset, weightsR) + biasesR ),
                          weights) + biases
  test_prediction = tf.nn.softmax( logits_test )


    



In [52]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [55]:

    
batch_size = 10
hidden_units = 1024
B = .003

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Set hidden layer 1
  weightsR = tf.Variable( tf.truncated_normal([image_size * image_size, hidden_units]) )
  
  biasesR = tf.Variable( tf.zeros([hidden_units]) )
    
  hiddenR = tf.nn.relu( tf.matmul(tf_train_dataset, weightsR) + biasesR )
  # dropout implementation
  hiddenR = tf.nn.dropout(hiddenR,.5)

  # Set final layer variables
  weights = tf.Variable( tf.truncated_normal([hidden_units, num_labels]) )

  biases = tf.Variable( tf.zeros([num_labels]) )
    
  logits = tf.matmul( hiddenR, weights ) + biases
    
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  loss = loss + B*.5*(tf.nn.l2_loss(weightsR) + tf.nn.l2_loss(weights))
 

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax( logits )
    
  logits_validation = tf.matmul( tf.nn.relu( tf.matmul(tf_valid_dataset, weightsR) + biasesR ),
                                weights) + biases
  valid_prediction = tf.nn.softmax( logits_validation )
    
  logits_test = tf.matmul( tf.nn.relu( tf.matmul(tf_test_dataset, weightsR) + biasesR ),
                          weights) + biases
  test_prediction = tf.nn.softmax( logits_test )


    



In [56]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [74]:

    
batch_size = 128
hidden_units = 1024
hidden_units2 = 612
B = .01

graph = tf.Graph()
with graph.as_default():

  # number of steps taken
  globalstep = tf.Variable(0) # count the number of steps taken
  starter_learning_rate = .1
  learning_rate = tf.train.exponential_decay(starter_learning_rate,
                                             globalstep, 1000, .9, staircase=True)

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Set hidden layer 1
  weightsR = tf.Variable( tf.truncated_normal([image_size * image_size, hidden_units]) )
  
  biasesR = tf.Variable( tf.zeros([hidden_units]) )
    
  hiddenR = tf.nn.relu( tf.matmul(tf_train_dataset, weightsR) + biasesR )
  #hiddenR = tf.nn.dropout(hiddenR,.5)
    
  # Set hidden layer 2
  weightsR2 = tf.Variable( tf.truncated_normal([hidden_units,hidden_units2]) )
  biasesR2 = tf.Variable( tf.zeros([hidden_units2]) )
  hiddenR2 = tf.nn.relu( tf.matmul(hiddenR,weightsR2) + biasesR2 )
  #hiddenR2 = tf.nn.dropout(hiddenR2,.5)

  # Set final layer variables
  weights = tf.Variable( tf.truncated_normal([hidden_units2, num_labels]) )

  biases = tf.Variable( tf.zeros([num_labels]) )
    
  logits = tf.matmul( hiddenR2, weights ) + biases
    
  loss = tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))

  loss = loss + B*.5*(tf.nn.l2_loss(weightsR) + tf.nn.l2_loss(weights))

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss,
                                                                        global_step = globalstep)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax( logits )
  # Predictions for the validation data
  logist_validation = tf.matmul( tf.nn.relu( tf.matmul(tf_valid_dataset, weightsR) + biasesR ),
                                weightsR2) + biasesR2
  logits_validation1 = tf.matmul( logist_validation, weights ) + biases
  valid_prediction = tf.nn.softmax( logits_validation1 )

  # Predictions for the testing data
  logits_test = tf.matmul( tf.nn.relu( tf.matmul(tf_test_dataset, weightsR) + biasesR ),
                          weightsR2) + biasesR2
  logits_test1 = tf.matmul( logits_test, weights ) + biases
  test_prediction = tf.nn.softmax( logits_test1 )


    



In [76]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

