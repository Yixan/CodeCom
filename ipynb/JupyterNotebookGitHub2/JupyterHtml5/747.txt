
In [1]:

    
#importing the packages
import tensorflow as tf
sess= tf.Session()


    



In [2]:

    
#Creating a new Graph(not default)
myGraph=tf.Graph()
with myGraph.as_default():
    variable=tf.Variable(30,name='navin')
    initialize=tf.global_variables_initializer()    


    



In [3]:

    
#Running computation in session in graph
with tf.Session(graph=myGraph) as sess:
             sess.run(initialize)
             print(sess.run(variable))


    



In [ ]:

    
#Output graph to tensorboard
import os
merged = tf.summary.merge_all(key='summaries')
if not os.path.exists('tensorboard_logs/'):
    os.makedirs('tensorboard_logs/')

my_writer = tf.summary.FileWriter('/tensorboard_logs/', sess.graph)
def TB(cleanup=False):
    import webbrowser
    webbrowser.open('http://127.0.1.1:6006')
    !tensorboard --logdir="/tensorboard_logs"

    if cleanup:
        !rm -R tensorboard_logs/

TB(1)   #Graph launch on browser


    



In [1]:

    
# 2


    



In [2]:

    
import tensorflow as tf
x = tf.constant(12,dtype= 'float32')
sess= tf.Session()
print(sess.run(x))


    



In [3]:

    
# 3


    



In [4]:

    
import tensorflow as tf
x = tf.constant(12, dtype= 'float32')
with tf.Session() as sess:
    print(sess.run(x))


    



In [5]:

    
#4


    



In [6]:

    
import tensorflow as tf
x = tf.constant(12, dtype= 'float32') 
y = tf.Variable(x + 11)
model = tf.global_variables_initializer()
with tf.Session() as sess:
    sess.run(model)
    print(sess.run(y))


    



In [7]:

    
#5


    



In [8]:

    
import tensorflow as tf
x = tf.constant([14, 23, 40, 30])
y = tf.Variable(x*2 + 100)
model = tf.global_variables_initializer()
with tf.Session() as sess:
    sess.run(model)
    print(sess.run(y))


    



In [9]:

    
#6


    



In [10]:

    
#Placeholder is a variable that we can feed data to at a later time
import tensorflow as tf
x = tf.placeholder("float", None)
y = x * 10 + 500
with tf.Session() as sess:
    placeX = sess.run(y, feed_dict={x: [0, 5, 15, 25]})
    print(placeX)


    



In [11]:

    
#7


    



In [12]:

    
import tensorflow as tf
x = tf.placeholder("float", [None, 4])
y = x * 10 + 1
with tf.Session() as session:
    dataX = [[12, 2, 0, -2],
              [14, 4, 1, 0],]
    placeX = session.run(y, feed_dict={x: dataX})
    print(placeX)


    



In [13]:

    
#8


    



In [14]:

    
import tensorflow as tf
x = tf.placeholder("float", [2, 4])
y = x * 10 + 1
with tf.Session() as session:
    dataX = [[12, 2, 0, -2],
              [14, 4, 1, 0],]
    placeX = session.run(y, feed_dict={x: dataX})
    print(placeX)


    



In [15]:

    
#9


    



In [16]:

    
import tensorflow as tf
x = tf.placeholder("float", [2, 4])
y = x * 10 + 1
with tf.Session() as session:
    dataX = [[12, 2, 0, -2],
              [14, 4, 1, 0],]
    placeX = session.run(y, feed_dict={x: dataX})
    print(placeX)


    



In [17]:

    
#10


    



In [20]:

    
#Creating tensor
import numpy as np
import tensorflow as tf
image=tf.image.decode_jpeg(tf.read_file('tiger_1.jpg'))
sess=tf.InteractiveSession()
print(sess.run(tf.shape(image)))


    



In [21]:

    
print(sess.run(image[10:15,0:4,1]))


    



In [22]:

    
#11


    



In [23]:

    
#Fixed Tensors
import tensorflow as tf
sess=tf.Session()
A=tf.zeros([2,3])
print(sess.run(A))


    



In [24]:

    
#Declare another variable
B=tf.ones([4,3])
print(sess.run(B))


    



In [25]:

    
C=tf.fill([2,3],13)
print(sess.run(C))


    



In [26]:

    
D=tf.diag([4,-3,2])
print(sess.run(D))


    



In [27]:

    
E=tf.constant([4,2,3,1])
print(sess.run(E))


    



In [28]:

    
#Sequence tensor


    



In [29]:

    
G=tf.range(start=6,limit=45,delta=3)
print(sess.run(G))


    



In [30]:

    
H=tf.linspace(10.0,92.0,5) #creates sequence of evenly spaced value
print(sess.run(H))


    



In [31]:

    
#Random Tensor


    



In [32]:

    
R1=tf.random_uniform([2,3],minval=0,maxval=4)
print(sess.run(R1))


    



In [33]:

    
R2=tf.random_normal([2,3],mean=5,stddev=4)
print(sess.run(R2))


    



In [34]:

    
R3=tf.random_shuffle(tf.diag([3,-2,4]))
print(sess.run(R3))


    



In [35]:

    
R4=tf.random_crop(tf.diag([3,-2,4]),[3,2])
print(sess.run(R4))


    



In [36]:

    
print(sess.run(tf.diag([3,-2,4])))


    



In [37]:

    
print(sess.run(tf.zeros([2,4])))


    



In [38]:

    
print(sess.run(tf.diag([3,1,5,-2])))


    



In [39]:

    
print(sess.run(tf.range(start=4, limit=16, delta=2)))


    



In [40]:

    
#12


    



In [41]:

    
#Working with matrices


    



In [42]:

    
import tensorflow as tf
import numpy as np
sess=tf.Session()
A=tf.random_uniform([3,2])
B=tf.fill([2,4],3.5)
C=tf.random_uniform([3,4])


    



In [43]:

    
print(sess.run(A))


    



In [44]:

    
print(sess.run(B))


    



In [45]:

    
print(sess.run(tf.matmul(A,B)))    # Matrix multiplication


    



In [46]:

    
print(sess.run(tf.matmul(A,B)+C))    #Multiplication and addition


    



In [47]:

    
#Activation function


    



In [48]:

    
#working on tanh function
E=tf.nn.tanh([10,2,0.5,-0.5,-1.0,-2,-10.0])
print(sess.run(E))


    



In [49]:

    
#sigmoid function
J=tf.nn.sigmoid([10,2,0.5,-0.5,-1.0,-2,-10.0])
print(sess.run(J))


    



In [50]:

    
import tensorflow as tf
sess=tf.Session()
print(sess.run(tf.constant([-2,1,-3,13])))
print('\n\n')
A=tf.nn.relu([-2,1,-3,13])
print(sess.run(A))


    



In [51]:

    
import tensorflow as tf
sess=tf.Session()
print(sess.run(tf.constant([-2,1,-3,13])))
print('\n\n')
A=tf.nn.relu6([-2,1,-3,13])
print(sess.run(A))


    



In [52]:

    
import tensorflow as tf
sess=tf.Session()
print(sess.run(tf.constant([[-2,1,-3],[10,-16,-5]])))
print('\n')
C=tf.nn.relu([[-2,1,-3],[10,-16,-5]])
print(sess.run(C))


    



In [53]:

    
#Relu function
Re=tf.nn.relu([-2,1,-3,13])
print(sess.run(Re))


    



In [54]:

    
#elu function
H=tf.nn.elu([10,2,1,0.5,0,-0.5,-1.,-2.,-10.])
print(sess.run(H))


    



In [55]:

    
#Relu6 function
Re6=tf.nn.relu6([10,2,1,0.5,0,-0.5,-1.,-2.,-10.])
print(sess.run(Re6))


    



In [56]:

    
#softmax function
X=tf.nn.softmax([10,2,0.5,0,-0.5,-1.0,-2,-10.0])
print(sess.run(X))


    



In [57]:

    
#softsign function
Y=tf.nn.softsign([10,2,0.5,0,-0.5,-1.0,-2,-10.0])
print(sess.run(Y))


    



In [58]:

    
#softplus function
Z=tf.nn.softplus([10,2,0.5,0,-0.5,-1.0,-2,-10.0])
print(sess.run(Z))


    



In [66]:

    
#13


    



In [59]:

    
import tensorflow as tf
import numpy as np
sess=tf.Session()


    



In [60]:

    
#Assuming prediction model
pred=np.asarray([0.2,0.3,0.5,10.0,12.0,13.0,3.5,7.4,3.9,2.3])
#convert ndarray into tensor
x_val=tf.convert_to_tensor(pred)
#Assuming actual values
actual=np.asarray([0.1,0.4,0.6,9.0,11.0,12.0,3.4,7.1,3.8,2.0])


    



In [61]:

    
#L2 loss:L1=(pred-actual)^2
l2=tf.square(pred-actual)
l2_out=sess.run(tf.round(l2))
print(l2_out)


    



In [62]:

    
#L2 loss:L1=abs(pred-actual)
l1=tf.abs(pred-actual)
l1_out=sess.run(l1)
print(l1_out)


    



In [63]:

    
#cross entropy loss
softmax_xentropy_variable=tf.nn.sigmoid_cross_entropy_with_logits(logits=l1_out,labels=l2_out)
print(sess.run(softmax_xentropy_variable))


    



In [64]:

    
#14


    



In [65]:

    
#Optimization


    



In [66]:

    
import tensorflow as tf
import numpy as np


    



In [67]:

    
x = tf.Variable(3, name='x', dtype=tf.float32)
log_x = tf.log(x)
log_x_squared = tf.square(log_x)


    



In [68]:

    
optimizer = tf.train.GradientDescentOptimizer(0.7)
train = optimizer.minimize(log_x_squared)


    



In [69]:

    
init =tf.global_variables_initializer()


    



In [70]:

    
#Finnaly running computation
with tf.Session() as session:
    session.run(init)
    print("starting at", "x:", session.run(x), "log(x)^2:", session.run(log_x_squared))
    for step in range(10):  
      session.run(train)
      print("step", step, "x:", session.run(x), "log(x)^2:", session.run(log_x_squared))    


    



In [71]:

    
# importing libraries
import numpy as np
import tensorflow as tf


    



In [72]:

    
# placeholders declaration
x=tf. placeholder(tf.int32, [5])
y=tf. placeholder(tf.int32, [5])


    



In [73]:

    
# Metrices declaration
acc, acc_op=tf.metrics.accuracy(labels=x, predictions=y)


    



In [74]:

    
#session initialization
sess=tf.InteractiveSession()
sess.run(tf.global_variables_initializer())
sess.run(tf.local_variables_initializer())


    



In [75]:

    
#value assign
val= sess.run([acc,acc_op], feed_dict={x: [1,1,0,1,0], y: [0,1,0,0,1]})


    



In [76]:

    
#print Accuracy
val_acc=sess.run(acc)
print(val_acc)


    



In [ ]:

    
 


    

