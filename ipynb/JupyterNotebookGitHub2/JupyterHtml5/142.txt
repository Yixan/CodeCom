
In [9]:

    
import tensorflow as tf
sess = tf.InteractiveSession()
#sess = tf.Session()
a = tf.Variable(5.0)
b = tf.Variable(6.0)
sess.run(tf.global_variables_initializer())
print(sess.run(tf.report_uninitialized_variables()))
c = a * b
# We can just use 'c.eval()' without passing 'sess'
print(c.eval())
sess.close()


    



In [2]:

    
'''from scipy.io import wavfile
rate,data = wavfile.read('./vocalSeparation/origin_mix.wav')
rate1,data1 = wavfile.read('./vocalSeparation/origin_vocal.wav')
rate2,data2 = wavfile.read('./vocalSeparation/pred_mix.wav')
rate3,data3 = wavfile.read('./vocalSeparation/pred_vocal.wav')
print(data.shape,data1.shape,data2.shape,data3.shape)'''
#scipy.io.wavfile.write('./vocalSeparation/morigin_mix.wav',rate,data)


    



In [65]:

    
import tensorflow as tf
with tf.name_scope("Scope_A"):
    a = tf.add(1, 2, name="A_add")
    b = tf.multiply(a, 3, name="A_mul")
with tf.name_scope("Scope_B"):
    c = tf.add(4, 5, name="B_add")
    d = tf.multiply(c, 6, name="B_mul")
e = tf.add(b, d, name="output")
writer = tf.summary.FileWriter('./name_scope', graph=tf.get_default_graph())
writer.close()


    



In [63]:

    
import tensorflow as tf
import numpy as np
with tf.Session() as sess:
    tf.logging.set_verbosity(tf.logging.INFO)
    x = tf.Variable([[1., 2., 3.],[4., 5., 6.]])
    rx = tf.reshape(x, [1, 2, 3, 1])
    valid_pad = tf.nn.max_pool(rx, [1, 2, 2, 1], [1, 2, 2, 1], padding='VALID')
    same_pad = tf.nn.max_pool(rx, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')
    psame_pad = tf.Print(same_pad,[same_pad],'where are u')
    print(sess.run(x.initializer))
    print(sess.run(psame_pad))
    print(psame_pad.eval())


    



In [57]:

    
import tensorflow as tf
import numpy as np
sess = tf.InteractiveSession()
tf.logging.set_verbosity(tf.logging.INFO)
#x = tf.Variable([[1., 2., 3.],[4., 5., 6.]])
x = tf.placeholder(dtype=tf.float32,shape=[2,3])
rx = tf.reshape(x, [1, 2, 3, 1])
valid_pad = tf.nn.max_pool(rx, [1, 2, 2, 1], [1, 2, 2, 1], padding='VALID')
same_pad = tf.nn.max_pool(rx, [1, 2, 2, 1], [1, 2, 2, 1], padding='SAME')

#print(valid_pad)
psame_pad = tf.Print(same_pad,[same_pad],'where are u')
print(sess.run(psame_pad,feed_dict=
               {x:np.array([[1., 2., 3.],[4., 5., 6.]],dtype=np.float32)}))
sess.close()


    



In [67]:

    
'''import tensorflow as tf
import numpy as np
x = tf.placeholder(dtype=tf.float32,shape=None)
result=tf.nn.conv1d(x,np.zeros((2,3,4),dtype=np.float32),stride=1, padding='VALID')
sess = tf.InteractiveSession()
print(sess.run(result,feed_dict={x:np.zeros((1,10,3),dtype=np.float32)}))'''


    



In [20]:

    
import tensorflow as tf
import numpy as np
sess = tf.InteractiveSession()
q = tf.PaddingFIFOQueue(capacity=10, dtypes=[tf.int32, tf.int32], shapes=[[], [None]])
sample0 = tf.placeholder(dtype=tf.int32, shape=None)
sample1 = tf.placeholder(dtype=tf.int32, shape=None)
sample2 = tf.placeholder(dtype=tf.int32, shape=None)
#eq1 = q.enqueue([1, [1]])
eq1 = q.enqueue([sample0, sample1])
eq2 = q.enqueue([2,[2,3]])
eq3 = q.enqueue([3, [4,5,6]])
dq = q.dequeue()
print(sess.run(eq1,feed_dict={sample0:1,sample1:[1]}),
      sess.run(eq2),sess.run(eq3))
print(sess.run(dq) ,sess.run(dq) ,sess.run(dq))


    



In [9]:

    
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

# Imports
import numpy as np
import tensorflow as tf

tf.logging.set_verbosity(tf.logging.INFO)


    



In [10]:

    
def cnn_model_fn(features, labels, mode):
  """Model function for CNN."""
  # Input Layer
  input_layer = tf.reshape(features["x"], [-1, 28, 28, 1])

  # Convolutional Layer #1
  conv1 = tf.layers.conv2d(
      inputs=input_layer,
      filters=32,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)

  # Pooling Layer #1
  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)

  # Convolutional Layer #2 and Pooling Layer #2
  conv2 = tf.layers.conv2d(
      inputs=pool1,
      filters=64,
      kernel_size=[5, 5],
      padding="same",
      activation=tf.nn.relu)
  pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)

  # Dense Layer
  pool2_flat = tf.reshape(pool2, [-1, 7 * 7 * 64])
  dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)
  dropout = tf.layers.dropout(
      inputs=dense, rate=0.04, training=mode == tf.estimator.ModeKeys.TRAIN)

  # Logits Layer
  logits = tf.layers.dense(inputs=dropout, units=10)

  predictions = {
      # Generate predictions (for PREDICT and EVAL mode)
      "classes": tf.argmax(input=logits, axis=1),
      # Add `softmax_tensor` to the graph. It is used for PREDICT and by the
      # `logging_hook`.
      "probabilities": tf.nn.softmax(logits, name="softmax_tensor")
  }

  if mode == tf.estimator.ModeKeys.PREDICT:
    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)

  # Calculate Loss (for both TRAIN and EVAL modes)
  loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)

  # Configure the Training Op (for TRAIN mode)
  if mode == tf.estimator.ModeKeys.TRAIN:
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)
    train_op = optimizer.minimize(
        loss=loss,
        global_step=tf.train.get_global_step())
    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)

  # Add evaluation metrics (for EVAL mode)
  eval_metric_ops = {
      "accuracy": tf.metrics.accuracy(
          labels=labels, predictions=predictions["classes"])}
  return tf.estimator.EstimatorSpec(
      mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)


    



In [11]:

    
mnist = tf.contrib.learn.datasets.load_dataset("mnist")
train_data = mnist.train.images # Returns np.array
train_labels = np.asarray(mnist.train.labels, dtype=np.int32)
eval_data = mnist.test.images # Returns np.array
eval_labels = np.asarray(mnist.test.labels, dtype=np.int32)


    



In [12]:

    
mnist_classifier = tf.estimator.Estimator(
    model_fn=cnn_model_fn, model_dir="/tmp/mnist_convnet_model")


    



In [5]:

    
tensors_to_log = {"probabilities": "softmax_tensor"}
logging_hook = tf.train.LoggingTensorHook(
  tensors=tensors_to_log, every_n_iter=50)


    



In [ ]:

    
train_input_fn = tf.estimator.inputs.numpy_input_fn(
    x={"x": train_data},
    y=train_labels,
    batch_size=100,
    num_epochs=None,
    shuffle=True)
mnist_classifier.train(
    input_fn=train_input_fn,
    steps=20000,
    hooks=[logging_hook])


    



In [7]:

    
eval_input_fn = tf.estimator.inputs.numpy_input_fn(
    x={"x": eval_data},
    y=eval_labels,
    num_epochs=1,
    shuffle=False)
eval_results = mnist_classifier.evaluate(input_fn=eval_input_fn)
print(eval_results)


    



In [ ]:

    
 


    

