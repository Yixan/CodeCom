
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [5]:

    
set_size = 5000
beta = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data
  tf_train_dataset = tf.constant(train_dataset[0:set_size, :])
  tf_train_labels = tf.constant(train_labels[0:set_size])
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  loss = tf.reduce_mean(loss + beta * tf.nn.l2_loss(weights)) #l2 loss function
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 801

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
    
  for step in range(num_steps):
    _, l, predictions = session.run([optimizer, loss, train_prediction])
    
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, train_labels[0:set_size, :]))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 128
beta = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables
  weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  loss = tf.reduce_mean(loss + beta * tf.nn.l2_loss(weights)) #l2 loss function
  
  # Optimizer
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [8]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
    
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [11]:

    
set_size = 200
beta = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data
  tf_train_dataset = tf.constant(train_dataset[0:set_size, :])
  tf_train_labels = tf.constant(train_labels[0:set_size])
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  loss = tf.reduce_mean(loss + beta * tf.nn.l2_loss(weights)) #l2 loss function
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [12]:

    
num_steps = 801

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
    
  for step in range(num_steps):
    _, l, predictions = session.run([optimizer, loss, train_prediction])
    
    if (step % 100 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, train_labels[0:set_size, :]))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [13]:

    
batch_size = 128
beta = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables
  weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  loss = tf.reduce_mean(loss + beta * tf.nn.l2_loss(weights)) #l2 loss function
  
  # Optimizer
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [14]:

    
num_steps = 3001

train_dataset_mini = train_dataset[0:200, :]
train_labels_mini = train_labels[0:200, :]

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
    
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels_mini.shape[0] - batch_size)
    batch_data = train_dataset_mini[offset:(offset + batch_size), :]
    batch_labels = train_labels_mini[offset:(offset + batch_size), :]
    
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [19]:

    
batch_size = 128
beta = 0.001

graph = tf.Graph()
with graph.as_default():

  # Input data
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
    
  # Hidden layer
  hidden_nodes = 1024
  hidden_weights = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
  hidden_biases = tf.Variable(tf.zeros([hidden_nodes]))
  hidden_layer = tf.nn.relu(tf.matmul(tf_train_dataset, hidden_weights) + hidden_biases)

  # add dropout to hidden layer
  keep_prob = tf.placeholder("float")
  hidden_layer_drop = tf.nn.dropout(hidden_layer, keep_prob)
    
  # Variables
  weights = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation
  logits = tf.matmul(hidden_layer_drop, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  loss = tf.reduce_mean(loss + beta * tf.nn.l2_loss(weights))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)

  valid_hidden = tf.nn.relu(tf.matmul(tf_valid_dataset, hidden_weights) + hidden_biases)
  valid_prediction = tf.nn.softmax(tf.matmul(valid_hidden, weights) + biases)

  test_hidden = tf.nn.relu(tf.matmul(tf_test_dataset, hidden_weights) + hidden_biases)
  test_prediction = tf.nn.softmax(tf.matmul(test_hidden, weights) + biases)


    



In [21]:

    
num_steps = 3001

train_dataset_mini = train_dataset[0:200, :]
train_labels_mini = train_labels[0:200, :]

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels_mini.shape[0] - batch_size)
    batch_data = train_dataset_mini[offset:(offset + batch_size), :]
    batch_labels = train_labels_mini[offset:(offset + batch_size), :]
    
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.5}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [235]:

    
import math

batch_size = 128
beta = 0.03

graph = tf.Graph()
with graph.as_default():

  # Input data
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
    
  keep_prob = tf.placeholder("float")

  # layer
  layer1_nodes = 1024
  layer1_weights = tf.Variable(tf.truncated_normal([image_size * image_size, layer1_nodes], stddev=math.sqrt(2.0/layer1_nodes)))
  layer1_biases = tf.Variable(tf.zeros([layer1_nodes]))
  layer1 = tf.nn.relu(tf.matmul(tf_train_dataset, layer1_weights) + layer1_biases)
    
  # add dropout to layer
  layer1 = tf.nn.dropout(layer1, keep_prob)
    
  # layer 2
  layer2_nodes = 256
  layer2_weights = tf.Variable(tf.truncated_normal([layer1_nodes, layer2_nodes], stddev=math.sqrt(2.0/layer2_nodes)))
  layer2_biases = tf.Variable(tf.zeros([layer2_nodes]))
  layer2 = tf.nn.relu(tf.matmul(layer1, layer2_weights) + layer2_biases)

  # add dropout to layer
  layer2 = tf.nn.dropout(layer2, keep_prob)

  # layer 3
  layer3_nodes = 128
  layer3_weights = tf.Variable(tf.truncated_normal([layer2_nodes, layer3_nodes], stddev=math.sqrt(2.0/layer3_nodes)))
  layer3_biases = tf.Variable(tf.zeros([layer3_nodes]))
  layer3 = tf.nn.relu(tf.matmul(layer2, layer3_weights) + layer3_biases)

  # add dropout to layer
  layer3 = tf.nn.dropout(layer3, keep_prob)
    
  # layer 4
  layer4_nodes = 64
  layer4_weights = tf.Variable(tf.truncated_normal([layer3_nodes, layer4_nodes], stddev=math.sqrt(2.0/layer4_nodes)))
  layer4_biases = tf.Variable(tf.zeros([layer4_nodes]))
  layer4 = tf.nn.relu(tf.matmul(layer3, layer4_weights) + layer4_biases)

  # add dropout to layer
  layer4 = tf.nn.dropout(layer4, keep_prob)
    
  # Variables
  weights = tf.Variable(tf.truncated_normal([layer4_nodes, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation
  logits = tf.matmul(layer4, weights) + biases
    
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  loss = tf.reduce_mean(loss + beta * tf.nn.l2_loss(weights))
  
  # Optimizer
  global_step = tf.Variable(0)
  learnr = tf.placeholder("float")
  learning_rate = tf.train.exponential_decay(learnr, global_step, 500, 0.86, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  #optimizer = tf.train.GradientDescentOptimizer(0.0001).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)

  valid_layer1 = tf.nn.relu(tf.matmul(tf_valid_dataset, layer1_weights) + layer1_biases)
  valid_layer2 = tf.nn.relu(tf.matmul(valid_layer1, layer2_weights) + layer2_biases)
  valid_layer3 = tf.nn.relu(tf.matmul(valid_layer2, layer3_weights) + layer3_biases)
  valid_layer4 = tf.nn.relu(tf.matmul(valid_layer3, layer4_weights) + layer4_biases)

  valid_prediction = tf.nn.softmax(tf.matmul(valid_layer4, weights) + biases)

  test_layer1 = tf.nn.relu(tf.matmul(tf_test_dataset, layer1_weights) + layer1_biases)
  test_layer2 = tf.nn.relu(tf.matmul(test_layer1, layer2_weights) + layer2_biases)
  test_layer3 = tf.nn.relu(tf.matmul(test_layer2, layer3_weights) + layer3_biases)
  test_layer4 = tf.nn.relu(tf.matmul(test_layer3, layer4_weights) + layer4_biases)
    
  test_prediction = tf.nn.softmax(tf.matmul(test_layer4, weights) + biases)


    



In [237]:

    
num_steps = 5001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : 0.85, learnr : 0.1}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

