
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [20]:

    
batch_size = 128
lam = 0.01
graph_1 = tf.Graph_1()
with graph_1.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))+\
    lam*tf.nn.l2_loss(weights)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(
    tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [21]:

    
%%timeit -n 1 -r 1
num_steps = 3001

with tf.Session(graph=graph_1) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [17]:

    
batch_size = 128
lam = 0.01
graph_2 = tf.Graph()
with graph_2.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  num_hidden = 1024  
  #layer 1
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden]))
  b1 = tf.Variable(tf.zeros([num_hidden]))


  #layer 2
  W2 = tf.Variable(tf.truncated_normal([num_hidden, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))

  
  # Training computation.
  # hidden layer output  
  y1 = tf.nn.relu(tf.matmul(tf_train_dataset, W1) + b1)
  # second layer output
  y2 = tf.matmul(y1, W2) + b2
  ## QUESTION : IS THIS THE RIGHT WAY TO REGULARIZE?
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=y2))+\
    lam*(tf.nn.l2_loss(W1)+tf.nn.l2_loss(W2)) 
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(y2)
  y1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + b1)  
  valid_prediction = tf.nn.softmax(tf.matmul(y1_valid, W2) + b2)
  y1_test = tf.nn.relu(tf.matmul(tf_test_dataset, W1) + b1)  
  test_prediction = tf.nn.softmax(tf.matmul(y1_test, W2) + b2)


    



In [37]:

    
%%timeit -n 1 -r 1
num_steps = 3001

with tf.Session(graph=graph_2) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(
        valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [14]:

    
def train_nn(n=None, graph=None):
    num_steps = 3001
    if n:
        train_dataset_small=train_dataset[:n*batch_size]
        train_labels_small=train_labels[:n*batch_size]
    else:
        train_dataset_small=train_dataset
        train_labels_small=train_labels
    
    with tf.Session(graph=graph) as session:
      tf.global_variables_initializer().run()
      print("Initialized")
      for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels_small.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset_small[offset:(offset + batch_size), :]
        batch_labels = train_labels_small[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
          print("Minibatch loss at step %d: %f" % (step, l))
          print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
          print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
      print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
    


    



In [21]:

    
# NOTE : We use the graph defined above, that is, two layer NN with l2 regularization
train_nn(n=10,graph=graph_2)


    



In [31]:

    
# Let's define a new network : 
# graph_3 = graph with 2 layers, regularization and dropout on the hidden layer
batch_size = 128
lam = 0.01
graph_3 = tf.Graph()
with graph_3.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  num_hidden = 1024  
  #layer 1
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden]))
  b1 = tf.Variable(tf.zeros([num_hidden]))


  #layer 2
  W2 = tf.Variable(tf.truncated_normal([num_hidden, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))

  
  # Training computation.
  # hidden layer output: dropout(relu(xw1+b1))  
  y1 = tf.nn.dropout(tf.nn.relu(tf.matmul(tf_train_dataset, W1) + b1),keep_prob = 0.5)
  # second layer output
  y2 = tf.matmul(y1, W2) + b2
  ## QUESTION : IS THIS THE RIGHT WAY TO REGULARIZE?
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=y2))+\
    lam*(tf.nn.l2_loss(W1)+tf.nn.l2_loss(W2)) 
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(y2)
  # Here we don't put any dropout!!
  y1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + b1)  
  valid_prediction = tf.nn.softmax(tf.matmul(y1_valid, W2) + b2)
  y1_test = tf.nn.relu(tf.matmul(tf_test_dataset, W1) + b1)  
  test_prediction = tf.nn.softmax(tf.matmul(y1_test, W2) + b2)


    



In [29]:

    
# Now run it
train_nn(graph=graph_3)


    



In [32]:

    
train_nn(n=10,graph=graph_3)


    



In [40]:

    
# Let's define a new network : 
# graph_4 = multi layers with decaying learning-rate
batch_size = 128
lam = 0.001
# Variables.
num_hidden_1 = 1024  
num_hidden_2 = 256
num_hidden_3 = 64
    
graph_4 = tf.Graph()
with graph_4.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  

  #layer 1
  W1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_1],stddev = np.sqrt(2.0/(image_size*image_size))))
  b1 = tf.Variable(tf.zeros([num_hidden_1]))

  #layer 2
  W2 = tf.Variable(tf.truncated_normal([num_hidden_1, num_hidden_2],stddev = np.sqrt(2.0/num_hidden_1)))
  b2 = tf.Variable(tf.zeros([num_hidden_2]))

  #layer 3
  W3 = tf.Variable(tf.truncated_normal([num_hidden_2, num_hidden_3],stddev = np.sqrt(2.0/num_hidden_2)))
  b3 = tf.Variable(tf.zeros([num_hidden_3]))

  #layer 4
  W4 = tf.Variable(tf.truncated_normal([num_hidden_3, num_labels],stddev = np.sqrt(2.0/num_hidden_3)))
  b4 = tf.Variable(tf.zeros([num_labels]))
    
  # Training computation.
  # hidden layer output: dropout(relu(xw1+b1))  
  y1 = tf.nn.dropout(tf.nn.relu(tf.matmul(tf_train_dataset, W1) + b1),keep_prob=0.75)
  # second layer output
  y2 = tf.nn.dropout(tf.nn.relu(tf.matmul(y1, W2) + b2),keep_prob=0.75)
  y3 = tf.nn.dropout(tf.nn.relu(tf.matmul(y2, W3) + b3),keep_prob=0.75)
  y4 = tf.matmul(y3, W4) + b4
  ## QUESTION : IS THIS THE RIGHT WAY TO REGULARIZE?
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=y4))+\
    lam*(tf.nn.l2_loss(W1)+tf.nn.l2_loss(W2)+tf.nn.l2_loss(W3)+tf.nn.l2_loss(W4)) 
    
  # Optimizer.
  global_step = tf.Variable(0)  # count the number of steps taken.
  #learning_rate = tf.train.inverse_time_decay(0.0001, global_step, 1,1)
  learning_rate = tf.train.exponential_decay(0.5, global_step, 1000,0.65,staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(y4)
  # Here we don't put any dropout!!
  y1_valid = tf.nn.relu(tf.matmul(tf_valid_dataset, W1) + b1)  
  y2_valid = tf.nn.relu(tf.matmul(y1_valid, W2) + b2)
  y3_valid = tf.nn.relu(tf.matmul(y2_valid, W3) + b3)
  valid_prediction = tf.nn.softmax(tf.matmul(y3_valid, W4) + b4)
  y1_test = tf.nn.relu(tf.matmul(tf_test_dataset, W1) + b1)  
  y2_test = tf.nn.relu(tf.matmul(y1_test, W2) + b2)
  y3_test = tf.nn.relu(tf.matmul(y2_test, W3) + b3)
  test_prediction = tf.nn.softmax(tf.matmul(y3_test, W4) + b4)


    



In [41]:

    
num_steps = 9001
with tf.Session(graph=graph_4) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run(
      [optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    

