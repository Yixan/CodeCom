
In [5]:

    
# loss  二次代价函数

import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# 载入数据集
mnist = input_data.read_data_sets('./', one_hot=True)


# 设置每个 batch_size
batch_size = 100
# 共需多少批次运算
batch_nums = mnist.train.num_examples // batch_size

# 定义 placeholder
x = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])
keep_prob = tf.placeholder(tf.float32)

# 神经网络层
w1 = tf.Variable(tf.zeros([784, 10]))
b1 = tf.Variable(tf.zeros([10]))
# 更合理的 初始值设置
# w1 = tf.Variable(tf.truncated_normal([784, 2000], stddev=0.1))
# b1 = tf.Variable(tf.zeros([2000] + 0.1))
prediction = tf.nn.softmax(tf.matmul(x, w1) + b1)

# loss function
# ESM
loss = tf.reduce_mean(tf.square(y-prediction))
# CE 交叉熵
# loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=predictions))

# 梯度下降法
train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)

# 初始化变量
init_op = tf.global_variables_initializer()

# 预测结果 存储在一列表中
correct_predictions = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1))

# 计算 准确率
accuracy = tf.reduce_mean(tf.cast(correct_predictions, tf.float32))

with tf.Session() as sess:
    sess.run(init_op)
    for epoch in range(21):
        for batch in range(batch_nums):
            batch_xs, batch_ys = mnist.train.next_batch(batch)
            sess.run(train_step, feed_dict={x: batch_xs, y: batch_ys})
            
        acc = sess.run(accuracy, feed_dict={x: mnist.test.images, y: mnist.test.labels})
        print('Iter epoch {0}, Testing accuracy is {1}'.format(epoch, acc))
    


    



In [8]:

    
# loss 交叉熵损失函数
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# 载入数据集
mnist = input_data.read_data_sets('./', one_hot=True)


# 设置每个 batch_size
batch_size = 100
# 共需多少批次运算
batch_nums = mnist.train.num_examples // batch_size

# 定义 placeholder
x = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])
keep_prob = tf.placeholder(tf.float32)

# 神经网络层
w1 = tf.Variable(tf.zeros([784, 10]))
b1 = tf.Variable(tf.zeros([10]))
# 更合理的 初始值设置
# w1 = tf.Variable(tf.truncated_normal([784, 2000], stddev=0.1))
# b1 = tf.Variable(tf.zeros([2000] + 0.1))
prediction = tf.nn.softmax(tf.matmul(x, w1) + b1)

# loss function
# ESM
# loss = tf.reduce_mean(tf.square(y-prediction))
# CE 交叉熵
loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y, logits=prediction))

# 梯度下降法
train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)

# 初始化变量
init_op = tf.global_variables_initializer()

# 预测结果 存储在一列表中
correct_predictions = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1))

# 计算 准确率
accuracy = tf.reduce_mean(tf.cast(correct_predictions, tf.float32))

with tf.Session() as sess:
    sess.run(init_op)
    for epoch in range(21):
        for batch in range(batch_nums):
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            sess.run(train_step, feed_dict={x: batch_xs, y: batch_ys})
            
        acc = sess.run(accuracy, feed_dict={x: mnist.test.images, y: mnist.test.labels})
        print('Iter epoch {0}, Testing accuracy is {1}'.format(epoch, acc))


    



In [13]:

    
# Dropout 
# loss 交叉熵损失函数
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# 载入数据集
mnist = input_data.read_data_sets('./', one_hot=True)


# 设置每个 batch_size
batch_size = 100
# 共需多少批次运算
batch_nums = mnist.train.num_examples // batch_size

# 定义 placeholder
x = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])
keep_prob = tf.placeholder(tf.float32)

# 神经网络层
# 更合理的 初始值设置
w1 = tf.Variable(tf.truncated_normal([784, 200], stddev=0.1))
b1 = tf.Variable(tf.zeros([200]) + 0.1)
layer1 = tf.nn.tanh(tf.matmul(x, w1) + b1)
# 调用 dropout api
layer1_dropout = tf.nn.dropout(layer1, keep_prob)

# 增加 隐藏层 2
w2 = tf.Variable(tf.truncated_normal([200, 200], stddev=0.1))
b2 = tf.Variable(tf.zeros([200]) + 0.1)
layer2 = tf.nn.tanh(tf.matmul(layer1_dropout, w2) + b2)
# 调用 dropout api
layer2_dropout = tf.nn.dropout(layer2, keep_prob)


# 增加 隐藏层 3
w3 = tf.Variable(tf.truncated_normal([200, 100], stddev=0.1))
b3 = tf.Variable(tf.zeros([100]) + 0.1)
layer3 = tf.nn.tanh(tf.matmul(layer2_dropout, w3) + b3)
# 调用 dropout api
layer3_dropout = tf.nn.dropout(layer3, keep_prob)

# 输出层
w4 = tf.Variable(tf.truncated_normal([100, 10], stddev=0.1))
b4 = tf.Variable(tf.zeros([10]) + 0.1)
prediction = tf.nn.softmax(tf.matmul(layer3_dropout, w4) + b4)

# loss function
# ESM
# loss = tf.reduce_mean(tf.square(y-prediction))
# CE 交叉熵
loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y, logits=prediction))

# 梯度下降法
train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)

# 初始化变量
init_op = tf.global_variables_initializer()

# 预测结果 存储在一列表中
correct_predictions = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1))

# 计算 准确率
accuracy = tf.reduce_mean(tf.cast(correct_predictions, tf.float32))

with tf.Session() as sess:
    sess.run(init_op)
    for epoch in range(21):
        for batch in range(batch_nums):
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            sess.run(train_step, feed_dict={x: batch_xs, y: batch_ys, keep_prob: 0.7})
            
        acc = sess.run(accuracy, feed_dict={x: mnist.test.images, y: mnist.test.labels, keep_prob: 0.7})
        print('Iter epoch {0}, Testing accuracy is {1}'.format(epoch, acc))


    



In [15]:

    
# loss  二次代价函数

import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

# 载入数据集
mnist = input_data.read_data_sets('./', one_hot=True)


# 设置每个 batch_size
batch_size = 100
# 共需多少批次运算
batch_nums = mnist.train.num_examples // batch_size

# 定义 placeholder
with tf.name_scope('input'):
    x = tf.placeholder(tf.float32, [None, 784])
    y = tf.placeholder(tf.float32, [None, 10])
    keep_prob = tf.placeholder(tf.float32)

# 神经网络层
w1 = tf.Variable(tf.zeros([784, 10]))
b1 = tf.Variable(tf.zeros([10]))
# 更合理的 初始值设置
# w1 = tf.Variable(tf.truncated_normal([784, 2000], stddev=0.1))
# b1 = tf.Variable(tf.zeros([2000] + 0.1))
prediction = tf.nn.softmax(tf.matmul(x, w1) + b1)

# loss function
# ESM
loss = tf.reduce_mean(tf.square(y-prediction))
# CE 交叉熵
# loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y, logits=predictions))

# 梯度下降法
train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)

# 初始化变量
init_op = tf.global_variables_initializer()

# 预测结果 存储在一列表中
correct_predictions = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1))

# 计算 准确率
accuracy = tf.reduce_mean(tf.cast(correct_predictions, tf.float32))

with tf.Session() as sess:
    sess.run(init_op)
    writer = tf.summary.FileWriter('logs/', sess.graph)
    for epoch in range(1):
        for batch in range(batch_nums):
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            sess.run(train_step, feed_dict={x: batch_xs, y: batch_ys})
            
        acc = sess.run(accuracy, feed_dict={x: mnist.test.images, y: mnist.test.labels})
        print('Iter epoch {0}, Testing accuracy is {1}'.format(epoch, acc))
    


    

