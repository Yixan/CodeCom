
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = '/Users/srikanth_m07/Documents/ml_dataset/vision/notMNIST/notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32) #one hot encodings
  return dataset, labels

train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))/ predictions.shape[0])


    



In [5]:

    
batch_size = 128
beta = 0.05

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(dtype=tf.float32, shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(dtype=tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Variables.
  weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
  biases = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  logits = tf.matmul(tf_train_dataset, weights) + biases
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits))
    
  #Adding Regularization
  loss += beta*(tf.nn.l2_loss(weights))
    
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
    
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
  test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [7]:

    
batch_size = 128
hidden_nodes = 1024

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  X_train = tf.placeholder(dtype=tf.float32, shape=(batch_size, image_size * image_size))
  Y_train = tf.placeholder(dtype=tf.float32, shape=(batch_size, num_labels))
  X_valid = tf.constant(valid_dataset)
  X_test = tf.constant(test_dataset)

  # Variables.
  w1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
  b1 = tf.Variable(tf.zeros([hidden_nodes]))
  w2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))
  
  # Forward propagation.
  def forward_prop(data):
    z1 = tf.matmul(data, w1) + b1
    a1 = tf.nn.relu(z1)
    return tf.matmul(a1, w2) + b2

  logits = forward_prop(X_train)
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=Y_train, logits=logits))

  #Adding Regularization
  #loss += beta * (tf.nn.l2_loss(w1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(w2) + tf.nn.l2_loss(b2))
  loss += beta * (tf.nn.l2_loss(w1) + tf.nn.l2_loss(w2))

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_output = tf.nn.softmax(logits)
  valid_output = tf.nn.softmax(forward_prop(X_valid))
  test_output = tf.nn.softmax(forward_prop(X_test))


    



In [8]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {X_train : batch_data, Y_train : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_output], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_output.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_output.eval(), test_labels))


    



In [9]:

    
num_steps = 3001
train_dataset_small = train_dataset[:500, :]
train_labels_small = train_labels[:500, :]


with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels_small.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset_small[offset:(offset + batch_size), :]
    batch_labels = train_labels_small[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {X_train : batch_data, Y_train : batch_labels}
    _, l, predictions = session.run([optimizer, loss, train_output], feed_dict=feed_dict)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_output.eval(), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_output.eval(), test_labels))


    



In [12]:

    
batch_size = 128
hidden_nodes = 1024
beta = 0.01

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  X_train = tf.placeholder(dtype=tf.float32, shape=(batch_size, image_size * image_size))
  Y_train = tf.placeholder(dtype=tf.float32, shape=(batch_size, num_labels))
  X_valid = tf.constant(valid_dataset)
  X_test = tf.constant(test_dataset)
  keep_prob = tf.placeholder(tf.float32)

  # Variables.
  w1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_nodes]))
  b1 = tf.Variable(tf.zeros([hidden_nodes]))
  w2 = tf.Variable(tf.truncated_normal([hidden_nodes, num_labels]))
  b2 = tf.Variable(tf.zeros([num_labels]))
  
  # Forward propagation.
  def forward_prop(data):
    z1 = tf.matmul(data, w1) + b1
    a1 = tf.nn.relu(z1)
    #Add dropout to the hidden layer.
    dropout_a1 = tf.nn.dropout(a1, keep_prob)
    return tf.matmul(dropout_a1, w2) + b2

  logits = forward_prop(X_train)
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=Y_train, logits=logits))

  #Adding Regularization
  #loss += beta * (tf.nn.l2_loss(w1) + tf.nn.l2_loss(b1) + tf.nn.l2_loss(w2) + tf.nn.l2_loss(b2))
  loss += beta * (tf.nn.l2_loss(w1) + tf.nn.l2_loss(w2))

  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_output = tf.nn.softmax(logits)
  valid_output = tf.nn.softmax(forward_prop(X_valid))
  test_output = tf.nn.softmax(forward_prop(X_test))


    



In [14]:

    
num_steps = 3001

with tf.Session(graph=graph) as session:
  tf.global_variables_initializer().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    # Prepare a dictionary telling the session where to feed the minibatch.
    # The key of the dictionary is the placeholder node of the graph to be fed,
    # and the value is the numpy array to feed to it.
    feed_dict = {X_train : batch_data, Y_train : batch_labels, keep_prob: 1.0}
    #adding dropout at training
    feed_dict_drop = {X_train : batch_data, Y_train : batch_labels, keep_prob: 0.5}
    _, l, predictions = session.run([optimizer, loss, train_output], feed_dict=feed_dict_drop)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_output.eval(feed_dict=feed_dict), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_output.eval(feed_dict=feed_dict), test_labels))


    



In [49]:

    
image_size = 28
batch_size = 128
num_hidden_nodes1 = 1024
num_hidden_nodes2 = 256
num_hidden_nodes3 = 128
beta = 0.01
learning_rate = 0.5

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  X_train = tf.placeholder(tf.float32, shape=(batch_size, image_size * image_size))
  Y_train = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  X_valid = tf.constant(valid_dataset)
  X_test = tf.constant(test_dataset)
  global_step = tf.Variable(0)
  keep_prob = tf.placeholder(tf.float32)

  # Variables.
  w1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_hidden_nodes1],
                                             stddev=np.sqrt(2.0 / (image_size * image_size))))
  b1 = tf.Variable(tf.zeros([num_hidden_nodes1]))
  w2 = tf.Variable(tf.truncated_normal([num_hidden_nodes1, num_hidden_nodes2], 
                                             stddev=np.sqrt(2.0 / num_hidden_nodes1)))
  b2 = tf.Variable(tf.zeros([num_hidden_nodes2]))
  w3 = tf.Variable(tf.truncated_normal([num_hidden_nodes2, num_hidden_nodes3], 
                                             stddev=np.sqrt(2.0 / num_hidden_nodes2)))
  b3 = tf.Variable(tf.zeros([num_hidden_nodes3]))
  w4 = tf.Variable(tf.truncated_normal([num_hidden_nodes3, num_labels], 
                                             stddev=np.sqrt(2.0 / num_hidden_nodes3)))
  b4 = tf.Variable(tf.zeros([num_labels]))
  
  # Training computation.
  def forward_prop(data): 
    a1 = tf.nn.relu(tf.matmul(data, w1) + b1)
    dropout_a1 = tf.nn.dropout(a1, keep_prob)
    a2 = tf.nn.relu(tf.matmul(dropout_a1, w2) + b2)
    dropout_a2 = tf.nn.dropout(a2, keep_prob)
    a3 = tf.nn.relu(tf.matmul(dropout_a2, w3) + b3)
    dropout_a3 = tf.nn.dropout(a3, keep_prob)
    return tf.matmul(dropout_a3, w4) + b4

  logits = forward_prop(X_train)
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=Y_train))
  #Adding Regularization (l2 loss)
  loss += beta * (tf.nn.l2_loss(w1) + tf.nn.l2_loss(w2) + tf.nn.l2_loss(w3) + tf.nn.l2_loss(w4))

  # Optimizer and decay
  learning_rate = tf.train.exponential_decay(0.5, global_step, 4000, 0.65, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_output = tf.nn.softmax(logits)
  valid_output = tf.nn.softmax(forward_prop(X_valid))
  test_output = tf.nn.softmax(forward_prop(X_test))


    



In [50]:

    
num_steps = 15001

with tf.Session(graph=graph) as session:
  tf.initialize_all_variables().run()
  print("Initialized")
  for step in range(num_steps):
    # Pick an offset within the training data, which has been randomized.
    # Note: we could use better randomization across epochs.
    offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
    # Generate a minibatch.
    batch_data = train_dataset[offset:(offset + batch_size), :]
    batch_labels = train_labels[offset:(offset + batch_size), :]
    
    feed_dict = {X_train : batch_data, Y_train : batch_labels, keep_prob: 1.0}
    feed_dict_drop = {X_train : batch_data, Y_train : batch_labels, keep_prob: 0.5}
    _, l, predictions = session.run([optimizer, loss, train_output], feed_dict=feed_dict_drop)
    if (step % 500 == 0):
      print("Minibatch loss at step %d: %f" % (step, l))
      print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
      print("Validation accuracy: %.1f%%" % accuracy(valid_output.eval(feed_dict=feed_dict), valid_labels))
  print("Test accuracy: %.1f%%" % accuracy(test_output.eval(feed_dict=feed_dict), test_labels))


    



In [ ]:

    
 


    

