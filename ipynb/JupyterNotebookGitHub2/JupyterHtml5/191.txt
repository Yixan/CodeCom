
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [6]:

    
batch_size = 128
hidden_size = 1024

beta = 0.01

def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, image_size * image_size)) # dim 128x784
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels)) # dim 128x10
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    # Connecting Input with Hidden layer
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_size])) # dim 784x1024
    biases_1 = tf.Variable(tf.zeros([hidden_size])) # dim 1x1024
    # Connecting Hidden with Output layer
    weights_2 = tf.Variable(tf.truncated_normal([hidden_size, num_labels])) # dim 1024x10
    biases_2 = tf.Variable(tf.zeros([num_labels])) # dim 1x10

    # Training computation.
    # First Linear
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1 # X*W1+b1 dim: 128x784 * 784x1024 + 1x1024, 128x1024+1x1024
    # ReLU Application
    relus = tf.nn.relu(logits_1) # dim 128x1024+1x1024
    # Second Linear
    logits_2 = tf.matmul(relus, weights_2) + biases_2 # ReLU(X*W1+b1)*W2+b2 dim:128x1024+1x1024 * 1024x10 + 1x10=128x10+1x10
    # Output
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2))
    
    # Regularization
    regularizer = tf.nn.l2_loss(weights_1)+tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(loss + beta*regularizer)
    
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits_2)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1),
        weights_2) + biases_2)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1),
        weights_2) + biases_2)

num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [12]:

    
batch_size = 128
hidden_size = 1024

beta = 0.01

def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, image_size * image_size)) # dim 128x784
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels)) # dim 128x10
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    # Connecting Input with Hidden layer
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_size])) # dim 784x1024
    biases_1 = tf.Variable(tf.zeros([hidden_size])) # dim 1x1024
    # Connecting Hidden with Output layer
    weights_2 = tf.Variable(tf.truncated_normal([hidden_size, num_labels])) # dim 1024x10
    biases_2 = tf.Variable(tf.zeros([num_labels])) # dim 1x10

    # Training computation.
    # First Linear
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1 # X*W1+b1 dim: 128x784 * 784x1024 + 1x1024, 128x1024+1x1024
    # ReLU Application
    relus = tf.nn.relu(logits_1) # dim 128x1024+1x1024
    # Second Linear
    logits_2 = tf.matmul(relus, weights_2) + biases_2 # ReLU(X*W1+b1)*W2+b2 dim:128x1024+1x1024 * 1024x10 + 1x10=128x10+1x10
    # Output
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2))
    
    # Regularization
    regularizer = tf.nn.l2_loss(weights_1)+tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(loss + beta*regularizer)
    
    # Optimizer.
    optimizer = tf.train.AdamOptimizer(4e-3).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits_2)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1),
        weights_2) + biases_2)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1),
        weights_2) + biases_2)

num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [13]:

    
batch_size = 128
hidden_size = 1024


beta = 0.01
prob = 0.5
Adam_const = 4e-3

def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, image_size * image_size)) # dim 128x784
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels)) # dim 128x10
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    # Connecting Input with Hidden layer
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_size])) # dim 784x1024
    biases_1 = tf.Variable(tf.zeros([hidden_size])) # dim 1x1024
    # Connecting Hidden with Output layer
    weights_2 = tf.Variable(tf.truncated_normal([hidden_size, num_labels])) # dim 1024x10
    biases_2 = tf.Variable(tf.zeros([num_labels])) # dim 1x10

    # Training computation.
    # First Linear
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1 # X*W1+b1 dim: 128x784 * 784x1024 + 1x1024, 128x1024+1x1024
    # ReLU Application
    relu_layer = tf.nn.relu(logits_1) # dim 128x1024+1x1024

    # Dropout on hidden layer: RELU layer
    keep_prob = tf.placeholder("float")
    relu_layer_dropout = tf.nn.dropout(relu_layer, keep_prob)
    
    # Second Linear
    logits_2 = tf.matmul(relu_layer_dropout, weights_2) + biases_2 # ReLU(X*W1+b1)*W2+b2 dim:128x1024+1x1024 * 1024x10 + 1x10=128x10+1x10
    # Output
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_2))
    
    # Regularization
    regularizer = tf.nn.l2_loss(weights_1)+tf.nn.l2_loss(weights_2)
    loss = tf.reduce_mean(loss + beta*regularizer)
    
    # Optimizer.
    optimizer = tf.train.AdamOptimizer(Adam_const).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits_2)
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1),
        weights_2) + biases_2)
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1),
        weights_2) + biases_2)

num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels, keep_prob : prob}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))   


    



In [16]:

    
batch_size = 128
hidden_size = 1024

beta = 0.01
prob = 0.5
Adam_const = 4e-3

def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)

    # Variables.
    # Connecting Input with Hidden layer
    weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, hidden_size]), name='W1')
    biases_1 = tf.Variable(tf.zeros([hidden_size]), name='b1')
    # Connecting Hidden layer 1 with Hidden layer 2
    weights_2 = tf.Variable(tf.truncated_normal([hidden_size, hidden_size]), name='W2')
    biases_2 = tf.Variable(tf.zeros([hidden_size]), name='b2')
    # Connecting Hidden with Output layer
    weights_3 = tf.Variable(tf.truncated_normal([hidden_size, num_labels]), name='W3')
    biases_3 = tf.Variable(tf.zeros([num_labels]), name='b3')

    # Training computation.
    # First Linear
    logits_1 = tf.matmul(tf_train_dataset, weights_1) + biases_1
    # First ReLU Application
    hidden_layer_1 = tf.nn.relu(logits_1) # dim 128x1024+1x1024
    # Second Linear
    logits_2 = tf.matmul(hidden_layer_1, weights_2) + biases_2
    # Second ReLU Application
    hidden_layer_2 = tf.nn.relu(logits_2)
    # Third Linear
    logits_3 = tf.matmul(hidden_layer_2, weights_3) + biases_3
    # Output
    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=tf_train_labels, logits=logits_3))
    # Regularizer
    regularizer = tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2) + tf.nn.l2_loss(weights_3)
    # new loss
    # loss = tf.reduce_mean(loss + beta*regularizer)
    loss = loss + beta*regularizer
        
    # Optimizer.
    optimizer = tf.train.AdamOptimizer(Adam_const).minimize(loss)

    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits_3)
    
    valid_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(
            tf.matmul(tf.nn.relu(
                tf.matmul(tf_valid_dataset, weights_1)+biases_1),weights_2)
            +biases_2),weights_3)
        +biases_3)
    
    test_prediction = tf.nn.softmax(
        tf.matmul(tf.nn.relu(
            tf.matmul(tf.nn.relu(
                tf.matmul(tf_test_dataset, weights_1)+biases_1),weights_2)
            +biases_2),weights_3)
        +biases_3)

num_steps = 3001

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))


    



In [ ]:

    
 


    

