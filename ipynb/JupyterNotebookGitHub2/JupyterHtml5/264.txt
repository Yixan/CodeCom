
In [68]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function, division
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:
  save = pickle.load(f)
  train_dataset = save['train_dataset']
  train_labels = save['train_labels']
  valid_dataset = save['valid_dataset']
  valid_labels = save['valid_labels']
  test_dataset = save['test_dataset']
  test_labels = save['test_labels']
  del save  # hint to help gc free up memory
  print('Training set', train_dataset.shape, train_labels.shape)
  print('Validation set', valid_dataset.shape, valid_labels.shape)
  print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
  dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
  # Map 2 to [0.0, 1.0, 0.0 ...], 3 to [0.0, 0.0, 1.0 ...]
  labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
  return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
  return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
          / predictions.shape[0])


    



In [21]:

    
batch_size = 128
num_nodes = 1024
beta = 1e-4

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Hidden layer.
  weights_1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_nodes]))
  biases_1 = tf.Variable(tf.zeros([num_nodes]))
  relu_layer = tf.nn.relu(tf.matmul(tf_train_dataset, weights_1) + biases_1)

  # Output layer
  weights_2 = tf.Variable(
    tf.truncated_normal([num_nodes, num_labels]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))
  logits = tf.matmul(relu_layer, weights_2) + biases_2

  # Training computation.
  loss = (tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) +
    beta * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2)))
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2) + biases_2)
  test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2) + biases_2)


    



In [23]:

    
def train_net(graph, num_steps=3001):
    with tf.Session(graph=graph) as session:
      tf.initialize_all_variables().run()
      print("Initialized")
      for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run(
          [optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
          print("Minibatch loss at step %d: %f" % (step, l))
          print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
          print("Validation accuracy: %.1f%%" % accuracy(
            valid_prediction.eval(), valid_labels))
      print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))

train_net(graph)


    



In [24]:

    
train_net(graph, 3)


    



In [25]:

    
batch_size = 128
num_nodes = 1024
beta = 1e-4

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Hidden layer.
  weights_1 = tf.Variable(
    tf.truncated_normal([image_size * image_size, num_nodes]))
  biases_1 = tf.Variable(tf.zeros([num_nodes]))
  relu_layer = tf.nn.relu(tf.matmul(tf_train_dataset, weights_1) + biases_1)

  # Output layer
  weights_2 = tf.Variable(
    tf.truncated_normal([num_nodes, num_labels]))
  biases_2 = tf.Variable(tf.zeros([num_labels]))
  logits = tf.matmul(relu_layer, weights_2) + biases_2

  # Training computation.
  loss = tf.nn.dropout(tf.reduce_mean(
    tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels)) +
    beta * (tf.nn.l2_loss(weights_1) + tf.nn.l2_loss(weights_2)), 0.5)
  
  # Optimizer.
  optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)
  valid_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_valid_dataset, weights_1) + biases_1), weights_2) + biases_2)
  test_prediction = tf.nn.softmax(tf.matmul(tf.nn.relu(tf.matmul(tf_test_dataset, weights_1) + biases_1), weights_2) + biases_2)


    



In [26]:

    
train_net(graph)


    



In [95]:

    
batch_size = 128
num_nodes_1 = 1024
num_nodes_2 = 512
num_nodes_3 = 256
num_nodes_4 = 64
beta = 1e-5

graph = tf.Graph()
with graph.as_default():

  # Input data. For the training data, we use a placeholder that will be fed
  # at run time with a training minibatch.
  tf_train_dataset = tf.placeholder(tf.float32,
                                    shape=(batch_size, image_size * image_size))
  tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
  tf_valid_dataset = tf.constant(valid_dataset)
  tf_test_dataset = tf.constant(test_dataset)
  
  # Hidden layer 1
  weights_1 = tf.Variable(tf.truncated_normal([image_size * image_size, num_nodes_1], stddev=0.1))
  biases_1 = tf.Variable(tf.zeros([num_nodes_1]))
  relu_layer_1 = tf.nn.dropout(tf.nn.relu(tf.matmul(tf_train_dataset, weights_1) + biases_1), 0.8)

  # Hidden layer 2
  weights_2 = tf.Variable(tf.truncated_normal([num_nodes_1, num_nodes_2], stddev=np.sqrt(2.0 / num_nodes_1)))
  biases_2 = tf.Variable(tf.zeros([num_nodes_2]))
  relu_layer_2 = tf.nn.dropout(tf.nn.relu(tf.matmul(relu_layer_1, weights_2) + biases_2), 0.6)

  # Hidden layer 3
  weights_3 = tf.Variable(tf.truncated_normal([num_nodes_2, num_nodes_3], stddev=np.sqrt(2.0 / num_nodes_2)))
  biases_3 = tf.Variable(tf.zeros([num_nodes_3]))
  relu_layer_3 = tf.nn.dropout(tf.nn.relu(tf.matmul(relu_layer_2, weights_3) + biases_3), 0.6)

  weights_4 = tf.Variable(tf.truncated_normal([num_nodes_3, num_nodes_4], stddev=np.sqrt(2.0 / num_nodes_3)))
  biases_4 = tf.Variable(tf.zeros([num_nodes_4]))
  relu_layer_4 = tf.nn.dropout(tf.nn.relu(tf.matmul(relu_layer_3, weights_4) + biases_4), 0.6)

  # Output layer
  weights = tf.Variable(
    tf.truncated_normal([num_nodes_4, num_labels], stddev=np.sqrt(2.0 / num_nodes_4)))
  biases = tf.Variable(tf.zeros([num_labels]))
  logits = tf.matmul(relu_layer_4, weights) + biases

  # Training computation.
  loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits, tf_train_labels))
  l2_reg = beta * np.sum(map(tf.nn.l2_loss, [weights, weights_1, weights_2, weights_3, weights_4,
                                             biases, biases_1, biases_2, biases_3, biases_4]))
  loss += l2_reg
  
  # Optimizer.
  global_step = tf.Variable(0)  # count the number of steps taken.
  learning_rate = tf.train.exponential_decay(0.5, global_step,
                                             500, 0.9, staircase=True)
  optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)
  
  # Predictions for the training, validation, and test data.
  train_prediction = tf.nn.softmax(logits)

  def prediction(ds):
    step = tf.nn.relu(tf.matmul(ds, weights_1) + biases_1)
    step = tf.nn.relu(tf.matmul(step, weights_2) + biases_2)
    step = tf.nn.relu(tf.matmul(step, weights_3) + biases_3)
    step = tf.nn.relu(tf.matmul(step, weights_4) + biases_4)
    step = tf.matmul(step, weights) + biases
    return tf.nn.softmax(step)

  valid_prediction = prediction(tf_valid_dataset)
  test_prediction = prediction(tf_test_dataset)


    



In [94]:

    
train_net(graph, 10000)


    

