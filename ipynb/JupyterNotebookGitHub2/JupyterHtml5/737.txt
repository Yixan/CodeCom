
In [1]:

    
# These are all the modules we'll be using later. Make sure you can import them
# before proceeding further.
from __future__ import print_function
import numpy as np
import tensorflow as tf
from six.moves import cPickle as pickle
import datetime


    



In [2]:

    
pickle_file = 'notMNIST.pickle'

with open(pickle_file, 'rb') as f:    
    save = pickle.load(f)
    train_dataset = save['train_dataset']
    train_labels = save['train_labels']
    valid_dataset = save['valid_dataset']
    valid_labels = save['valid_labels']
    test_dataset = save['test_dataset']
    test_labels = save['test_labels']
    del save  # hint to help gc free up memory
    print('Training set', train_dataset.shape, train_labels.shape)
    print('Validation set', valid_dataset.shape, valid_labels.shape)
    print('Test set', test_dataset.shape, test_labels.shape)


    



In [3]:

    
image_size = 28
num_labels = 10

def reformat(dataset, labels):
    dataset = dataset.reshape((-1, image_size * image_size)).astype(np.float32)
    # Map 1 to [0.0, 1.0, 0.0 ...], 2 to [0.0, 0.0, 1.0 ...]
    labels = (np.arange(num_labels) == labels[:,None]).astype(np.float32)
    return dataset, labels
train_dataset, train_labels = reformat(train_dataset, train_labels)
valid_dataset, valid_labels = reformat(valid_dataset, valid_labels)
test_dataset, test_labels = reformat(test_dataset, test_labels)
print('Training set', train_dataset.shape, train_labels.shape)
print('Validation set', valid_dataset.shape, valid_labels.shape)
print('Test set', test_dataset.shape, test_labels.shape)


    



In [4]:

    
def accuracy(predictions, labels):
    return (100.0 * np.sum(np.argmax(predictions, 1) == np.argmax(labels, 1))
            / predictions.shape[0])


    



In [5]:

    
batch_size = 128

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = tf.Variable(tf.truncated_normal([image_size * image_size, num_labels]))
    biases = tf.Variable(tf.zeros([num_labels]))
  
    # Training computation.
    logits = tf.matmul(tf_train_dataset, weights) + biases
    loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                labels=tf_train_labels, logits=logits)) + 0.001 * tf.nn.l2_loss(weights))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(logits)
    valid_prediction = tf.nn.softmax(tf.matmul(tf_valid_dataset, weights) + biases)
    test_prediction = tf.nn.softmax(tf.matmul(tf_test_dataset, weights) + biases)


    



In [6]:

    
num_steps = 3001
t0 = datetime.datetime.now()

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                  valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
print ('Time: ', datetime.datetime.now() - t0)


    



In [7]:

    
num_steps = 3001
n_hidden_nodes = 1024

def one_layer_perceptron(x, weights, biases):
    # Hidden layer with RELU activation
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    layer_1 = tf.nn.relu(layer_1)
    # Output layer with linear activation
    out_layer = tf.matmul(layer_1, weights['out']) + biases['out']
    return out_layer

batch_size = 128

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = {
        'h1': tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_nodes])),
        'out': tf.Variable(tf.truncated_normal([n_hidden_nodes, num_labels]))
    }
    biases = {
        'b1': tf.Variable(tf.zeros([n_hidden_nodes])),
        'out': tf.Variable(tf.zeros([num_labels]))
    }

    # Training computation.
    train_logits = one_layer_perceptron(tf_train_dataset, weights, biases)
    valid_logits = one_layer_perceptron(tf_valid_dataset, weights, biases)
    test_logits = one_layer_perceptron(tf_test_dataset, weights, biases)
    loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                logits=train_logits, labels=tf_train_labels)) 
            + 0.001 * (tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(weights['out'])))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(train_logits)
    valid_prediction = tf.nn.softmax(valid_logits)
    test_prediction = tf.nn.softmax(test_logits)


    



In [8]:

    
t0 = datetime.datetime.now()

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                  valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
print ('Time: ', datetime.datetime.now() - t0)


    



In [61]:

    
num_steps = 3001
n_hidden_nodes = 1024

def one_layer_perceptron(x, weights, biases):
    # Hidden layer with RELU activation
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    layer_1 = tf.nn.relu(layer_1)
    # Output layer with linear activation
    out_layer = tf.matmul(layer_1, weights['out']) + biases['out']
    return out_layer

batch_size = 128

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = {
        'h1': tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_nodes])),
        'out': tf.Variable(tf.truncated_normal([n_hidden_nodes, num_labels]))
    }
    biases = {
        'b1': tf.Variable(tf.zeros([n_hidden_nodes])),
        'out': tf.Variable(tf.zeros([num_labels]))
    }

    # Training computation.
    train_logits = one_layer_perceptron(tf_train_dataset, weights, biases)
    valid_logits = one_layer_perceptron(tf_valid_dataset, weights, biases)
    test_logits = one_layer_perceptron(tf_test_dataset, weights, biases)
    loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                logits=train_logits, labels=tf_train_labels)) 
            + 0.001 * (tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(weights['out'])))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(train_logits)
    valid_prediction = tf.nn.softmax(valid_logits)
    test_prediction = tf.nn.softmax(test_logits)


    



In [62]:

    
t0 = datetime.datetime.now()

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels[:128*3].shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                  valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
print ('Time: ', datetime.datetime.now() - t0)


    



In [71]:

    
num_steps = 3001
n_hidden_nodes = 1024

def one_layer_perceptron(x, weights, biases, keep_prob=1.0):
    # Hidden layer with RELU activation
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    layer_1 = tf.nn.relu(layer_1)
    tf_keep_prob = tf.placeholder(tf.float32)
    tf_layer_1_drop = tf.nn.dropout(layer_1, keep_prob)
    # Output layer with linear activation
    out_layer = tf.matmul(tf_layer_1_drop, weights['out']) + biases['out']
    return out_layer

batch_size = 128

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = {
        'h1': tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_nodes])),
        'out': tf.Variable(tf.truncated_normal([n_hidden_nodes, num_labels]))
    }
    biases = {
        'b1': tf.Variable(tf.zeros([n_hidden_nodes])),
        'out': tf.Variable(tf.zeros([num_labels]))
    }

    # Training computation.
    train_logits = one_layer_perceptron(tf_train_dataset, weights, biases, keep_prob = 0.8)
    valid_logits = one_layer_perceptron(tf_valid_dataset, weights, biases, keep_prob = 1.0)
    test_logits = one_layer_perceptron(tf_test_dataset, weights, biases, keep_prob = 1.0)
    loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                logits=train_logits, labels=tf_train_labels)) 
            + 0.001 * (tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(weights['out'])))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(train_logits)
    valid_prediction = tf.nn.softmax(valid_logits)
    test_prediction = tf.nn.softmax(test_logits)


    



In [72]:

    
t0 = datetime.datetime.now()

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                  valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
print ('Time: ', datetime.datetime.now() - t0)


    



In [73]:

    
num_steps = 3001
n_hidden_nodes = 1024

def one_layer_perceptron(x, weights, biases, keep_prob=1.0):
    # Hidden layer with RELU activation
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    layer_1 = tf.nn.relu(layer_1)
    tf_keep_prob = tf.placeholder(tf.float32)
    tf_layer_1_drop = tf.nn.dropout(layer_1, keep_prob)
    # Output layer with linear activation
    out_layer = tf.matmul(tf_layer_1_drop, weights['out']) + biases['out']
    return out_layer

batch_size = 128

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = {
        'h1': tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_nodes])),
        'out': tf.Variable(tf.truncated_normal([n_hidden_nodes, num_labels]))
    }
    biases = {
        'b1': tf.Variable(tf.zeros([n_hidden_nodes])),
        'out': tf.Variable(tf.zeros([num_labels]))
    }

    # Training computation.
    train_logits = one_layer_perceptron(tf_train_dataset, weights, biases, keep_prob=0.5)
    valid_logits = one_layer_perceptron(tf_valid_dataset, weights, biases, keep_prob=1.)
    test_logits = one_layer_perceptron(tf_test_dataset, weights, biases, keep_prob=1.)
    loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                logits=train_logits, labels=tf_train_labels)) 
            + 0.001 * (tf.nn.l2_loss(weights['h1']) + tf.nn.l2_loss(weights['out'])))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.5).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(train_logits)
    valid_prediction = tf.nn.softmax(valid_logits)
    test_prediction = tf.nn.softmax(test_logits)


    



In [74]:

    
t0 = datetime.datetime.now()

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels[:128*3].shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 500 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                  valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
print ('Time: ', datetime.datetime.now() - t0)


    



In [27]:

    
num_steps = 100001
n_hidden_nodes = 64

def multi_layer_perceptron(x, weights, biases):
    # Hidden layer with RELU activation
    layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1'])
    layer_1 = tf.nn.relu(layer_1)
    layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])
    layer_2 = tf.nn.relu(layer_2)
    # Output layer with linear activation
    out_layer = tf.add(tf.matmul(layer_2, weights['out']), biases['out'])
    return out_layer

batch_size = 128

graph = tf.Graph()
with graph.as_default():
    # Input data. For the training data, we use a placeholder that will be fed
    # at run time with a training minibatch.
    tf_train_dataset = tf.placeholder(tf.float32,
                                      shape=(batch_size, image_size * image_size))
    tf_train_labels = tf.placeholder(tf.float32, shape=(batch_size, num_labels))
    tf_valid_dataset = tf.constant(valid_dataset)
    tf_test_dataset = tf.constant(test_dataset)
  
    # Variables.
    weights = {
        'h1': tf.Variable(tf.truncated_normal([image_size * image_size, n_hidden_nodes])),
        'h2': tf.Variable(tf.truncated_normal([n_hidden_nodes, n_hidden_nodes])),
        'out': tf.Variable(tf.truncated_normal([n_hidden_nodes, num_labels]))
    }
    biases = {
        'b1': tf.Variable(tf.zeros([n_hidden_nodes])),
        'b2': tf.Variable(tf.zeros([n_hidden_nodes])),
        'out': tf.Variable(tf.zeros([num_labels]))
    }

    # Training computation.
    train_logits = multi_layer_perceptron(tf_train_dataset, weights, biases)
    valid_logits = multi_layer_perceptron(tf_valid_dataset, weights, biases)
    test_logits = multi_layer_perceptron(tf_test_dataset, weights, biases)
    loss = (tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                logits=train_logits, labels=tf_train_labels)) 
            + 0.001 * (tf.nn.l2_loss(weights['h1']) + 
                       tf.nn.l2_loss(weights['h2']) + 
                       tf.nn.l2_loss(weights['out'])))
  
    # Optimizer.
    optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(loss)
  
    # Predictions for the training, validation, and test data.
    train_prediction = tf.nn.softmax(train_logits)
    valid_prediction = tf.nn.softmax(valid_logits)
    test_prediction = tf.nn.softmax(test_logits)


    



In [28]:

    
t0 = datetime.datetime.now()

with tf.Session(graph=graph) as session:
    tf.global_variables_initializer().run()
    print("Initialized")
    for step in range(num_steps):
        # Pick an offset within the training data, which has been randomized.
        # Note: we could use better randomization across epochs.
        offset = (step * batch_size) % (train_labels.shape[0] - batch_size)
        # Generate a minibatch.
        batch_data = train_dataset[offset:(offset + batch_size), :]
        batch_labels = train_labels[offset:(offset + batch_size), :]
        # Prepare a dictionary telling the session where to feed the minibatch.
        # The key of the dictionary is the placeholder node of the graph to be fed,
        # and the value is the numpy array to feed to it.
        feed_dict = {tf_train_dataset : batch_data, tf_train_labels : batch_labels}
        _, l, predictions = session.run([optimizer, loss, train_prediction], feed_dict=feed_dict)
        if (step % 10000 == 0):
            print("Minibatch loss at step %d: %f" % (step, l))
            print("Minibatch accuracy: %.1f%%" % accuracy(predictions, batch_labels))
            print("Validation accuracy: %.1f%%" % accuracy(
                  valid_prediction.eval(), valid_labels))
    print("Test accuracy: %.1f%%" % accuracy(test_prediction.eval(), test_labels))
print ('Time: ', datetime.datetime.now() - t0)


    



In [ ]:

    
 


    

